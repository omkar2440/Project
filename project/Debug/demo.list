
demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000db04  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  0800dc8c  0800dc8c  0001dc8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800de10  0800de10  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  0800de10  0800de10  0001de10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800de18  0800de18  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800de18  0800de18  0001de18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800de1c  0800de1c  0001de1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  0800de20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002007c  2**0
                  CONTENTS
 10 .bss          00001e50  2000007c  2000007c  0002007c  2**2
                  ALLOC
 11 ._user_heap_stack 00004004  20001ecc  20001ecc  0002007c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001b86a  00000000  00000000  000200ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00004cd8  00000000  00000000  0003b959  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001448  00000000  00000000  00040638  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f5c  00000000  00000000  00041a80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000260fe  00000000  00000000  000429dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001edcf  00000000  00000000  00068ada  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cb42e  00000000  00000000  000878a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005564  00000000  00000000  00152cd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  0015823c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800dc74 	.word	0x0800dc74

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800dc74 	.word	0x0800dc74

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <write_register>:
static void write_register(uint8_t reg, uint8_t *data);
static void read_register(uint8_t reg, uint8_t *data);

// Function(1): Write to register
static void write_register(uint8_t reg, uint8_t *data)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b086      	sub	sp, #24
 80004c8:	af02      	add	r7, sp, #8
 80004ca:	4603      	mov	r3, r0
 80004cc:	6039      	str	r1, [r7, #0]
 80004ce:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 80004d0:	79fb      	ldrb	r3, [r7, #7]
 80004d2:	733b      	strb	r3, [r7, #12]
	iData[1] = data[0];
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	781b      	ldrb	r3, [r3, #0]
 80004d8:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 2, 100);
 80004da:	f107 020c 	add.w	r2, r7, #12
 80004de:	2364      	movs	r3, #100	; 0x64
 80004e0:	9300      	str	r3, [sp, #0]
 80004e2:	2302      	movs	r3, #2
 80004e4:	2194      	movs	r1, #148	; 0x94
 80004e6:	4803      	ldr	r0, [pc, #12]	; (80004f4 <write_register+0x30>)
 80004e8:	f003 fde6 	bl	80040b8 <HAL_I2C_Master_Transmit>
	//HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, data, size, 100);
}
 80004ec:	bf00      	nop
 80004ee:	3710      	adds	r7, #16
 80004f0:	46bd      	mov	sp, r7
 80004f2:	bd80      	pop	{r7, pc}
 80004f4:	20000098 	.word	0x20000098

080004f8 <read_register>:
// Function(2): Read from register
static void read_register(uint8_t reg, uint8_t *data)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b086      	sub	sp, #24
 80004fc:	af02      	add	r7, sp, #8
 80004fe:	4603      	mov	r3, r0
 8000500:	6039      	str	r1, [r7, #0]
 8000502:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	iData[0] = reg;
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&i2cx, DAC_I2C_ADDR, iData, 1, 100);
 8000508:	f107 020c 	add.w	r2, r7, #12
 800050c:	2364      	movs	r3, #100	; 0x64
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	2301      	movs	r3, #1
 8000512:	2194      	movs	r1, #148	; 0x94
 8000514:	4807      	ldr	r0, [pc, #28]	; (8000534 <read_register+0x3c>)
 8000516:	f003 fdcf 	bl	80040b8 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&i2cx, DAC_I2C_ADDR, data, 1, 100);
 800051a:	2364      	movs	r3, #100	; 0x64
 800051c:	9300      	str	r3, [sp, #0]
 800051e:	2301      	movs	r3, #1
 8000520:	683a      	ldr	r2, [r7, #0]
 8000522:	2194      	movs	r1, #148	; 0x94
 8000524:	4803      	ldr	r0, [pc, #12]	; (8000534 <read_register+0x3c>)
 8000526:	f003 fec5 	bl	80042b4 <HAL_I2C_Master_Receive>
}
 800052a:	bf00      	nop
 800052c:	3710      	adds	r7, #16
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	bf00      	nop
 8000534:	20000098 	.word	0x20000098

08000538 <CS43_Init>:

//-------------- Public Functions ----------------//
// Function(1): Initialisation
void CS43_Init(I2C_HandleTypeDef i2c_handle, CS43_MODE outputMode)
{
 8000538:	b084      	sub	sp, #16
 800053a:	b580      	push	{r7, lr}
 800053c:	b082      	sub	sp, #8
 800053e:	af00      	add	r7, sp, #0
 8000540:	f107 0c10 	add.w	ip, r7, #16
 8000544:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
  uint8_t iData[2];
	__HAL_UNLOCK(&hi2s3);     // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000548:	4b7b      	ldr	r3, [pc, #492]	; (8000738 <CS43_Init+0x200>)
 800054a:	2200      	movs	r2, #0
 800054c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	__HAL_I2S_ENABLE(&hi2s3); // THIS IS EXTREMELY IMPORTANT FOR I2S3 TO WORK!!
 8000550:	4b79      	ldr	r3, [pc, #484]	; (8000738 <CS43_Init+0x200>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	69da      	ldr	r2, [r3, #28]
 8000556:	4b78      	ldr	r3, [pc, #480]	; (8000738 <CS43_Init+0x200>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800055e:	61da      	str	r2, [r3, #28]
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_SET);
 8000560:	2201      	movs	r2, #1
 8000562:	2110      	movs	r1, #16
 8000564:	4875      	ldr	r0, [pc, #468]	; (800073c <CS43_Init+0x204>)
 8000566:	f002 f83f 	bl	80025e8 <HAL_GPIO_WritePin>
	//(1): Get the I2C handle
	i2cx = i2c_handle;
 800056a:	4b75      	ldr	r3, [pc, #468]	; (8000740 <CS43_Init+0x208>)
 800056c:	4618      	mov	r0, r3
 800056e:	f107 0310 	add.w	r3, r7, #16
 8000572:	2254      	movs	r2, #84	; 0x54
 8000574:	4619      	mov	r1, r3
 8000576:	f00d fb23 	bl	800dbc0 <memcpy>
	//(2): Power down
	iData[1] = 0x01;
 800057a:	2301      	movs	r3, #1
 800057c:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,iData);
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	4619      	mov	r1, r3
 8000582:	2002      	movs	r0, #2
 8000584:	f7ff ff9e 	bl	80004c4 <write_register>
	//(3): Enable Right and Left headphones
	iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 8000588:	2380      	movs	r3, #128	; 0x80
 800058a:	717b      	strb	r3, [r7, #5]
	iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 800058c:	797b      	ldrb	r3, [r7, #5]
 800058e:	f043 0320 	orr.w	r3, r3, #32
 8000592:	b2db      	uxtb	r3, r3
 8000594:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 8000596:	797b      	ldrb	r3, [r7, #5]
 8000598:	f043 030c 	orr.w	r3, r3, #12
 800059c:	b2db      	uxtb	r3, r3
 800059e:	717b      	strb	r3, [r7, #5]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80005a0:	797b      	ldrb	r3, [r7, #5]
 80005a2:	f043 0303 	orr.w	r3, r3, #3
 80005a6:	b2db      	uxtb	r3, r3
 80005a8:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL2,&iData[1]);
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	3301      	adds	r3, #1
 80005ae:	4619      	mov	r1, r3
 80005b0:	2004      	movs	r0, #4
 80005b2:	f7ff ff87 	bl	80004c4 <write_register>
	//(4): Automatic clock detection
	iData[1] = (1 << 7);
 80005b6:	2380      	movs	r3, #128	; 0x80
 80005b8:	717b      	strb	r3, [r7, #5]
	write_register(CLOCKING_CONTROL,&iData[1]);
 80005ba:	1d3b      	adds	r3, r7, #4
 80005bc:	3301      	adds	r3, #1
 80005be:	4619      	mov	r1, r3
 80005c0:	2005      	movs	r0, #5
 80005c2:	f7ff ff7f 	bl	80004c4 <write_register>
	//(5): Interface control 1
	read_register(INTERFACE_CONTROL1, iData);
 80005c6:	1d3b      	adds	r3, r7, #4
 80005c8:	4619      	mov	r1, r3
 80005ca:	2006      	movs	r0, #6
 80005cc:	f7ff ff94 	bl	80004f8 <read_register>
	iData[1] &= (1 << 5); // Clear all bits except bit 5 which is reserved
 80005d0:	797b      	ldrb	r3, [r7, #5]
 80005d2:	f003 0320 	and.w	r3, r3, #32
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 7);  // Slave
 80005da:	797b      	ldrb	r3, [r7, #5]
 80005dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 6);  // Clock polarity: Not inverted
 80005e4:	797b      	ldrb	r3, [r7, #5]
 80005e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80005ea:	b2db      	uxtb	r3, r3
 80005ec:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 4);  // No DSP mode
 80005ee:	797b      	ldrb	r3, [r7, #5]
 80005f0:	f023 0310 	bic.w	r3, r3, #16
 80005f4:	b2db      	uxtb	r3, r3
 80005f6:	717b      	strb	r3, [r7, #5]
	iData[1] &= ~(1 << 2);  // Left justified, up to 24 bit (default)
 80005f8:	797b      	ldrb	r3, [r7, #5]
 80005fa:	f023 0304 	bic.w	r3, r3, #4
 80005fe:	b2db      	uxtb	r3, r3
 8000600:	717b      	strb	r3, [r7, #5]
	iData[1] |= (1 << 2);
 8000602:	797b      	ldrb	r3, [r7, #5]
 8000604:	f043 0304 	orr.w	r3, r3, #4
 8000608:	b2db      	uxtb	r3, r3
 800060a:	717b      	strb	r3, [r7, #5]
	
	iData[1] |=  (3 << 0);  // 16-bit audio word length for I2S interface
 800060c:	797b      	ldrb	r3, [r7, #5]
 800060e:	f043 0303 	orr.w	r3, r3, #3
 8000612:	b2db      	uxtb	r3, r3
 8000614:	717b      	strb	r3, [r7, #5]
	write_register(INTERFACE_CONTROL1,&iData[1]);
 8000616:	1d3b      	adds	r3, r7, #4
 8000618:	3301      	adds	r3, #1
 800061a:	4619      	mov	r1, r3
 800061c:	2006      	movs	r0, #6
 800061e:	f7ff ff51 	bl	80004c4 <write_register>
	//(6): Passthrough A settings
	read_register(PASSTHROUGH_A, &iData[1]);
 8000622:	1d3b      	adds	r3, r7, #4
 8000624:	3301      	adds	r3, #1
 8000626:	4619      	mov	r1, r3
 8000628:	2008      	movs	r0, #8
 800062a:	f7ff ff65 	bl	80004f8 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800062e:	797b      	ldrb	r3, [r7, #5]
 8000630:	f023 030f 	bic.w	r3, r3, #15
 8000634:	b2db      	uxtb	r3, r3
 8000636:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1A as source for passthrough
 8000638:	797b      	ldrb	r3, [r7, #5]
 800063a:	f043 0301 	orr.w	r3, r3, #1
 800063e:	b2db      	uxtb	r3, r3
 8000640:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_A,&iData[1]);
 8000642:	1d3b      	adds	r3, r7, #4
 8000644:	3301      	adds	r3, #1
 8000646:	4619      	mov	r1, r3
 8000648:	2008      	movs	r0, #8
 800064a:	f7ff ff3b 	bl	80004c4 <write_register>
	//(7): Passthrough B settings
	read_register(PASSTHROUGH_B, &iData[1]);
 800064e:	1d3b      	adds	r3, r7, #4
 8000650:	3301      	adds	r3, #1
 8000652:	4619      	mov	r1, r3
 8000654:	2009      	movs	r0, #9
 8000656:	f7ff ff4f 	bl	80004f8 <read_register>
	iData[1] &= 0xF0;      // Bits [4-7] are reserved
 800065a:	797b      	ldrb	r3, [r7, #5]
 800065c:	f023 030f 	bic.w	r3, r3, #15
 8000660:	b2db      	uxtb	r3, r3
 8000662:	717b      	strb	r3, [r7, #5]
	iData[1] |=  (1 << 0); // Use AIN1B as source for passthrough
 8000664:	797b      	ldrb	r3, [r7, #5]
 8000666:	f043 0301 	orr.w	r3, r3, #1
 800066a:	b2db      	uxtb	r3, r3
 800066c:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_B,&iData[1]);
 800066e:	1d3b      	adds	r3, r7, #4
 8000670:	3301      	adds	r3, #1
 8000672:	4619      	mov	r1, r3
 8000674:	2009      	movs	r0, #9
 8000676:	f7ff ff25 	bl	80004c4 <write_register>
	//(8): Miscellaneous register settings
	read_register(MISCELLANEOUS_CONTRLS, &iData[1]);
 800067a:	1d3b      	adds	r3, r7, #4
 800067c:	3301      	adds	r3, #1
 800067e:	4619      	mov	r1, r3
 8000680:	200e      	movs	r0, #14
 8000682:	f7ff ff39 	bl	80004f8 <read_register>
	if(outputMode == MODE_ANALOG)
 8000686:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 800068a:	2b03      	cmp	r3, #3
 800068c:	d119      	bne.n	80006c2 <CS43_Init+0x18a>
	{
		iData[1] |=  (1 << 7);   // Enable passthrough for AIN-A
 800068e:	797b      	ldrb	r3, [r7, #5]
 8000690:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000694:	b2db      	uxtb	r3, r3
 8000696:	717b      	strb	r3, [r7, #5]
		iData[1] |=  (1 << 6);   // Enable passthrough for AIN-B
 8000698:	797b      	ldrb	r3, [r7, #5]
 800069a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800069e:	b2db      	uxtb	r3, r3
 80006a0:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 5);   // Unmute passthrough on AIN-A
 80006a2:	797b      	ldrb	r3, [r7, #5]
 80006a4:	f023 0320 	bic.w	r3, r3, #32
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 4);   // Unmute passthrough on AIN-B
 80006ac:	797b      	ldrb	r3, [r7, #5]
 80006ae:	f023 0310 	bic.w	r3, r3, #16
 80006b2:	b2db      	uxtb	r3, r3
 80006b4:	717b      	strb	r3, [r7, #5]
		iData[1] &= ~(1 << 3);   // Changed settings take affect immediately
 80006b6:	797b      	ldrb	r3, [r7, #5]
 80006b8:	f023 0308 	bic.w	r3, r3, #8
 80006bc:	b2db      	uxtb	r3, r3
 80006be:	717b      	strb	r3, [r7, #5]
 80006c0:	e005      	b.n	80006ce <CS43_Init+0x196>
	}
	else if(outputMode == MODE_I2S)
 80006c2:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d101      	bne.n	80006ce <CS43_Init+0x196>
	{
		iData[1] = 0x02;
 80006ca:	2302      	movs	r3, #2
 80006cc:	717b      	strb	r3, [r7, #5]
	}
	write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 80006ce:	1d3b      	adds	r3, r7, #4
 80006d0:	3301      	adds	r3, #1
 80006d2:	4619      	mov	r1, r3
 80006d4:	200e      	movs	r0, #14
 80006d6:	f7ff fef5 	bl	80004c4 <write_register>
	//(9): Unmute headphone and speaker
	read_register(PLAYBACK_CONTROL, &iData[1]);
 80006da:	1d3b      	adds	r3, r7, #4
 80006dc:	3301      	adds	r3, #1
 80006de:	4619      	mov	r1, r3
 80006e0:	200f      	movs	r0, #15
 80006e2:	f7ff ff09 	bl	80004f8 <read_register>
	iData[1] = 0x00;
 80006e6:	2300      	movs	r3, #0
 80006e8:	717b      	strb	r3, [r7, #5]
	write_register(PLAYBACK_CONTROL,&iData[1]);
 80006ea:	1d3b      	adds	r3, r7, #4
 80006ec:	3301      	adds	r3, #1
 80006ee:	4619      	mov	r1, r3
 80006f0:	200f      	movs	r0, #15
 80006f2:	f7ff fee7 	bl	80004c4 <write_register>
	//(10): Set volume to default (0dB)
	iData[1] = 0;
 80006f6:	2300      	movs	r3, #0
 80006f8:	717b      	strb	r3, [r7, #5]
	write_register(PASSTHROUGH_VOLUME_A,&iData[1]);
 80006fa:	1d3b      	adds	r3, r7, #4
 80006fc:	3301      	adds	r3, #1
 80006fe:	4619      	mov	r1, r3
 8000700:	2014      	movs	r0, #20
 8000702:	f7ff fedf 	bl	80004c4 <write_register>
	write_register(PASSTHROUGH_VOLUME_B,&iData[1]);
 8000706:	1d3b      	adds	r3, r7, #4
 8000708:	3301      	adds	r3, #1
 800070a:	4619      	mov	r1, r3
 800070c:	2015      	movs	r0, #21
 800070e:	f7ff fed9 	bl	80004c4 <write_register>
	write_register(PCM_VOLUME_A,&iData[1]);
 8000712:	1d3b      	adds	r3, r7, #4
 8000714:	3301      	adds	r3, #1
 8000716:	4619      	mov	r1, r3
 8000718:	201a      	movs	r0, #26
 800071a:	f7ff fed3 	bl	80004c4 <write_register>
	write_register(PCM_VOLUME_B,&iData[1]);
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	3301      	adds	r3, #1
 8000722:	4619      	mov	r1, r3
 8000724:	201b      	movs	r0, #27
 8000726:	f7ff fecd 	bl	80004c4 <write_register>
}
 800072a:	bf00      	nop
 800072c:	3708      	adds	r7, #8
 800072e:	46bd      	mov	sp, r7
 8000730:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr
 8000738:	20001388 	.word	0x20001388
 800073c:	40020c00 	.word	0x40020c00
 8000740:	20000098 	.word	0x20000098

08000744 <CS43_Enable_RightLeft>:

// Function(2): Enable Right and Left headphones
void CS43_Enable_RightLeft(uint8_t side)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b084      	sub	sp, #16
 8000748:	af00      	add	r7, sp, #0
 800074a:	4603      	mov	r3, r0
 800074c:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
	switch (side)
 800074e:	79fb      	ldrb	r3, [r7, #7]
 8000750:	2b03      	cmp	r3, #3
 8000752:	d82b      	bhi.n	80007ac <CS43_Enable_RightLeft+0x68>
 8000754:	a201      	add	r2, pc, #4	; (adr r2, 800075c <CS43_Enable_RightLeft+0x18>)
 8000756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075a:	bf00      	nop
 800075c:	0800076d 	.word	0x0800076d
 8000760:	0800077d 	.word	0x0800077d
 8000764:	0800078d 	.word	0x0800078d
 8000768:	0800079d 	.word	0x0800079d
	{
		case 0:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800076c:	23c0      	movs	r3, #192	; 0xc0
 800076e:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000770:	7b7b      	ldrb	r3, [r7, #13]
 8000772:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000776:	b2db      	uxtb	r3, r3
 8000778:	737b      	strb	r3, [r7, #13]
			break;
 800077a:	e018      	b.n	80007ae <CS43_Enable_RightLeft+0x6a>
		case 1:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800077c:	2380      	movs	r3, #128	; 0x80
 800077e:	737b      	strb	r3, [r7, #13]
			iData[1] |= (3 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000780:	7b7b      	ldrb	r3, [r7, #13]
 8000782:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8000786:	b2db      	uxtb	r3, r3
 8000788:	737b      	strb	r3, [r7, #13]
			break;
 800078a:	e010      	b.n	80007ae <CS43_Enable_RightLeft+0x6a>
		case 2:
			iData[1] =  (3 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800078c:	23c0      	movs	r3, #192	; 0xc0
 800078e:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 8000790:	7b7b      	ldrb	r3, [r7, #13]
 8000792:	f043 0320 	orr.w	r3, r3, #32
 8000796:	b2db      	uxtb	r3, r3
 8000798:	737b      	strb	r3, [r7, #13]
			break;
 800079a:	e008      	b.n	80007ae <CS43_Enable_RightLeft+0x6a>
		case 3:
			iData[1] =  (2 << 6);  // PDN_HPB[0:1]  = 10 (HP-B always onCon)
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	737b      	strb	r3, [r7, #13]
			iData[1] |= (2 << 4);  // PDN_HPA[0:1]  = 10 (HP-A always on)
 80007a0:	7b7b      	ldrb	r3, [r7, #13]
 80007a2:	f043 0320 	orr.w	r3, r3, #32
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	737b      	strb	r3, [r7, #13]
			break;
 80007aa:	e000      	b.n	80007ae <CS43_Enable_RightLeft+0x6a>
		default:
			break;
 80007ac:	bf00      	nop
	}
	iData[1] |= (3 << 2);  // PDN_SPKB[0:1] = 11 (Speaker B always off)
 80007ae:	7b7b      	ldrb	r3, [r7, #13]
 80007b0:	f043 030c 	orr.w	r3, r3, #12
 80007b4:	b2db      	uxtb	r3, r3
 80007b6:	737b      	strb	r3, [r7, #13]
	iData[1] |= (3 << 0);  // PDN_SPKA[0:1] = 11 (Speaker A always off)
 80007b8:	7b7b      	ldrb	r3, [r7, #13]
 80007ba:	f043 0303 	orr.w	r3, r3, #3
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	737b      	strb	r3, [r7, #13]
	write_register(POWER_CONTROL2,&iData[1]);
 80007c2:	f107 030c 	add.w	r3, r7, #12
 80007c6:	3301      	adds	r3, #1
 80007c8:	4619      	mov	r1, r3
 80007ca:	2004      	movs	r0, #4
 80007cc:	f7ff fe7a 	bl	80004c4 <write_register>
}
 80007d0:	bf00      	nop
 80007d2:	3710      	adds	r7, #16
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}

080007d8 <CS43_SetVolume>:

// Function(3): Set Volume Level
void CS43_SetVolume(uint8_t volume)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	b084      	sub	sp, #16
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  /* Set the Master volume */
  iData[1] = VOLUME_MASTER(volume);
 80007e2:	79fb      	ldrb	r3, [r7, #7]
 80007e4:	3319      	adds	r3, #25
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	737b      	strb	r3, [r7, #13]
  write_register(CS43L22_REG_MASTER_A_VOL,&iData[1]);
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	3301      	adds	r3, #1
 80007f0:	4619      	mov	r1, r3
 80007f2:	2020      	movs	r0, #32
 80007f4:	f7ff fe66 	bl	80004c4 <write_register>
  write_register(CS43L22_REG_MASTER_B_VOL,&iData[1]);
 80007f8:	f107 030c 	add.w	r3, r7, #12
 80007fc:	3301      	adds	r3, #1
 80007fe:	4619      	mov	r1, r3
 8000800:	2021      	movs	r0, #33	; 0x21
 8000802:	f7ff fe5f 	bl	80004c4 <write_register>
}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <CS43_SetMute>:

void CS43_SetMute(bool mute)
{
 800080e:	b580      	push	{r7, lr}
 8000810:	b084      	sub	sp, #16
 8000812:	af00      	add	r7, sp, #0
 8000814:	4603      	mov	r3, r0
 8000816:	71fb      	strb	r3, [r7, #7]
  uint8_t iData[2];
  if(mute)
 8000818:	79fb      	ldrb	r3, [r7, #7]
 800081a:	2b00      	cmp	r3, #0
 800081c:	d019      	beq.n	8000852 <CS43_SetMute+0x44>
  {
    iData[1] = 0xFF;
 800081e:	23ff      	movs	r3, #255	; 0xff
 8000820:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 8000822:	f107 030c 	add.w	r3, r7, #12
 8000826:	3301      	adds	r3, #1
 8000828:	4619      	mov	r1, r3
 800082a:	2004      	movs	r0, #4
 800082c:	f7ff fe4a 	bl	80004c4 <write_register>
    iData[1] = 0x01;
 8000830:	2301      	movs	r3, #1
 8000832:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000834:	f107 030c 	add.w	r3, r7, #12
 8000838:	3301      	adds	r3, #1
 800083a:	4619      	mov	r1, r3
 800083c:	2022      	movs	r0, #34	; 0x22
 800083e:	f7ff fe41 	bl	80004c4 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000842:	f107 030c 	add.w	r3, r7, #12
 8000846:	3301      	adds	r3, #1
 8000848:	4619      	mov	r1, r3
 800084a:	2023      	movs	r0, #35	; 0x23
 800084c:	f7ff fe3a 	bl	80004c4 <write_register>
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
    iData[1] = 0xAF;
    write_register(POWER_CONTROL2,&iData[1]);
  }
}
 8000850:	e018      	b.n	8000884 <CS43_SetMute+0x76>
    iData[1] = 0x00;
 8000852:	2300      	movs	r3, #0
 8000854:	737b      	strb	r3, [r7, #13]
    write_register(CS43L22_REG_HEADPHONE_A_VOL,&iData[1]);
 8000856:	f107 030c 	add.w	r3, r7, #12
 800085a:	3301      	adds	r3, #1
 800085c:	4619      	mov	r1, r3
 800085e:	2022      	movs	r0, #34	; 0x22
 8000860:	f7ff fe30 	bl	80004c4 <write_register>
    write_register(CS43L22_REG_HEADPHONE_B_VOL,&iData[1]);
 8000864:	f107 030c 	add.w	r3, r7, #12
 8000868:	3301      	adds	r3, #1
 800086a:	4619      	mov	r1, r3
 800086c:	2023      	movs	r0, #35	; 0x23
 800086e:	f7ff fe29 	bl	80004c4 <write_register>
    iData[1] = 0xAF;
 8000872:	23af      	movs	r3, #175	; 0xaf
 8000874:	737b      	strb	r3, [r7, #13]
    write_register(POWER_CONTROL2,&iData[1]);
 8000876:	f107 030c 	add.w	r3, r7, #12
 800087a:	3301      	adds	r3, #1
 800087c:	4619      	mov	r1, r3
 800087e:	2004      	movs	r0, #4
 8000880:	f7ff fe20 	bl	80004c4 <write_register>
}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <CS43_Start>:

// Function(4): Start the Audio DAC
void CS43_Start(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(0);
 8000892:	2000      	movs	r0, #0
 8000894:	f7ff ffbb 	bl	800080e <CS43_SetMute>
	// Write 0x99 to register 0x00.
	iData[1] = 0x99;
 8000898:	2399      	movs	r3, #153	; 0x99
 800089a:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 800089c:	1d3b      	adds	r3, r7, #4
 800089e:	3301      	adds	r3, #1
 80008a0:	4619      	mov	r1, r3
 80008a2:	2000      	movs	r0, #0
 80008a4:	f7ff fe0e 	bl	80004c4 <write_register>
	// Write 0x80 to register 0x47.
	iData[1] = 0x80;
 80008a8:	2380      	movs	r3, #128	; 0x80
 80008aa:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_47,&iData[1]);
 80008ac:	1d3b      	adds	r3, r7, #4
 80008ae:	3301      	adds	r3, #1
 80008b0:	4619      	mov	r1, r3
 80008b2:	2047      	movs	r0, #71	; 0x47
 80008b4:	f7ff fe06 	bl	80004c4 <write_register>
	// Write '1'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008b8:	1d3b      	adds	r3, r7, #4
 80008ba:	3301      	adds	r3, #1
 80008bc:	4619      	mov	r1, r3
 80008be:	2032      	movs	r0, #50	; 0x32
 80008c0:	f7ff fe1a 	bl	80004f8 <read_register>
	iData[1] |= 0x80;
 80008c4:	797b      	ldrb	r3, [r7, #5]
 80008c6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	3301      	adds	r3, #1
 80008d2:	4619      	mov	r1, r3
 80008d4:	2032      	movs	r0, #50	; 0x32
 80008d6:	f7ff fdf5 	bl	80004c4 <write_register>
	// Write '0'b to bit 7 in register 0x32.
	read_register(CONFIG_32, &iData[1]);
 80008da:	1d3b      	adds	r3, r7, #4
 80008dc:	3301      	adds	r3, #1
 80008de:	4619      	mov	r1, r3
 80008e0:	2032      	movs	r0, #50	; 0x32
 80008e2:	f7ff fe09 	bl	80004f8 <read_register>
	iData[1] &= ~(0x80);
 80008e6:	797b      	ldrb	r3, [r7, #5]
 80008e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008ec:	b2db      	uxtb	r3, r3
 80008ee:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_32,&iData[1]);
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	3301      	adds	r3, #1
 80008f4:	4619      	mov	r1, r3
 80008f6:	2032      	movs	r0, #50	; 0x32
 80008f8:	f7ff fde4 	bl	80004c4 <write_register>
	// Write 0x00 to register 0x00.
	iData[1] = 0x00;
 80008fc:	2300      	movs	r3, #0
 80008fe:	717b      	strb	r3, [r7, #5]
	write_register(CONFIG_00,&iData[1]);
 8000900:	1d3b      	adds	r3, r7, #4
 8000902:	3301      	adds	r3, #1
 8000904:	4619      	mov	r1, r3
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff fddc 	bl	80004c4 <write_register>
	//Set the "Power Ctl 1" register (0x02) to 0x9E
	iData[1] = 0x9E;
 800090c:	239e      	movs	r3, #158	; 0x9e
 800090e:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000910:	1d3b      	adds	r3, r7, #4
 8000912:	3301      	adds	r3, #1
 8000914:	4619      	mov	r1, r3
 8000916:	2002      	movs	r0, #2
 8000918:	f7ff fdd4 	bl	80004c4 <write_register>
}
 800091c:	bf00      	nop
 800091e:	3708      	adds	r7, #8
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <CS43_Stop>:

void CS43_Stop(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
  uint8_t iData[2];
  CS43_SetMute(1);
 800092a:	2001      	movs	r0, #1
 800092c:	f7ff ff6f 	bl	800080e <CS43_SetMute>
  iData[1] = 0x04;
 8000930:	2304      	movs	r3, #4
 8000932:	717b      	strb	r3, [r7, #5]
  write_register(MISCELLANEOUS_CONTRLS,&iData[1]);
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	3301      	adds	r3, #1
 8000938:	4619      	mov	r1, r3
 800093a:	200e      	movs	r0, #14
 800093c:	f7ff fdc2 	bl	80004c4 <write_register>
	iData[1] = 0x9F;
 8000940:	239f      	movs	r3, #159	; 0x9f
 8000942:	717b      	strb	r3, [r7, #5]
	write_register(POWER_CONTROL1,&iData[1]);
 8000944:	1d3b      	adds	r3, r7, #4
 8000946:	3301      	adds	r3, #1
 8000948:	4619      	mov	r1, r3
 800094a:	2002      	movs	r0, #2
 800094c:	f7ff fdba 	bl	80004c4 <write_register>
}
 8000950:	bf00      	nop
 8000952:	3708      	adds	r7, #8
 8000954:	46bd      	mov	sp, r7
 8000956:	bd80      	pop	{r7, pc}

08000958 <audioI2S_pllClockConfig>:

/**
 * @brief I2S Clock Config
 */
static void audioI2S_pllClockConfig(uint32_t audioFreq)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b088      	sub	sp, #32
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef rccclkinit;
  uint8_t index = 0, freqindex = 0xFF;
 8000960:	2300      	movs	r3, #0
 8000962:	77fb      	strb	r3, [r7, #31]
 8000964:	23ff      	movs	r3, #255	; 0xff
 8000966:	77bb      	strb	r3, [r7, #30]

  for(index = 0; index < 8; index++)
 8000968:	2300      	movs	r3, #0
 800096a:	77fb      	strb	r3, [r7, #31]
 800096c:	e00b      	b.n	8000986 <audioI2S_pllClockConfig+0x2e>
  {
    if(I2SFreq[index] == audioFreq)
 800096e:	7ffb      	ldrb	r3, [r7, #31]
 8000970:	4a1c      	ldr	r2, [pc, #112]	; (80009e4 <audioI2S_pllClockConfig+0x8c>)
 8000972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000976:	687a      	ldr	r2, [r7, #4]
 8000978:	429a      	cmp	r2, r3
 800097a:	d101      	bne.n	8000980 <audioI2S_pllClockConfig+0x28>
    {
      freqindex = index;
 800097c:	7ffb      	ldrb	r3, [r7, #31]
 800097e:	77bb      	strb	r3, [r7, #30]
  for(index = 0; index < 8; index++)
 8000980:	7ffb      	ldrb	r3, [r7, #31]
 8000982:	3301      	adds	r3, #1
 8000984:	77fb      	strb	r3, [r7, #31]
 8000986:	7ffb      	ldrb	r3, [r7, #31]
 8000988:	2b07      	cmp	r3, #7
 800098a:	d9f0      	bls.n	800096e <audioI2S_pllClockConfig+0x16>
    }
  }
  /* Enable PLLI2S clock */
  HAL_RCCEx_GetPeriphCLKConfig(&rccclkinit);
 800098c:	f107 030c 	add.w	r3, r7, #12
 8000990:	4618      	mov	r0, r3
 8000992:	f005 ffe5 	bl	8006960 <HAL_RCCEx_GetPeriphCLKConfig>
  /* PLLI2S_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  if ((freqindex & 0x7) == 0)
 8000996:	7fbb      	ldrb	r3, [r7, #30]
 8000998:	f003 0307 	and.w	r3, r3, #7
 800099c:	2b00      	cmp	r3, #0
 800099e:	d111      	bne.n	80009c4 <audioI2S_pllClockConfig+0x6c>
  {
    /* I2S clock config
    PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) × (PLLI2SN/PLLM)
    I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009a0:	2301      	movs	r3, #1
 80009a2:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = I2SPLLN[freqindex];
 80009a4:	7fbb      	ldrb	r3, [r7, #30]
 80009a6:	4a10      	ldr	r2, [pc, #64]	; (80009e8 <audioI2S_pllClockConfig+0x90>)
 80009a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009ac:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = I2SPLLR[freqindex];
 80009ae:	7fbb      	ldrb	r3, [r7, #30]
 80009b0:	4a0e      	ldr	r2, [pc, #56]	; (80009ec <audioI2S_pllClockConfig+0x94>)
 80009b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80009b6:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009b8:	f107 030c 	add.w	r3, r7, #12
 80009bc:	4618      	mov	r0, r3
 80009be:	f005 feed 	bl	800679c <HAL_RCCEx_PeriphCLKConfig>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
    rccclkinit.PLLI2S.PLLI2SN = 258;
    rccclkinit.PLLI2S.PLLI2SR = 3;
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
  }
}
 80009c2:	e00b      	b.n	80009dc <audioI2S_pllClockConfig+0x84>
    rccclkinit.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80009c4:	2301      	movs	r3, #1
 80009c6:	60fb      	str	r3, [r7, #12]
    rccclkinit.PLLI2S.PLLI2SN = 258;
 80009c8:	f44f 7381 	mov.w	r3, #258	; 0x102
 80009cc:	613b      	str	r3, [r7, #16]
    rccclkinit.PLLI2S.PLLI2SR = 3;
 80009ce:	2303      	movs	r3, #3
 80009d0:	617b      	str	r3, [r7, #20]
    HAL_RCCEx_PeriphCLKConfig(&rccclkinit);
 80009d2:	f107 030c 	add.w	r3, r7, #12
 80009d6:	4618      	mov	r0, r3
 80009d8:	f005 fee0 	bl	800679c <HAL_RCCEx_PeriphCLKConfig>
}
 80009dc:	bf00      	nop
 80009de:	3720      	adds	r7, #32
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	0800dcfc 	.word	0x0800dcfc
 80009e8:	0800dd1c 	.word	0x0800dd1c
 80009ec:	0800dd3c 	.word	0x0800dd3c

080009f0 <I2S3_freqUpdate>:

/**
 * @brief update I2S peripheral with selected Sampling Frequency
 */
static bool I2S3_freqUpdate(uint32_t AudioFreq)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Initialize the hAudioOutI2s Instance parameter */
  hAudioI2S->Instance         = SPI3;
 80009f8:	4b1d      	ldr	r3, [pc, #116]	; (8000a70 <I2S3_freqUpdate+0x80>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a1d      	ldr	r2, [pc, #116]	; (8000a74 <I2S3_freqUpdate+0x84>)
 80009fe:	601a      	str	r2, [r3, #0]

 /* Disable I2S block */
  __HAL_I2S_DISABLE(hAudioI2S);
 8000a00:	4b1b      	ldr	r3, [pc, #108]	; (8000a70 <I2S3_freqUpdate+0x80>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	69da      	ldr	r2, [r3, #28]
 8000a08:	4b19      	ldr	r3, [pc, #100]	; (8000a70 <I2S3_freqUpdate+0x80>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8000a12:	61da      	str	r2, [r3, #28]

  /* I2S3 peripheral configuration */
  hAudioI2S->Init.AudioFreq   = AudioFreq;
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <I2S3_freqUpdate+0x80>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	687a      	ldr	r2, [r7, #4]
 8000a1a:	615a      	str	r2, [r3, #20]
  hAudioI2S->Init.ClockSource = I2S_CLOCK_PLL;
 8000a1c:	4b14      	ldr	r3, [pc, #80]	; (8000a70 <I2S3_freqUpdate+0x80>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2200      	movs	r2, #0
 8000a22:	61da      	str	r2, [r3, #28]
  hAudioI2S->Init.CPOL        = I2S_CPOL_LOW;
 8000a24:	4b12      	ldr	r3, [pc, #72]	; (8000a70 <I2S3_freqUpdate+0x80>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	2200      	movs	r2, #0
 8000a2a:	619a      	str	r2, [r3, #24]
  hAudioI2S->Init.DataFormat  = I2S_DATAFORMAT_16B;
 8000a2c:	4b10      	ldr	r3, [pc, #64]	; (8000a70 <I2S3_freqUpdate+0x80>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2200      	movs	r2, #0
 8000a32:	60da      	str	r2, [r3, #12]
  hAudioI2S->Init.MCLKOutput  = I2S_MCLKOUTPUT_ENABLE;
 8000a34:	4b0e      	ldr	r3, [pc, #56]	; (8000a70 <I2S3_freqUpdate+0x80>)
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a3c:	611a      	str	r2, [r3, #16]
  hAudioI2S->Init.Mode        = I2S_MODE_MASTER_TX;
 8000a3e:	4b0c      	ldr	r3, [pc, #48]	; (8000a70 <I2S3_freqUpdate+0x80>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a46:	605a      	str	r2, [r3, #4]
  hAudioI2S->Init.Standard    = I2S_STANDARD_PHILIPS;
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <I2S3_freqUpdate+0x80>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	609a      	str	r2, [r3, #8]
  /* Initialize the I2S peripheral with the structure above */
  if(HAL_I2S_Init(hAudioI2S) != HAL_OK)
 8000a50:	4b07      	ldr	r3, [pc, #28]	; (8000a70 <I2S3_freqUpdate+0x80>)
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f004 f981 	bl	8004d5c <HAL_I2S_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <I2S3_freqUpdate+0x74>
  {
    return false;
 8000a60:	2300      	movs	r3, #0
 8000a62:	e000      	b.n	8000a66 <I2S3_freqUpdate+0x76>
  }
  else
  {
    return true;
 8000a64:	2301      	movs	r3, #1
  }
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	3708      	adds	r7, #8
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	bd80      	pop	{r7, pc}
 8000a6e:	bf00      	nop
 8000a70:	200000ec 	.word	0x200000ec
 8000a74:	40003c00 	.word	0x40003c00

08000a78 <audioI2S_setHandle>:

/**
 * @brief set I2S HAL handle
 */
void audioI2S_setHandle(I2S_HandleTypeDef *pI2Shandle)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  hAudioI2S = pI2Shandle;
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <audioI2S_setHandle+0x1c>)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	6013      	str	r3, [r2, #0]
}
 8000a86:	bf00      	nop
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	200000ec 	.word	0x200000ec

08000a98 <audioI2S_init>:
 * @param audioFreq - WAV file Audio sampling rate (44.1KHz, 48KHz, ...)
 * @param volume - CS43L22 Codec volume settings (0 - 100)
 * @retval state - true: Successfully, false: Failed
 */
bool audioI2S_init(uint32_t audioFreq)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  //Update PLL Clock Frequency setting
  audioI2S_pllClockConfig(audioFreq);
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f7ff ff59 	bl	8000958 <audioI2S_pllClockConfig>
  //Update I2S peripheral sampling frequency
  I2S3_freqUpdate(audioFreq);
 8000aa6:	6878      	ldr	r0, [r7, #4]
 8000aa8:	f7ff ffa2 	bl	80009f0 <I2S3_freqUpdate>
  return true;
 8000aac:	2301      	movs	r3, #1
}
 8000aae:	4618      	mov	r0, r3
 8000ab0:	3708      	adds	r7, #8
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
	...

08000ab8 <audioI2S_play>:

/**
 * @brief Starts Playing Audio from buffer
 */
bool audioI2S_play(uint16_t* pDataBuf, uint32_t len)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
 8000ac0:	6039      	str	r1, [r7, #0]
  //Start Codec
  CS43_Start();
 8000ac2:	f7ff fee3 	bl	800088c <CS43_Start>
  //Start I2S DMA transfer
  HAL_I2S_Transmit_DMA(hAudioI2S, pDataBuf, DMA_MAX(len/AUDIODATA_SIZE));
 8000ac6:	4b0a      	ldr	r3, [pc, #40]	; (8000af0 <audioI2S_play+0x38>)
 8000ac8:	6818      	ldr	r0, [r3, #0]
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000ad0:	d203      	bcs.n	8000ada <audioI2S_play+0x22>
 8000ad2:	683b      	ldr	r3, [r7, #0]
 8000ad4:	085b      	lsrs	r3, r3, #1
 8000ad6:	b29b      	uxth	r3, r3
 8000ad8:	e001      	b.n	8000ade <audioI2S_play+0x26>
 8000ada:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ade:	461a      	mov	r2, r3
 8000ae0:	6879      	ldr	r1, [r7, #4]
 8000ae2:	f004 fa7b 	bl	8004fdc <HAL_I2S_Transmit_DMA>
  return true;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200000ec 	.word	0x200000ec

08000af4 <audioI2S_pause>:

/**
 * @brief Pause audio out
 */
void audioI2S_pause(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000af8:	f7ff ff14 	bl	8000924 <CS43_Stop>
  HAL_I2S_DMAPause(hAudioI2S);
 8000afc:	4b03      	ldr	r3, [pc, #12]	; (8000b0c <audioI2S_pause+0x18>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f004 fb13 	bl	800512c <HAL_I2S_DMAPause>
}
 8000b06:	bf00      	nop
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	200000ec 	.word	0x200000ec

08000b10 <audioI2S_resume>:

/**
 * @brief Resume audio out
 */
void audioI2S_resume(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  CS43_Start();
 8000b14:	f7ff feba 	bl	800088c <CS43_Start>
  HAL_I2S_DMAResume(hAudioI2S);
 8000b18:	4b03      	ldr	r3, [pc, #12]	; (8000b28 <audioI2S_resume+0x18>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f004 fb67 	bl	80051f0 <HAL_I2S_DMAResume>
}
 8000b22:	bf00      	nop
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	200000ec 	.word	0x200000ec

08000b2c <audioI2S_stop>:

/**
 * @brief Stop audio
 */
void audioI2S_stop(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	af00      	add	r7, sp, #0
  CS43_Stop();
 8000b30:	f7ff fef8 	bl	8000924 <CS43_Stop>
  HAL_I2S_DMAStop(hAudioI2S);
 8000b34:	4b03      	ldr	r3, [pc, #12]	; (8000b44 <audioI2S_stop+0x18>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4618      	mov	r0, r3
 8000b3a:	f004 fbed 	bl	8005318 <HAL_I2S_DMAStop>
}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200000ec 	.word	0x200000ec

08000b48 <HAL_I2S_TxCpltCallback>:
{

}

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a04      	ldr	r2, [pc, #16]	; (8000b68 <HAL_I2S_TxCpltCallback+0x20>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d101      	bne.n	8000b5e <HAL_I2S_TxCpltCallback+0x16>
  {
    audioI2S_fullTransfer_Callback();
 8000b5a:	f000 f929 	bl	8000db0 <audioI2S_fullTransfer_Callback>
  }
}
 8000b5e:	bf00      	nop
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	40003c00 	.word	0x40003c00

08000b6c <HAL_I2S_TxHalfCpltCallback>:

void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if(hi2s->Instance == SPI3)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a04      	ldr	r2, [pc, #16]	; (8000b8c <HAL_I2S_TxHalfCpltCallback+0x20>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d101      	bne.n	8000b82 <HAL_I2S_TxHalfCpltCallback+0x16>
  {
    audioI2S_halfTransfer_Callback();
 8000b7e:	f000 f90b 	bl	8000d98 <audioI2S_halfTransfer_Callback>
  }
}
 8000b82:	bf00      	nop
 8000b84:	3708      	adds	r7, #8
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40003c00 	.word	0x40003c00

08000b90 <wavPlayer_reset>:
  PLAYER_CONTROL_EndOfFile,
}PLAYER_CONTROL_e;
static volatile PLAYER_CONTROL_e playerControlSM = PLAYER_CONTROL_Idle;

static void wavPlayer_reset(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  audioRemainSize = 0;
 8000b94:	4b05      	ldr	r3, [pc, #20]	; (8000bac <wavPlayer_reset+0x1c>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	601a      	str	r2, [r3, #0]
  playerReadBytes = 0;
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <wavPlayer_reset+0x20>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
}
 8000ba0:	bf00      	nop
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	20001324 	.word	0x20001324
 8000bb0:	2000132c 	.word	0x2000132c

08000bb4 <wavPlayer_fileSelect>:
/**
 * @brief Select WAV file to play
 * @retval returns true when file is found in USB Drive
 */
bool wavPlayer_fileSelect(const char* filePath)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b08e      	sub	sp, #56	; 0x38
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  WAV_HeaderTypeDef wavHeader;
  UINT readBytes = 0;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60bb      	str	r3, [r7, #8]
  //Open WAV file
  if(f_open(&wavFile, filePath, FA_READ) != FR_OK)
 8000bc0:	2201      	movs	r2, #1
 8000bc2:	6879      	ldr	r1, [r7, #4]
 8000bc4:	480d      	ldr	r0, [pc, #52]	; (8000bfc <wavPlayer_fileSelect+0x48>)
 8000bc6:	f00b fddf 	bl	800c788 <f_open>
 8000bca:	4603      	mov	r3, r0
 8000bcc:	2b00      	cmp	r3, #0
 8000bce:	d001      	beq.n	8000bd4 <wavPlayer_fileSelect+0x20>
  {
    return false;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	e00e      	b.n	8000bf2 <wavPlayer_fileSelect+0x3e>
  }
  //Read WAV file Header
  f_read(&wavFile, &wavHeader, sizeof(wavHeader), &readBytes);
 8000bd4:	f107 0308 	add.w	r3, r7, #8
 8000bd8:	f107 010c 	add.w	r1, r7, #12
 8000bdc:	222c      	movs	r2, #44	; 0x2c
 8000bde:	4807      	ldr	r0, [pc, #28]	; (8000bfc <wavPlayer_fileSelect+0x48>)
 8000be0:	f00b ff90 	bl	800cb04 <f_read>
  //Get audio data size
  fileLength = wavHeader.FileSize;
 8000be4:	693b      	ldr	r3, [r7, #16]
 8000be6:	4a06      	ldr	r2, [pc, #24]	; (8000c00 <wavPlayer_fileSelect+0x4c>)
 8000be8:	6013      	str	r3, [r2, #0]
  //Play the WAV file with frequency specified in header
  samplingFreq = wavHeader.SampleRate;
 8000bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bec:	4a05      	ldr	r2, [pc, #20]	; (8000c04 <wavPlayer_fileSelect+0x50>)
 8000bee:	6013      	str	r3, [r2, #0]
  return true;
 8000bf0:	2301      	movs	r3, #1
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	3738      	adds	r7, #56	; 0x38
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	200000f0 	.word	0x200000f0
 8000c00:	20000320 	.word	0x20000320
 8000c04:	20001328 	.word	0x20001328

08000c08 <wavPlayer_play>:

/**
 * @brief WAV File Play
 */
void wavPlayer_play(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  isFinished = false;
 8000c0c:	4b10      	ldr	r3, [pc, #64]	; (8000c50 <wavPlayer_play+0x48>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	701a      	strb	r2, [r3, #0]
  //Initialise I2S Audio Sampling settings
  audioI2S_init(samplingFreq);
 8000c12:	4b10      	ldr	r3, [pc, #64]	; (8000c54 <wavPlayer_play+0x4c>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff3e 	bl	8000a98 <audioI2S_init>
  //Read Audio data from USB Disk
  f_lseek(&wavFile, 0);
 8000c1c:	2100      	movs	r1, #0
 8000c1e:	480e      	ldr	r0, [pc, #56]	; (8000c58 <wavPlayer_play+0x50>)
 8000c20:	f00c f957 	bl	800ced2 <f_lseek>
  f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE, &playerReadBytes);
 8000c24:	4b0d      	ldr	r3, [pc, #52]	; (8000c5c <wavPlayer_play+0x54>)
 8000c26:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c2a:	490d      	ldr	r1, [pc, #52]	; (8000c60 <wavPlayer_play+0x58>)
 8000c2c:	480a      	ldr	r0, [pc, #40]	; (8000c58 <wavPlayer_play+0x50>)
 8000c2e:	f00b ff69 	bl	800cb04 <f_read>
  audioRemainSize = fileLength - playerReadBytes;
 8000c32:	4b0c      	ldr	r3, [pc, #48]	; (8000c64 <wavPlayer_play+0x5c>)
 8000c34:	681a      	ldr	r2, [r3, #0]
 8000c36:	4b09      	ldr	r3, [pc, #36]	; (8000c5c <wavPlayer_play+0x54>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	1ad3      	subs	r3, r2, r3
 8000c3c:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <wavPlayer_play+0x60>)
 8000c3e:	6013      	str	r3, [r2, #0]
  //Start playing the WAV
  audioI2S_play((uint16_t *)&audioBuffer[0], AUDIO_BUFFER_SIZE);
 8000c40:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c44:	4806      	ldr	r0, [pc, #24]	; (8000c60 <wavPlayer_play+0x58>)
 8000c46:	f7ff ff37 	bl	8000ab8 <audioI2S_play>
}
 8000c4a:	bf00      	nop
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	20001330 	.word	0x20001330
 8000c54:	20001328 	.word	0x20001328
 8000c58:	200000f0 	.word	0x200000f0
 8000c5c:	2000132c 	.word	0x2000132c
 8000c60:	20000324 	.word	0x20000324
 8000c64:	20000320 	.word	0x20000320
 8000c68:	20001324 	.word	0x20001324

08000c6c <wavPlayer_process>:

/**
 * @brief Process WAV
 */
void wavPlayer_process(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	af00      	add	r7, sp, #0
  switch(playerControlSM)
 8000c70:	4b30      	ldr	r3, [pc, #192]	; (8000d34 <wavPlayer_process+0xc8>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	b2db      	uxtb	r3, r3
 8000c76:	2b03      	cmp	r3, #3
 8000c78:	d859      	bhi.n	8000d2e <wavPlayer_process+0xc2>
 8000c7a:	a201      	add	r2, pc, #4	; (adr r2, 8000c80 <wavPlayer_process+0x14>)
 8000c7c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c80:	08000d2d 	.word	0x08000d2d
 8000c84:	08000c91 	.word	0x08000c91
 8000c88:	08000cd3 	.word	0x08000cd3
 8000c8c:	08000d15 	.word	0x08000d15
  {
  case PLAYER_CONTROL_Idle:
    break;

  case PLAYER_CONTROL_HalfBuffer:
    playerReadBytes = 0;
 8000c90:	4b29      	ldr	r3, [pc, #164]	; (8000d38 <wavPlayer_process+0xcc>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000c96:	4b27      	ldr	r3, [pc, #156]	; (8000d34 <wavPlayer_process+0xc8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[0], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000c9c:	4b26      	ldr	r3, [pc, #152]	; (8000d38 <wavPlayer_process+0xcc>)
 8000c9e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ca2:	4926      	ldr	r1, [pc, #152]	; (8000d3c <wavPlayer_process+0xd0>)
 8000ca4:	4826      	ldr	r0, [pc, #152]	; (8000d40 <wavPlayer_process+0xd4>)
 8000ca6:	f00b ff2d 	bl	800cb04 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000caa:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <wavPlayer_process+0xd8>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cb2:	d907      	bls.n	8000cc4 <wavPlayer_process+0x58>
    {
      audioRemainSize -= playerReadBytes;
 8000cb4:	4b23      	ldr	r3, [pc, #140]	; (8000d44 <wavPlayer_process+0xd8>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b1f      	ldr	r3, [pc, #124]	; (8000d38 <wavPlayer_process+0xcc>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	4a21      	ldr	r2, [pc, #132]	; (8000d44 <wavPlayer_process+0xd8>)
 8000cc0:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000cc2:	e034      	b.n	8000d2e <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000cc4:	4b1f      	ldr	r3, [pc, #124]	; (8000d44 <wavPlayer_process+0xd8>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000cca:	4b1a      	ldr	r3, [pc, #104]	; (8000d34 <wavPlayer_process+0xc8>)
 8000ccc:	2203      	movs	r2, #3
 8000cce:	701a      	strb	r2, [r3, #0]
    break;
 8000cd0:	e02d      	b.n	8000d2e <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_FullBuffer:
    playerReadBytes = 0;
 8000cd2:	4b19      	ldr	r3, [pc, #100]	; (8000d38 <wavPlayer_process+0xcc>)
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000cd8:	4b16      	ldr	r3, [pc, #88]	; (8000d34 <wavPlayer_process+0xc8>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
    f_read (&wavFile, &audioBuffer[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2, &playerReadBytes);
 8000cde:	4b16      	ldr	r3, [pc, #88]	; (8000d38 <wavPlayer_process+0xcc>)
 8000ce0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000ce4:	4918      	ldr	r1, [pc, #96]	; (8000d48 <wavPlayer_process+0xdc>)
 8000ce6:	4816      	ldr	r0, [pc, #88]	; (8000d40 <wavPlayer_process+0xd4>)
 8000ce8:	f00b ff0c 	bl	800cb04 <f_read>
    if(audioRemainSize > (AUDIO_BUFFER_SIZE / 2))
 8000cec:	4b15      	ldr	r3, [pc, #84]	; (8000d44 <wavPlayer_process+0xd8>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000cf4:	d907      	bls.n	8000d06 <wavPlayer_process+0x9a>
    {
      audioRemainSize -= playerReadBytes;
 8000cf6:	4b13      	ldr	r3, [pc, #76]	; (8000d44 <wavPlayer_process+0xd8>)
 8000cf8:	681a      	ldr	r2, [r3, #0]
 8000cfa:	4b0f      	ldr	r3, [pc, #60]	; (8000d38 <wavPlayer_process+0xcc>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	1ad3      	subs	r3, r2, r3
 8000d00:	4a10      	ldr	r2, [pc, #64]	; (8000d44 <wavPlayer_process+0xd8>)
 8000d02:	6013      	str	r3, [r2, #0]
    else
    {
      audioRemainSize = 0;
      playerControlSM = PLAYER_CONTROL_EndOfFile;
    }
    break;
 8000d04:	e013      	b.n	8000d2e <wavPlayer_process+0xc2>
      audioRemainSize = 0;
 8000d06:	4b0f      	ldr	r3, [pc, #60]	; (8000d44 <wavPlayer_process+0xd8>)
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
      playerControlSM = PLAYER_CONTROL_EndOfFile;
 8000d0c:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <wavPlayer_process+0xc8>)
 8000d0e:	2203      	movs	r2, #3
 8000d10:	701a      	strb	r2, [r3, #0]
    break;
 8000d12:	e00c      	b.n	8000d2e <wavPlayer_process+0xc2>

  case PLAYER_CONTROL_EndOfFile:
    f_close(&wavFile);
 8000d14:	480a      	ldr	r0, [pc, #40]	; (8000d40 <wavPlayer_process+0xd4>)
 8000d16:	f00c f8b2 	bl	800ce7e <f_close>
    wavPlayer_reset();
 8000d1a:	f7ff ff39 	bl	8000b90 <wavPlayer_reset>
    isFinished = true;
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <wavPlayer_process+0xe0>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	701a      	strb	r2, [r3, #0]
    playerControlSM = PLAYER_CONTROL_Idle;
 8000d24:	4b03      	ldr	r3, [pc, #12]	; (8000d34 <wavPlayer_process+0xc8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
    break;
 8000d2a:	e000      	b.n	8000d2e <wavPlayer_process+0xc2>
    break;
 8000d2c:	bf00      	nop
  }
}
 8000d2e:	bf00      	nop
 8000d30:	bd80      	pop	{r7, pc}
 8000d32:	bf00      	nop
 8000d34:	20001331 	.word	0x20001331
 8000d38:	2000132c 	.word	0x2000132c
 8000d3c:	20000324 	.word	0x20000324
 8000d40:	200000f0 	.word	0x200000f0
 8000d44:	20001324 	.word	0x20001324
 8000d48:	20000b24 	.word	0x20000b24
 8000d4c:	20001330 	.word	0x20001330

08000d50 <wavPlayer_stop>:

/**
 * @brief WAV stop
 */
void wavPlayer_stop(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  audioI2S_stop();
 8000d54:	f7ff feea 	bl	8000b2c <audioI2S_stop>
  isFinished = true;
 8000d58:	4b02      	ldr	r3, [pc, #8]	; (8000d64 <wavPlayer_stop+0x14>)
 8000d5a:	2201      	movs	r2, #1
 8000d5c:	701a      	strb	r2, [r3, #0]
}
 8000d5e:	bf00      	nop
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	20001330 	.word	0x20001330

08000d68 <wavPlayer_pause>:

/**
 * @brief WAV pause/resume
 */
void wavPlayer_pause(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  audioI2S_pause();
 8000d6c:	f7ff fec2 	bl	8000af4 <audioI2S_pause>
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <wavPlayer_resume>:
void wavPlayer_resume(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  audioI2S_resume();
 8000d78:	f7ff feca 	bl	8000b10 <audioI2S_resume>
}
 8000d7c:	bf00      	nop
 8000d7e:	bd80      	pop	{r7, pc}

08000d80 <wavPlayer_isFinished>:

/**
 * @brief isEndofFile reached
 */
bool wavPlayer_isFinished(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return isFinished;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <wavPlayer_isFinished+0x14>)
 8000d86:	781b      	ldrb	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20001330 	.word	0x20001330

08000d98 <audioI2S_halfTransfer_Callback>:

/**
 * @brief Half/Full transfer Audio callback for buffer management
 */
void audioI2S_halfTransfer_Callback(void)
{
 8000d98:	b480      	push	{r7}
 8000d9a:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_HalfBuffer;
 8000d9c:	4b03      	ldr	r3, [pc, #12]	; (8000dac <audioI2S_halfTransfer_Callback+0x14>)
 8000d9e:	2201      	movs	r2, #1
 8000da0:	701a      	strb	r2, [r3, #0]
}
 8000da2:	bf00      	nop
 8000da4:	46bd      	mov	sp, r7
 8000da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000daa:	4770      	bx	lr
 8000dac:	20001331 	.word	0x20001331

08000db0 <audioI2S_fullTransfer_Callback>:
void audioI2S_fullTransfer_Callback(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  playerControlSM = PLAYER_CONTROL_FullBuffer;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <audioI2S_fullTransfer_Callback+0x14>)
 8000db6:	2202      	movs	r2, #2
 8000db8:	701a      	strb	r2, [r3, #0]
//  audioI2S_changeBuffer((uint16_t*)&audioBuffer[0], AUDIO_BUFFER_SIZE / 2);
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	20001331 	.word	0x20001331

08000dc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dc8:	b590      	push	{r4, r7, lr}
 8000dca:	b095      	sub	sp, #84	; 0x54
 8000dcc:	af12      	add	r7, sp, #72	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dce:	f000 fccf 	bl	8001770 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd2:	f000 f957 	bl	8001084 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd6:	f000 fa53 	bl	8001280 <MX_GPIO_Init>
  MX_DMA_Init();
 8000dda:	f000 fa31 	bl	8001240 <MX_DMA_Init>
  MX_I2C1_Init();
 8000dde:	f000 f9d3 	bl	8001188 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000de2:	f000 f9ff 	bl	80011e4 <MX_I2S3_Init>
  MX_FATFS_Init();
 8000de6:	f006 fe2b 	bl	8007a40 <MX_FATFS_Init>
  MX_USB_HOST_Init();
 8000dea:	f00c fad7 	bl	800d39c <MX_USB_HOST_Init>
  /* USER CODE BEGIN 2 */
  CS43_Init(hi2c1, MODE_I2S);
 8000dee:	4c9a      	ldr	r4, [pc, #616]	; (8001058 <main+0x290>)
 8000df0:	2300      	movs	r3, #0
 8000df2:	9311      	str	r3, [sp, #68]	; 0x44
 8000df4:	4668      	mov	r0, sp
 8000df6:	f104 0310 	add.w	r3, r4, #16
 8000dfa:	2244      	movs	r2, #68	; 0x44
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f00c fedf 	bl	800dbc0 <memcpy>
 8000e02:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000e06:	f7ff fb97 	bl	8000538 <CS43_Init>
  CS43_SetVolume(230);//0-255
 8000e0a:	20e6      	movs	r0, #230	; 0xe6
 8000e0c:	f7ff fce4 	bl	80007d8 <CS43_SetVolume>
  CS43_Enable_RightLeft(CS43_RIGHT_LEFT);
 8000e10:	2003      	movs	r0, #3
 8000e12:	f7ff fc97 	bl	8000744 <CS43_Enable_RightLeft>

  audioI2S_setHandle(&hi2s3);
 8000e16:	4891      	ldr	r0, [pc, #580]	; (800105c <main+0x294>)
 8000e18:	f7ff fe2e 	bl	8000a78 <audioI2S_setHandle>

  bool isSdCardMounted=0;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	71fb      	strb	r3, [r7, #7]
  bool pauseResumeToggle=0;
 8000e20:	2300      	movs	r3, #0
 8000e22:	71bb      	strb	r3, [r7, #6]


  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000e24:	f00c fae0 	bl	800d3e8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    if(Appli_state == APPLICATION_START)
 8000e28:	4b8d      	ldr	r3, [pc, #564]	; (8001060 <main+0x298>)
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	2b01      	cmp	r3, #1
 8000e2e:	d106      	bne.n	8000e3e <main+0x76>
    {
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
 8000e30:	2201      	movs	r2, #1
 8000e32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e36:	488b      	ldr	r0, [pc, #556]	; (8001064 <main+0x29c>)
 8000e38:	f001 fbd6 	bl	80025e8 <HAL_GPIO_WritePin>
 8000e3c:	e010      	b.n	8000e60 <main+0x98>
    }
    else if(Appli_state == APPLICATION_DISCONNECT)
 8000e3e:	4b88      	ldr	r3, [pc, #544]	; (8001060 <main+0x298>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b03      	cmp	r3, #3
 8000e44:	d10c      	bne.n	8000e60 <main+0x98>
    {
      HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 8000e46:	2200      	movs	r2, #0
 8000e48:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e4c:	4885      	ldr	r0, [pc, #532]	; (8001064 <main+0x29c>)
 8000e4e:	f001 fbcb 	bl	80025e8 <HAL_GPIO_WritePin>
      f_mount(NULL, (TCHAR const*)"", 0);
 8000e52:	2200      	movs	r2, #0
 8000e54:	4984      	ldr	r1, [pc, #528]	; (8001068 <main+0x2a0>)
 8000e56:	2000      	movs	r0, #0
 8000e58:	f00b fc50 	bl	800c6fc <f_mount>
      isSdCardMounted = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	71fb      	strb	r3, [r7, #7]
    }

    if(Appli_state == APPLICATION_READY)
 8000e60:	4b7f      	ldr	r3, [pc, #508]	; (8001060 <main+0x298>)
 8000e62:	781b      	ldrb	r3, [r3, #0]
 8000e64:	2b02      	cmp	r3, #2
 8000e66:	d1dd      	bne.n	8000e24 <main+0x5c>
    {
      if(!isSdCardMounted)
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	f083 0301 	eor.w	r3, r3, #1
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d006      	beq.n	8000e82 <main+0xba>
      {
        f_mount(&USBHFatFS, (const TCHAR*)USBHPath, 0);
 8000e74:	2200      	movs	r2, #0
 8000e76:	497d      	ldr	r1, [pc, #500]	; (800106c <main+0x2a4>)
 8000e78:	487d      	ldr	r0, [pc, #500]	; (8001070 <main+0x2a8>)
 8000e7a:	f00b fc3f 	bl	800c6fc <f_mount>
        isSdCardMounted = 1;
 8000e7e:	2301      	movs	r3, #1
 8000e80:	71fb      	strb	r3, [r7, #7]
      }
      if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000e82:	2101      	movs	r1, #1
 8000e84:	487b      	ldr	r0, [pc, #492]	; (8001074 <main+0x2ac>)
 8000e86:	f001 fb97 	bl	80025b8 <HAL_GPIO_ReadPin>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0c9      	beq.n	8000e24 <main+0x5c>
      {
        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_SET);
 8000e90:	2201      	movs	r2, #1
 8000e92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e96:	4873      	ldr	r0, [pc, #460]	; (8001064 <main+0x29c>)
 8000e98:	f001 fba6 	bl	80025e8 <HAL_GPIO_WritePin>
        HAL_Delay(1000);
 8000e9c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ea0:	f000 fcd8 	bl	8001854 <HAL_Delay>

        // Play the first song
        wavPlayer_fileSelect(WAV_FILE1);
 8000ea4:	4874      	ldr	r0, [pc, #464]	; (8001078 <main+0x2b0>)
 8000ea6:	f7ff fe85 	bl	8000bb4 <wavPlayer_fileSelect>
        wavPlayer_play();
 8000eaa:	f7ff fead 	bl	8000c08 <wavPlayer_play>

        while(!wavPlayer_isFinished())
 8000eae:	e036      	b.n	8000f1e <main+0x156>
        {
          wavPlayer_process();
 8000eb0:	f7ff fedc 	bl	8000c6c <wavPlayer_process>
          if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	486f      	ldr	r0, [pc, #444]	; (8001074 <main+0x2ac>)
 8000eb8:	f001 fb7e 	bl	80025b8 <HAL_GPIO_ReadPin>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d02d      	beq.n	8000f1e <main+0x156>
          {
            pauseResumeToggle^=1;
 8000ec2:	79bb      	ldrb	r3, [r7, #6]
 8000ec4:	f083 0301 	eor.w	r3, r3, #1
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	bf14      	ite	ne
 8000ece:	2301      	movne	r3, #1
 8000ed0:	2300      	moveq	r3, #0
 8000ed2:	71bb      	strb	r3, [r7, #6]
            if(pauseResumeToggle)
 8000ed4:	79bb      	ldrb	r3, [r7, #6]
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d00b      	beq.n	8000ef2 <main+0x12a>
            {
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000eda:	2201      	movs	r2, #1
 8000edc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ee0:	4860      	ldr	r0, [pc, #384]	; (8001064 <main+0x29c>)
 8000ee2:	f001 fb81 	bl	80025e8 <HAL_GPIO_WritePin>
              wavPlayer_pause();
 8000ee6:	f7ff ff3f 	bl	8000d68 <wavPlayer_pause>
              HAL_Delay(200);
 8000eea:	20c8      	movs	r0, #200	; 0xc8
 8000eec:	f000 fcb2 	bl	8001854 <HAL_Delay>
 8000ef0:	e015      	b.n	8000f1e <main+0x156>
            }
            else
            {
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ef8:	485a      	ldr	r0, [pc, #360]	; (8001064 <main+0x29c>)
 8000efa:	f001 fb75 	bl	80025e8 <HAL_GPIO_WritePin>
              HAL_Delay(1000);
 8000efe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f02:	f000 fca7 	bl	8001854 <HAL_Delay>
              if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000f06:	2101      	movs	r1, #1
 8000f08:	485a      	ldr	r0, [pc, #360]	; (8001074 <main+0x2ac>)
 8000f0a:	f001 fb55 	bl	80025b8 <HAL_GPIO_ReadPin>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d002      	beq.n	8000f1a <main+0x152>
              {
                wavPlayer_stop();
 8000f14:	f7ff ff1c 	bl	8000d50 <wavPlayer_stop>
 8000f18:	e001      	b.n	8000f1e <main+0x156>
              }
              else
              {
                wavPlayer_resume();
 8000f1a:	f7ff ff2b 	bl	8000d74 <wavPlayer_resume>
        while(!wavPlayer_isFinished())
 8000f1e:	f7ff ff2f 	bl	8000d80 <wavPlayer_isFinished>
 8000f22:	4603      	mov	r3, r0
 8000f24:	f083 0301 	eor.w	r3, r3, #1
 8000f28:	b2db      	uxtb	r3, r3
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d1c0      	bne.n	8000eb0 <main+0xe8>
            }
          }
        }

        // Play the second song
        wavPlayer_fileSelect(WAV_FILE2);
 8000f2e:	4853      	ldr	r0, [pc, #332]	; (800107c <main+0x2b4>)
 8000f30:	f7ff fe40 	bl	8000bb4 <wavPlayer_fileSelect>
        wavPlayer_play();
 8000f34:	f7ff fe68 	bl	8000c08 <wavPlayer_play>

        while(!wavPlayer_isFinished())
 8000f38:	e036      	b.n	8000fa8 <main+0x1e0>
        {
          wavPlayer_process();
 8000f3a:	f7ff fe97 	bl	8000c6c <wavPlayer_process>
          if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000f3e:	2101      	movs	r1, #1
 8000f40:	484c      	ldr	r0, [pc, #304]	; (8001074 <main+0x2ac>)
 8000f42:	f001 fb39 	bl	80025b8 <HAL_GPIO_ReadPin>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d02d      	beq.n	8000fa8 <main+0x1e0>
          {
            pauseResumeToggle^=1;
 8000f4c:	79bb      	ldrb	r3, [r7, #6]
 8000f4e:	f083 0301 	eor.w	r3, r3, #1
 8000f52:	b2db      	uxtb	r3, r3
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	bf14      	ite	ne
 8000f58:	2301      	movne	r3, #1
 8000f5a:	2300      	moveq	r3, #0
 8000f5c:	71bb      	strb	r3, [r7, #6]
            if(pauseResumeToggle)
 8000f5e:	79bb      	ldrb	r3, [r7, #6]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d00b      	beq.n	8000f7c <main+0x1b4>
            {
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000f64:	2201      	movs	r2, #1
 8000f66:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f6a:	483e      	ldr	r0, [pc, #248]	; (8001064 <main+0x29c>)
 8000f6c:	f001 fb3c 	bl	80025e8 <HAL_GPIO_WritePin>
              wavPlayer_pause();
 8000f70:	f7ff fefa 	bl	8000d68 <wavPlayer_pause>
              HAL_Delay(200);
 8000f74:	20c8      	movs	r0, #200	; 0xc8
 8000f76:	f000 fc6d 	bl	8001854 <HAL_Delay>
 8000f7a:	e015      	b.n	8000fa8 <main+0x1e0>
            }
            else
            {
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f82:	4838      	ldr	r0, [pc, #224]	; (8001064 <main+0x29c>)
 8000f84:	f001 fb30 	bl	80025e8 <HAL_GPIO_WritePin>
              HAL_Delay(1000);
 8000f88:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f8c:	f000 fc62 	bl	8001854 <HAL_Delay>
              if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000f90:	2101      	movs	r1, #1
 8000f92:	4838      	ldr	r0, [pc, #224]	; (8001074 <main+0x2ac>)
 8000f94:	f001 fb10 	bl	80025b8 <HAL_GPIO_ReadPin>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d002      	beq.n	8000fa4 <main+0x1dc>
              {
                wavPlayer_stop();
 8000f9e:	f7ff fed7 	bl	8000d50 <wavPlayer_stop>
 8000fa2:	e001      	b.n	8000fa8 <main+0x1e0>
              }
              else
              {
                wavPlayer_resume();
 8000fa4:	f7ff fee6 	bl	8000d74 <wavPlayer_resume>
        while(!wavPlayer_isFinished())
 8000fa8:	f7ff feea 	bl	8000d80 <wavPlayer_isFinished>
 8000fac:	4603      	mov	r3, r0
 8000fae:	f083 0301 	eor.w	r3, r3, #1
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d1c0      	bne.n	8000f3a <main+0x172>
            }
          }
        }

        // Play the third song
       wavPlayer_fileSelect(WAV_FILE3);
 8000fb8:	4831      	ldr	r0, [pc, #196]	; (8001080 <main+0x2b8>)
 8000fba:	f7ff fdfb 	bl	8000bb4 <wavPlayer_fileSelect>
        wavPlayer_play();
 8000fbe:	f7ff fe23 	bl	8000c08 <wavPlayer_play>

        while(!wavPlayer_isFinished())
 8000fc2:	e036      	b.n	8001032 <main+0x26a>
        {
          wavPlayer_process();
 8000fc4:	f7ff fe52 	bl	8000c6c <wavPlayer_process>
          if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 8000fc8:	2101      	movs	r1, #1
 8000fca:	482a      	ldr	r0, [pc, #168]	; (8001074 <main+0x2ac>)
 8000fcc:	f001 faf4 	bl	80025b8 <HAL_GPIO_ReadPin>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d02d      	beq.n	8001032 <main+0x26a>
          {
            pauseResumeToggle^=1;
 8000fd6:	79bb      	ldrb	r3, [r7, #6]
 8000fd8:	f083 0301 	eor.w	r3, r3, #1
 8000fdc:	b2db      	uxtb	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	bf14      	ite	ne
 8000fe2:	2301      	movne	r3, #1
 8000fe4:	2300      	moveq	r3, #0
 8000fe6:	71bb      	strb	r3, [r7, #6]
            if(pauseResumeToggle)
 8000fe8:	79bb      	ldrb	r3, [r7, #6]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d00b      	beq.n	8001006 <main+0x23e>
            {
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ff4:	481b      	ldr	r0, [pc, #108]	; (8001064 <main+0x29c>)
 8000ff6:	f001 faf7 	bl	80025e8 <HAL_GPIO_WritePin>
              wavPlayer_pause();
 8000ffa:	f7ff feb5 	bl	8000d68 <wavPlayer_pause>
              HAL_Delay(200);
 8000ffe:	20c8      	movs	r0, #200	; 0xc8
 8001000:	f000 fc28 	bl	8001854 <HAL_Delay>
 8001004:	e015      	b.n	8001032 <main+0x26a>
            }
            else
            {
              HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800100c:	4815      	ldr	r0, [pc, #84]	; (8001064 <main+0x29c>)
 800100e:	f001 faeb 	bl	80025e8 <HAL_GPIO_WritePin>
              HAL_Delay(1000);
 8001012:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001016:	f000 fc1d 	bl	8001854 <HAL_Delay>
              if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 800101a:	2101      	movs	r1, #1
 800101c:	4815      	ldr	r0, [pc, #84]	; (8001074 <main+0x2ac>)
 800101e:	f001 facb 	bl	80025b8 <HAL_GPIO_ReadPin>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d002      	beq.n	800102e <main+0x266>
              {
                wavPlayer_stop();
 8001028:	f7ff fe92 	bl	8000d50 <wavPlayer_stop>
 800102c:	e001      	b.n	8001032 <main+0x26a>
              }
              else
              {
                wavPlayer_resume();
 800102e:	f7ff fea1 	bl	8000d74 <wavPlayer_resume>
        while(!wavPlayer_isFinished())
 8001032:	f7ff fea5 	bl	8000d80 <wavPlayer_isFinished>
 8001036:	4603      	mov	r3, r0
 8001038:	f083 0301 	eor.w	r3, r3, #1
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d1c0      	bne.n	8000fc4 <main+0x1fc>
              }
            }
          }
        }

        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_13, GPIO_PIN_RESET);
 8001042:	2200      	movs	r2, #0
 8001044:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001048:	4806      	ldr	r0, [pc, #24]	; (8001064 <main+0x29c>)
 800104a:	f001 facd 	bl	80025e8 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 800104e:	2064      	movs	r0, #100	; 0x64
 8001050:	f000 fc00 	bl	8001854 <HAL_Delay>
    MX_USB_HOST_Process();
 8001054:	e6e6      	b.n	8000e24 <main+0x5c>
 8001056:	bf00      	nop
 8001058:	20001334 	.word	0x20001334
 800105c:	20001388 	.word	0x20001388
 8001060:	20001a7c 	.word	0x20001a7c
 8001064:	40020c00 	.word	0x40020c00
 8001068:	0800dc8c 	.word	0x0800dc8c
 800106c:	2000143c 	.word	0x2000143c
 8001070:	20001440 	.word	0x20001440
 8001074:	40020000 	.word	0x40020000
 8001078:	0800dc90 	.word	0x0800dc90
 800107c:	0800dc9c 	.word	0x0800dc9c
 8001080:	0800dca8 	.word	0x0800dca8

08001084 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b098      	sub	sp, #96	; 0x60
 8001088:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800108a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800108e:	2230      	movs	r2, #48	; 0x30
 8001090:	2100      	movs	r1, #0
 8001092:	4618      	mov	r0, r3
 8001094:	f00c fd50 	bl	800db38 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001098:	f107 031c 	add.w	r3, r7, #28
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80010a8:	f107 030c 	add.w	r3, r7, #12
 80010ac:	2200      	movs	r2, #0
 80010ae:	601a      	str	r2, [r3, #0]
 80010b0:	605a      	str	r2, [r3, #4]
 80010b2:	609a      	str	r2, [r3, #8]
 80010b4:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
 80010ba:	4b31      	ldr	r3, [pc, #196]	; (8001180 <SystemClock_Config+0xfc>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	4a30      	ldr	r2, [pc, #192]	; (8001180 <SystemClock_Config+0xfc>)
 80010c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010c4:	6413      	str	r3, [r2, #64]	; 0x40
 80010c6:	4b2e      	ldr	r3, [pc, #184]	; (8001180 <SystemClock_Config+0xfc>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010d2:	2300      	movs	r3, #0
 80010d4:	607b      	str	r3, [r7, #4]
 80010d6:	4b2b      	ldr	r3, [pc, #172]	; (8001184 <SystemClock_Config+0x100>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a2a      	ldr	r2, [pc, #168]	; (8001184 <SystemClock_Config+0x100>)
 80010dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	4b28      	ldr	r3, [pc, #160]	; (8001184 <SystemClock_Config+0x100>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ea:	607b      	str	r3, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80010ee:	2301      	movs	r3, #1
 80010f0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80010f2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010f6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010f8:	2302      	movs	r3, #2
 80010fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80010fc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001100:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001102:	2308      	movs	r3, #8
 8001104:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001106:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800110a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800110c:	2302      	movs	r3, #2
 800110e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001110:	2307      	movs	r3, #7
 8001112:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001114:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001118:	4618      	mov	r0, r3
 800111a:	f004 febb 	bl	8005e94 <HAL_RCC_OscConfig>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001124:	f000 f93e 	bl	80013a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001128:	230f      	movs	r3, #15
 800112a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800112c:	2302      	movs	r3, #2
 800112e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001130:	2300      	movs	r3, #0
 8001132:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001134:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800113a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001140:	f107 031c 	add.w	r3, r7, #28
 8001144:	2105      	movs	r1, #5
 8001146:	4618      	mov	r0, r3
 8001148:	f005 f91c 	bl	8006384 <HAL_RCC_ClockConfig>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8001152:	f000 f927 	bl	80013a4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001156:	2301      	movs	r3, #1
 8001158:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 800115a:	f240 130f 	movw	r3, #271	; 0x10f
 800115e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 8001160:	2306      	movs	r3, #6
 8001162:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001164:	f107 030c 	add.w	r3, r7, #12
 8001168:	4618      	mov	r0, r3
 800116a:	f005 fb17 	bl	800679c <HAL_RCCEx_PeriphCLKConfig>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001174:	f000 f916 	bl	80013a4 <Error_Handler>
  }
}
 8001178:	bf00      	nop
 800117a:	3760      	adds	r7, #96	; 0x60
 800117c:	46bd      	mov	sp, r7
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40023800 	.word	0x40023800
 8001184:	40007000 	.word	0x40007000

08001188 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800118c:	4b12      	ldr	r3, [pc, #72]	; (80011d8 <MX_I2C1_Init+0x50>)
 800118e:	4a13      	ldr	r2, [pc, #76]	; (80011dc <MX_I2C1_Init+0x54>)
 8001190:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_I2C1_Init+0x50>)
 8001194:	4a12      	ldr	r2, [pc, #72]	; (80011e0 <MX_I2C1_Init+0x58>)
 8001196:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_I2C1_Init+0x50>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011a6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011aa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80011ac:	4b0a      	ldr	r3, [pc, #40]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80011b2:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80011b8:	4b07      	ldr	r3, [pc, #28]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80011be:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80011c4:	4804      	ldr	r0, [pc, #16]	; (80011d8 <MX_I2C1_Init+0x50>)
 80011c6:	f002 fe33 	bl	8003e30 <HAL_I2C_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80011d0:	f000 f8e8 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80011d4:	bf00      	nop
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	20001334 	.word	0x20001334
 80011dc:	40005400 	.word	0x40005400
 80011e0:	000186a0 	.word	0x000186a0

080011e4 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80011e8:	4b13      	ldr	r3, [pc, #76]	; (8001238 <MX_I2S3_Init+0x54>)
 80011ea:	4a14      	ldr	r2, [pc, #80]	; (800123c <MX_I2S3_Init+0x58>)
 80011ec:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <MX_I2S3_Init+0x54>)
 80011f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011f4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80011f6:	4b10      	ldr	r3, [pc, #64]	; (8001238 <MX_I2S3_Init+0x54>)
 80011f8:	2200      	movs	r2, #0
 80011fa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80011fc:	4b0e      	ldr	r3, [pc, #56]	; (8001238 <MX_I2S3_Init+0x54>)
 80011fe:	2200      	movs	r2, #0
 8001200:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8001202:	4b0d      	ldr	r3, [pc, #52]	; (8001238 <MX_I2S3_Init+0x54>)
 8001204:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001208:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_44K;
 800120a:	4b0b      	ldr	r3, [pc, #44]	; (8001238 <MX_I2S3_Init+0x54>)
 800120c:	f64a 4244 	movw	r2, #44100	; 0xac44
 8001210:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <MX_I2S3_Init+0x54>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8001218:	4b07      	ldr	r3, [pc, #28]	; (8001238 <MX_I2S3_Init+0x54>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800121e:	4b06      	ldr	r3, [pc, #24]	; (8001238 <MX_I2S3_Init+0x54>)
 8001220:	2200      	movs	r2, #0
 8001222:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8001224:	4804      	ldr	r0, [pc, #16]	; (8001238 <MX_I2S3_Init+0x54>)
 8001226:	f003 fd99 	bl	8004d5c <HAL_I2S_Init>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <MX_I2S3_Init+0x50>
  {
    Error_Handler();
 8001230:	f000 f8b8 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8001234:	bf00      	nop
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20001388 	.word	0x20001388
 800123c:	40003c00 	.word	0x40003c00

08001240 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <MX_DMA_Init+0x3c>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a0b      	ldr	r2, [pc, #44]	; (800127c <MX_DMA_Init+0x3c>)
 8001250:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b09      	ldr	r3, [pc, #36]	; (800127c <MX_DMA_Init+0x3c>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001262:	2200      	movs	r2, #0
 8001264:	2100      	movs	r1, #0
 8001266:	2010      	movs	r0, #16
 8001268:	f000 fbf3 	bl	8001a52 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800126c:	2010      	movs	r0, #16
 800126e:	f000 fc0c 	bl	8001a8a <HAL_NVIC_EnableIRQ>

}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40023800 	.word	0x40023800

08001280 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08a      	sub	sp, #40	; 0x28
 8001284:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001286:	f107 0314 	add.w	r3, r7, #20
 800128a:	2200      	movs	r2, #0
 800128c:	601a      	str	r2, [r3, #0]
 800128e:	605a      	str	r2, [r3, #4]
 8001290:	609a      	str	r2, [r3, #8]
 8001292:	60da      	str	r2, [r3, #12]
 8001294:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	613b      	str	r3, [r7, #16]
 800129a:	4b3e      	ldr	r3, [pc, #248]	; (8001394 <MX_GPIO_Init+0x114>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129e:	4a3d      	ldr	r2, [pc, #244]	; (8001394 <MX_GPIO_Init+0x114>)
 80012a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012a4:	6313      	str	r3, [r2, #48]	; 0x30
 80012a6:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <MX_GPIO_Init+0x114>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	4b37      	ldr	r3, [pc, #220]	; (8001394 <MX_GPIO_Init+0x114>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ba:	4a36      	ldr	r2, [pc, #216]	; (8001394 <MX_GPIO_Init+0x114>)
 80012bc:	f043 0304 	orr.w	r3, r3, #4
 80012c0:	6313      	str	r3, [r2, #48]	; 0x30
 80012c2:	4b34      	ldr	r3, [pc, #208]	; (8001394 <MX_GPIO_Init+0x114>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c6:	f003 0304 	and.w	r3, r3, #4
 80012ca:	60fb      	str	r3, [r7, #12]
 80012cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	4b30      	ldr	r3, [pc, #192]	; (8001394 <MX_GPIO_Init+0x114>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	4a2f      	ldr	r2, [pc, #188]	; (8001394 <MX_GPIO_Init+0x114>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6313      	str	r3, [r2, #48]	; 0x30
 80012de:	4b2d      	ldr	r3, [pc, #180]	; (8001394 <MX_GPIO_Init+0x114>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	f003 0301 	and.w	r3, r3, #1
 80012e6:	60bb      	str	r3, [r7, #8]
 80012e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012ea:	2300      	movs	r3, #0
 80012ec:	607b      	str	r3, [r7, #4]
 80012ee:	4b29      	ldr	r3, [pc, #164]	; (8001394 <MX_GPIO_Init+0x114>)
 80012f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f2:	4a28      	ldr	r2, [pc, #160]	; (8001394 <MX_GPIO_Init+0x114>)
 80012f4:	f043 0308 	orr.w	r3, r3, #8
 80012f8:	6313      	str	r3, [r2, #48]	; 0x30
 80012fa:	4b26      	ldr	r3, [pc, #152]	; (8001394 <MX_GPIO_Init+0x114>)
 80012fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fe:	f003 0308 	and.w	r3, r3, #8
 8001302:	607b      	str	r3, [r7, #4]
 8001304:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001306:	2300      	movs	r3, #0
 8001308:	603b      	str	r3, [r7, #0]
 800130a:	4b22      	ldr	r3, [pc, #136]	; (8001394 <MX_GPIO_Init+0x114>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800130e:	4a21      	ldr	r2, [pc, #132]	; (8001394 <MX_GPIO_Init+0x114>)
 8001310:	f043 0302 	orr.w	r3, r3, #2
 8001314:	6313      	str	r3, [r2, #48]	; 0x30
 8001316:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <MX_GPIO_Init+0x114>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131a:	f003 0302 	and.w	r3, r3, #2
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0, GPIO_PIN_RESET);
 8001322:	2200      	movs	r2, #0
 8001324:	2101      	movs	r1, #1
 8001326:	481c      	ldr	r0, [pc, #112]	; (8001398 <MX_GPIO_Init+0x118>)
 8001328:	f001 f95e 	bl	80025e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800132c:	2200      	movs	r2, #0
 800132e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001332:	481a      	ldr	r0, [pc, #104]	; (800139c <MX_GPIO_Init+0x11c>)
 8001334:	f001 f958 	bl	80025e8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001338:	2301      	movs	r3, #1
 800133a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800133c:	2301      	movs	r3, #1
 800133e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001344:	2300      	movs	r3, #0
 8001346:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001348:	f107 0314 	add.w	r3, r7, #20
 800134c:	4619      	mov	r1, r3
 800134e:	4812      	ldr	r0, [pc, #72]	; (8001398 <MX_GPIO_Init+0x118>)
 8001350:	f000 ff96 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001354:	2301      	movs	r3, #1
 8001356:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001358:	2300      	movs	r3, #0
 800135a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	480e      	ldr	r0, [pc, #56]	; (80013a0 <MX_GPIO_Init+0x120>)
 8001368:	f000 ff8a 	bl	8002280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15
                           PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
 800136c:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001370:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001372:	2301      	movs	r3, #1
 8001374:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001376:	2300      	movs	r3, #0
 8001378:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137a:	2300      	movs	r3, #0
 800137c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137e:	f107 0314 	add.w	r3, r7, #20
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_GPIO_Init+0x11c>)
 8001386:	f000 ff7b 	bl	8002280 <HAL_GPIO_Init>

}
 800138a:	bf00      	nop
 800138c:	3728      	adds	r7, #40	; 0x28
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	40020800 	.word	0x40020800
 800139c:	40020c00 	.word	0x40020c00
 80013a0:	40020000 	.word	0x40020000

080013a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80013a8:	bf00      	nop
 80013aa:	46bd      	mov	sp, r7
 80013ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b0:	4770      	bx	lr
	...

080013b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b082      	sub	sp, #8
 80013b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
 80013be:	4b10      	ldr	r3, [pc, #64]	; (8001400 <HAL_MspInit+0x4c>)
 80013c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c2:	4a0f      	ldr	r2, [pc, #60]	; (8001400 <HAL_MspInit+0x4c>)
 80013c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013c8:	6453      	str	r3, [r2, #68]	; 0x44
 80013ca:	4b0d      	ldr	r3, [pc, #52]	; (8001400 <HAL_MspInit+0x4c>)
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013d2:	607b      	str	r3, [r7, #4]
 80013d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	603b      	str	r3, [r7, #0]
 80013da:	4b09      	ldr	r3, [pc, #36]	; (8001400 <HAL_MspInit+0x4c>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013de:	4a08      	ldr	r2, [pc, #32]	; (8001400 <HAL_MspInit+0x4c>)
 80013e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013e4:	6413      	str	r3, [r2, #64]	; 0x40
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_MspInit+0x4c>)
 80013e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013ee:	603b      	str	r3, [r7, #0]
 80013f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80013f2:	2007      	movs	r0, #7
 80013f4:	f000 fb22 	bl	8001a3c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40023800 	.word	0x40023800

08001404 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001404:	b580      	push	{r7, lr}
 8001406:	b08a      	sub	sp, #40	; 0x28
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140c:	f107 0314 	add.w	r3, r7, #20
 8001410:	2200      	movs	r2, #0
 8001412:	601a      	str	r2, [r3, #0]
 8001414:	605a      	str	r2, [r3, #4]
 8001416:	609a      	str	r2, [r3, #8]
 8001418:	60da      	str	r2, [r3, #12]
 800141a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4a19      	ldr	r2, [pc, #100]	; (8001488 <HAL_I2C_MspInit+0x84>)
 8001422:	4293      	cmp	r3, r2
 8001424:	d12c      	bne.n	8001480 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001426:	2300      	movs	r3, #0
 8001428:	613b      	str	r3, [r7, #16]
 800142a:	4b18      	ldr	r3, [pc, #96]	; (800148c <HAL_I2C_MspInit+0x88>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a17      	ldr	r2, [pc, #92]	; (800148c <HAL_I2C_MspInit+0x88>)
 8001430:	f043 0302 	orr.w	r3, r3, #2
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_I2C_MspInit+0x88>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	613b      	str	r3, [r7, #16]
 8001440:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_9;
 8001442:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001448:	2312      	movs	r3, #18
 800144a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144c:	2300      	movs	r3, #0
 800144e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001450:	2303      	movs	r3, #3
 8001452:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001454:	2304      	movs	r3, #4
 8001456:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	4619      	mov	r1, r3
 800145e:	480c      	ldr	r0, [pc, #48]	; (8001490 <HAL_I2C_MspInit+0x8c>)
 8001460:	f000 ff0e 	bl	8002280 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
 8001468:	4b08      	ldr	r3, [pc, #32]	; (800148c <HAL_I2C_MspInit+0x88>)
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	4a07      	ldr	r2, [pc, #28]	; (800148c <HAL_I2C_MspInit+0x88>)
 800146e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001472:	6413      	str	r3, [r2, #64]	; 0x40
 8001474:	4b05      	ldr	r3, [pc, #20]	; (800148c <HAL_I2C_MspInit+0x88>)
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800147c:	60fb      	str	r3, [r7, #12]
 800147e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001480:	bf00      	nop
 8001482:	3728      	adds	r7, #40	; 0x28
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}
 8001488:	40005400 	.word	0x40005400
 800148c:	40023800 	.word	0x40023800
 8001490:	40020400 	.word	0x40020400

08001494 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08e      	sub	sp, #56	; 0x38
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
 80014aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014ac:	f107 0314 	add.w	r3, r7, #20
 80014b0:	2200      	movs	r2, #0
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	605a      	str	r2, [r3, #4]
 80014b6:	609a      	str	r2, [r3, #8]
 80014b8:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4a4e      	ldr	r2, [pc, #312]	; (80015f8 <HAL_I2S_MspInit+0x164>)
 80014c0:	4293      	cmp	r3, r2
 80014c2:	f040 8095 	bne.w	80015f0 <HAL_I2S_MspInit+0x15c>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80014c6:	2301      	movs	r3, #1
 80014c8:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 271;
 80014ca:	f240 130f 	movw	r3, #271	; 0x10f
 80014ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 6;
 80014d0:	2306      	movs	r3, #6
 80014d2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4618      	mov	r0, r3
 80014da:	f005 f95f 	bl	800679c <HAL_RCCEx_PeriphCLKConfig>
 80014de:	4603      	mov	r3, r0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d001      	beq.n	80014e8 <HAL_I2S_MspInit+0x54>
    {
      Error_Handler();
 80014e4:	f7ff ff5e 	bl	80013a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80014e8:	2300      	movs	r3, #0
 80014ea:	613b      	str	r3, [r7, #16]
 80014ec:	4b43      	ldr	r3, [pc, #268]	; (80015fc <HAL_I2S_MspInit+0x168>)
 80014ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f0:	4a42      	ldr	r2, [pc, #264]	; (80015fc <HAL_I2S_MspInit+0x168>)
 80014f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80014f6:	6413      	str	r3, [r2, #64]	; 0x40
 80014f8:	4b40      	ldr	r3, [pc, #256]	; (80015fc <HAL_I2S_MspInit+0x168>)
 80014fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001500:	613b      	str	r3, [r7, #16]
 8001502:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	4b3c      	ldr	r3, [pc, #240]	; (80015fc <HAL_I2S_MspInit+0x168>)
 800150a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150c:	4a3b      	ldr	r2, [pc, #236]	; (80015fc <HAL_I2S_MspInit+0x168>)
 800150e:	f043 0301 	orr.w	r3, r3, #1
 8001512:	6313      	str	r3, [r2, #48]	; 0x30
 8001514:	4b39      	ldr	r3, [pc, #228]	; (80015fc <HAL_I2S_MspInit+0x168>)
 8001516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001518:	f003 0301 	and.w	r3, r3, #1
 800151c:	60fb      	str	r3, [r7, #12]
 800151e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001520:	2300      	movs	r3, #0
 8001522:	60bb      	str	r3, [r7, #8]
 8001524:	4b35      	ldr	r3, [pc, #212]	; (80015fc <HAL_I2S_MspInit+0x168>)
 8001526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001528:	4a34      	ldr	r2, [pc, #208]	; (80015fc <HAL_I2S_MspInit+0x168>)
 800152a:	f043 0304 	orr.w	r3, r3, #4
 800152e:	6313      	str	r3, [r2, #48]	; 0x30
 8001530:	4b32      	ldr	r3, [pc, #200]	; (80015fc <HAL_I2S_MspInit+0x168>)
 8001532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001534:	f003 0304 	and.w	r3, r3, #4
 8001538:	60bb      	str	r3, [r7, #8]
 800153a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800153c:	2310      	movs	r3, #16
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001548:	2300      	movs	r3, #0
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800154c:	2306      	movs	r3, #6
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	4619      	mov	r1, r3
 8001556:	482a      	ldr	r0, [pc, #168]	; (8001600 <HAL_I2S_MspInit+0x16c>)
 8001558:	f000 fe92 	bl	8002280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_10|GPIO_PIN_12;
 800155c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001560:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001562:	2302      	movs	r3, #2
 8001564:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001566:	2300      	movs	r3, #0
 8001568:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156a:	2300      	movs	r3, #0
 800156c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800156e:	2306      	movs	r3, #6
 8001570:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001576:	4619      	mov	r1, r3
 8001578:	4822      	ldr	r0, [pc, #136]	; (8001604 <HAL_I2S_MspInit+0x170>)
 800157a:	f000 fe81 	bl	8002280 <HAL_GPIO_Init>

    /* I2S3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Stream5;
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <HAL_I2S_MspInit+0x174>)
 8001580:	4a22      	ldr	r2, [pc, #136]	; (800160c <HAL_I2S_MspInit+0x178>)
 8001582:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Channel = DMA_CHANNEL_0;
 8001584:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_I2S_MspInit+0x174>)
 8001586:	2200      	movs	r2, #0
 8001588:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800158a:	4b1f      	ldr	r3, [pc, #124]	; (8001608 <HAL_I2S_MspInit+0x174>)
 800158c:	2240      	movs	r2, #64	; 0x40
 800158e:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001590:	4b1d      	ldr	r3, [pc, #116]	; (8001608 <HAL_I2S_MspInit+0x174>)
 8001592:	2200      	movs	r2, #0
 8001594:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001596:	4b1c      	ldr	r3, [pc, #112]	; (8001608 <HAL_I2S_MspInit+0x174>)
 8001598:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800159c:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800159e:	4b1a      	ldr	r3, [pc, #104]	; (8001608 <HAL_I2S_MspInit+0x174>)
 80015a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015a4:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015a6:	4b18      	ldr	r3, [pc, #96]	; (8001608 <HAL_I2S_MspInit+0x174>)
 80015a8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ac:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_CIRCULAR;
 80015ae:	4b16      	ldr	r3, [pc, #88]	; (8001608 <HAL_I2S_MspInit+0x174>)
 80015b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015b4:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015b6:	4b14      	ldr	r3, [pc, #80]	; (8001608 <HAL_I2S_MspInit+0x174>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	621a      	str	r2, [r3, #32]
    hdma_spi3_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 80015bc:	4b12      	ldr	r3, [pc, #72]	; (8001608 <HAL_I2S_MspInit+0x174>)
 80015be:	2204      	movs	r2, #4
 80015c0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi3_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 80015c2:	4b11      	ldr	r3, [pc, #68]	; (8001608 <HAL_I2S_MspInit+0x174>)
 80015c4:	2203      	movs	r2, #3
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi3_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 80015c8:	4b0f      	ldr	r3, [pc, #60]	; (8001608 <HAL_I2S_MspInit+0x174>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi3_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 80015ce:	4b0e      	ldr	r3, [pc, #56]	; (8001608 <HAL_I2S_MspInit+0x174>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 80015d4:	480c      	ldr	r0, [pc, #48]	; (8001608 <HAL_I2S_MspInit+0x174>)
 80015d6:	f000 fa73 	bl	8001ac0 <HAL_DMA_Init>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <HAL_I2S_MspInit+0x150>
    {
      Error_Handler();
 80015e0:	f7ff fee0 	bl	80013a4 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi3_tx);
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	4a08      	ldr	r2, [pc, #32]	; (8001608 <HAL_I2S_MspInit+0x174>)
 80015e8:	639a      	str	r2, [r3, #56]	; 0x38
 80015ea:	4a07      	ldr	r2, [pc, #28]	; (8001608 <HAL_I2S_MspInit+0x174>)
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015f0:	bf00      	nop
 80015f2:	3738      	adds	r7, #56	; 0x38
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40003c00 	.word	0x40003c00
 80015fc:	40023800 	.word	0x40023800
 8001600:	40020000 	.word	0x40020000
 8001604:	40020800 	.word	0x40020800
 8001608:	200013d0 	.word	0x200013d0
 800160c:	40026088 	.word	0x40026088

08001610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001614:	e7fe      	b.n	8001614 <NMI_Handler+0x4>

08001616 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001616:	b480      	push	{r7}
 8001618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800161a:	e7fe      	b.n	800161a <HardFault_Handler+0x4>

0800161c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800161c:	b480      	push	{r7}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001620:	e7fe      	b.n	8001620 <MemManage_Handler+0x4>

08001622 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001626:	e7fe      	b.n	8001626 <BusFault_Handler+0x4>

08001628 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800162c:	e7fe      	b.n	800162c <UsageFault_Handler+0x4>

0800162e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001632:	bf00      	nop
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001648:	4770      	bx	lr

0800164a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800164e:	bf00      	nop
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800165c:	f000 f8da 	bl	8001814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}

08001664 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <DMA1_Stream5_IRQHandler+0x10>)
 800166a:	f000 fb9f 	bl	8001dac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200013d0 	.word	0x200013d0

08001678 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <OTG_FS_IRQHandler+0x10>)
 800167e:	f001 fa37 	bl	8002af0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20001a80 	.word	0x20001a80

0800168c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	b086      	sub	sp, #24
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001694:	4a14      	ldr	r2, [pc, #80]	; (80016e8 <_sbrk+0x5c>)
 8001696:	4b15      	ldr	r3, [pc, #84]	; (80016ec <_sbrk+0x60>)
 8001698:	1ad3      	subs	r3, r2, r3
 800169a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016a0:	4b13      	ldr	r3, [pc, #76]	; (80016f0 <_sbrk+0x64>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d102      	bne.n	80016ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016a8:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <_sbrk+0x64>)
 80016aa:	4a12      	ldr	r2, [pc, #72]	; (80016f4 <_sbrk+0x68>)
 80016ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016ae:	4b10      	ldr	r3, [pc, #64]	; (80016f0 <_sbrk+0x64>)
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	4413      	add	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	429a      	cmp	r2, r3
 80016ba:	d207      	bcs.n	80016cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016bc:	f00c fa54 	bl	800db68 <__errno>
 80016c0:	4603      	mov	r3, r0
 80016c2:	220c      	movs	r2, #12
 80016c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016ca:	e009      	b.n	80016e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016cc:	4b08      	ldr	r3, [pc, #32]	; (80016f0 <_sbrk+0x64>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016d2:	4b07      	ldr	r3, [pc, #28]	; (80016f0 <_sbrk+0x64>)
 80016d4:	681a      	ldr	r2, [r3, #0]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	4413      	add	r3, r2
 80016da:	4a05      	ldr	r2, [pc, #20]	; (80016f0 <_sbrk+0x64>)
 80016dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016de:	68fb      	ldr	r3, [r7, #12]
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	3718      	adds	r7, #24
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	20020000 	.word	0x20020000
 80016ec:	00002000 	.word	0x00002000
 80016f0:	20001430 	.word	0x20001430
 80016f4:	20001ed0 	.word	0x20001ed0

080016f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80016f8:	b480      	push	{r7}
 80016fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <SystemInit+0x20>)
 80016fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001702:	4a05      	ldr	r2, [pc, #20]	; (8001718 <SystemInit+0x20>)
 8001704:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001708:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800170c:	bf00      	nop
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr
 8001716:	bf00      	nop
 8001718:	e000ed00 	.word	0xe000ed00

0800171c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800171c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001754 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001720:	480d      	ldr	r0, [pc, #52]	; (8001758 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001722:	490e      	ldr	r1, [pc, #56]	; (800175c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001724:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001728:	e002      	b.n	8001730 <LoopCopyDataInit>

0800172a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800172a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800172c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800172e:	3304      	adds	r3, #4

08001730 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001730:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001732:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001734:	d3f9      	bcc.n	800172a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001736:	4a0b      	ldr	r2, [pc, #44]	; (8001764 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001738:	4c0b      	ldr	r4, [pc, #44]	; (8001768 <LoopFillZerobss+0x26>)
  movs r3, #0
 800173a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800173c:	e001      	b.n	8001742 <LoopFillZerobss>

0800173e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800173e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001740:	3204      	adds	r2, #4

08001742 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001742:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001744:	d3fb      	bcc.n	800173e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001746:	f7ff ffd7 	bl	80016f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800174a:	f00c fa13 	bl	800db74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800174e:	f7ff fb3b 	bl	8000dc8 <main>
  bx  lr    
 8001752:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001754:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001758:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800175c:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8001760:	0800de20 	.word	0x0800de20
  ldr r2, =_sbss
 8001764:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001768:	20001ecc 	.word	0x20001ecc

0800176c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800176c:	e7fe      	b.n	800176c <ADC_IRQHandler>
	...

08001770 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001774:	4b0e      	ldr	r3, [pc, #56]	; (80017b0 <HAL_Init+0x40>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a0d      	ldr	r2, [pc, #52]	; (80017b0 <HAL_Init+0x40>)
 800177a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800177e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001780:	4b0b      	ldr	r3, [pc, #44]	; (80017b0 <HAL_Init+0x40>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a0a      	ldr	r2, [pc, #40]	; (80017b0 <HAL_Init+0x40>)
 8001786:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800178a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800178c:	4b08      	ldr	r3, [pc, #32]	; (80017b0 <HAL_Init+0x40>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a07      	ldr	r2, [pc, #28]	; (80017b0 <HAL_Init+0x40>)
 8001792:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001796:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001798:	2003      	movs	r0, #3
 800179a:	f000 f94f 	bl	8001a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800179e:	2000      	movs	r0, #0
 80017a0:	f000 f808 	bl	80017b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017a4:	f7ff fe06 	bl	80013b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017a8:	2300      	movs	r3, #0
}
 80017aa:	4618      	mov	r0, r3
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023c00 	.word	0x40023c00

080017b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_InitTick+0x54>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_InitTick+0x58>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 f967 	bl	8001aa6 <HAL_SYSTICK_Config>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e00e      	b.n	8001800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b0f      	cmp	r3, #15
 80017e6:	d80a      	bhi.n	80017fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e8:	2200      	movs	r2, #0
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80017f0:	f000 f92f 	bl	8001a52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <HAL_InitTick+0x5c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e000      	b.n	8001800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000000 	.word	0x20000000
 800180c:	20000008 	.word	0x20000008
 8001810:	20000004 	.word	0x20000004

08001814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_IncTick+0x20>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_IncTick+0x24>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4413      	add	r3, r2
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <HAL_IncTick+0x24>)
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	20000008 	.word	0x20000008
 8001838:	20001434 	.word	0x20001434

0800183c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return uwTick;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <HAL_GetTick+0x14>)
 8001842:	681b      	ldr	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20001434 	.word	0x20001434

08001854 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800185c:	f7ff ffee 	bl	800183c <HAL_GetTick>
 8001860:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800186c:	d005      	beq.n	800187a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800186e:	4b0a      	ldr	r3, [pc, #40]	; (8001898 <HAL_Delay+0x44>)
 8001870:	781b      	ldrb	r3, [r3, #0]
 8001872:	461a      	mov	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	4413      	add	r3, r2
 8001878:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800187a:	bf00      	nop
 800187c:	f7ff ffde 	bl	800183c <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	68bb      	ldr	r3, [r7, #8]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	68fa      	ldr	r2, [r7, #12]
 8001888:	429a      	cmp	r2, r3
 800188a:	d8f7      	bhi.n	800187c <HAL_Delay+0x28>
  {
  }
}
 800188c:	bf00      	nop
 800188e:	bf00      	nop
 8001890:	3710      	adds	r7, #16
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000008 	.word	0x20000008

0800189c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800189c:	b480      	push	{r7}
 800189e:	b085      	sub	sp, #20
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	f003 0307 	and.w	r3, r3, #7
 80018aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018b2:	68ba      	ldr	r2, [r7, #8]
 80018b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018b8:	4013      	ands	r3, r2
 80018ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ce:	4a04      	ldr	r2, [pc, #16]	; (80018e0 <__NVIC_SetPriorityGrouping+0x44>)
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	60d3      	str	r3, [r2, #12]
}
 80018d4:	bf00      	nop
 80018d6:	3714      	adds	r7, #20
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018e4:	b480      	push	{r7}
 80018e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018e8:	4b04      	ldr	r3, [pc, #16]	; (80018fc <__NVIC_GetPriorityGrouping+0x18>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	0a1b      	lsrs	r3, r3, #8
 80018ee:	f003 0307 	and.w	r3, r3, #7
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	e000ed00 	.word	0xe000ed00

08001900 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	4603      	mov	r3, r0
 8001908:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800190a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800190e:	2b00      	cmp	r3, #0
 8001910:	db0b      	blt.n	800192a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001912:	79fb      	ldrb	r3, [r7, #7]
 8001914:	f003 021f 	and.w	r2, r3, #31
 8001918:	4907      	ldr	r1, [pc, #28]	; (8001938 <__NVIC_EnableIRQ+0x38>)
 800191a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800191e:	095b      	lsrs	r3, r3, #5
 8001920:	2001      	movs	r0, #1
 8001922:	fa00 f202 	lsl.w	r2, r0, r2
 8001926:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr
 8001936:	bf00      	nop
 8001938:	e000e100 	.word	0xe000e100

0800193c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	6039      	str	r1, [r7, #0]
 8001946:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194c:	2b00      	cmp	r3, #0
 800194e:	db0a      	blt.n	8001966 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	b2da      	uxtb	r2, r3
 8001954:	490c      	ldr	r1, [pc, #48]	; (8001988 <__NVIC_SetPriority+0x4c>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	0112      	lsls	r2, r2, #4
 800195c:	b2d2      	uxtb	r2, r2
 800195e:	440b      	add	r3, r1
 8001960:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001964:	e00a      	b.n	800197c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	b2da      	uxtb	r2, r3
 800196a:	4908      	ldr	r1, [pc, #32]	; (800198c <__NVIC_SetPriority+0x50>)
 800196c:	79fb      	ldrb	r3, [r7, #7]
 800196e:	f003 030f 	and.w	r3, r3, #15
 8001972:	3b04      	subs	r3, #4
 8001974:	0112      	lsls	r2, r2, #4
 8001976:	b2d2      	uxtb	r2, r2
 8001978:	440b      	add	r3, r1
 800197a:	761a      	strb	r2, [r3, #24]
}
 800197c:	bf00      	nop
 800197e:	370c      	adds	r7, #12
 8001980:	46bd      	mov	sp, r7
 8001982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001986:	4770      	bx	lr
 8001988:	e000e100 	.word	0xe000e100
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	; 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	f003 0307 	and.w	r3, r3, #7
 80019a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	f1c3 0307 	rsb	r3, r3, #7
 80019aa:	2b04      	cmp	r3, #4
 80019ac:	bf28      	it	cs
 80019ae:	2304      	movcs	r3, #4
 80019b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	3304      	adds	r3, #4
 80019b6:	2b06      	cmp	r3, #6
 80019b8:	d902      	bls.n	80019c0 <NVIC_EncodePriority+0x30>
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	3b03      	subs	r3, #3
 80019be:	e000      	b.n	80019c2 <NVIC_EncodePriority+0x32>
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019c4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	fa02 f303 	lsl.w	r3, r2, r3
 80019ce:	43da      	mvns	r2, r3
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	401a      	ands	r2, r3
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019d8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	fa01 f303 	lsl.w	r3, r1, r3
 80019e2:	43d9      	mvns	r1, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e8:	4313      	orrs	r3, r2
         );
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3724      	adds	r7, #36	; 0x24
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr
	...

080019f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b082      	sub	sp, #8
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	3b01      	subs	r3, #1
 8001a04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a08:	d301      	bcc.n	8001a0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e00f      	b.n	8001a2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a0e:	4a0a      	ldr	r2, [pc, #40]	; (8001a38 <SysTick_Config+0x40>)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a16:	210f      	movs	r1, #15
 8001a18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001a1c:	f7ff ff8e 	bl	800193c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a20:	4b05      	ldr	r3, [pc, #20]	; (8001a38 <SysTick_Config+0x40>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a26:	4b04      	ldr	r3, [pc, #16]	; (8001a38 <SysTick_Config+0x40>)
 8001a28:	2207      	movs	r2, #7
 8001a2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	e000e010 	.word	0xe000e010

08001a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a44:	6878      	ldr	r0, [r7, #4]
 8001a46:	f7ff ff29 	bl	800189c <__NVIC_SetPriorityGrouping>
}
 8001a4a:	bf00      	nop
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b086      	sub	sp, #24
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	4603      	mov	r3, r0
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
 8001a5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a60:	2300      	movs	r3, #0
 8001a62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a64:	f7ff ff3e 	bl	80018e4 <__NVIC_GetPriorityGrouping>
 8001a68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a6a:	687a      	ldr	r2, [r7, #4]
 8001a6c:	68b9      	ldr	r1, [r7, #8]
 8001a6e:	6978      	ldr	r0, [r7, #20]
 8001a70:	f7ff ff8e 	bl	8001990 <NVIC_EncodePriority>
 8001a74:	4602      	mov	r2, r0
 8001a76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a7a:	4611      	mov	r1, r2
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff5d 	bl	800193c <__NVIC_SetPriority>
}
 8001a82:	bf00      	nop
 8001a84:	3718      	adds	r7, #24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	4603      	mov	r3, r0
 8001a92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff31 	bl	8001900 <__NVIC_EnableIRQ>
}
 8001a9e:	bf00      	nop
 8001aa0:	3708      	adds	r7, #8
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f7ff ffa2 	bl	80019f8 <SysTick_Config>
 8001ab4:	4603      	mov	r3, r0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
	...

08001ac0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001acc:	f7ff feb6 	bl	800183c <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001ad8:	2301      	movs	r3, #1
 8001ada:	e099      	b.n	8001c10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2202      	movs	r2, #2
 8001ae0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f022 0201 	bic.w	r2, r2, #1
 8001afa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001afc:	e00f      	b.n	8001b1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001afe:	f7ff fe9d 	bl	800183c <HAL_GetTick>
 8001b02:	4602      	mov	r2, r0
 8001b04:	693b      	ldr	r3, [r7, #16]
 8001b06:	1ad3      	subs	r3, r2, r3
 8001b08:	2b05      	cmp	r3, #5
 8001b0a:	d908      	bls.n	8001b1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2220      	movs	r2, #32
 8001b10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2203      	movs	r2, #3
 8001b16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b1a:	2303      	movs	r3, #3
 8001b1c:	e078      	b.n	8001c10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d1e8      	bne.n	8001afe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b34:	697a      	ldr	r2, [r7, #20]
 8001b36:	4b38      	ldr	r3, [pc, #224]	; (8001c18 <HAL_DMA_Init+0x158>)
 8001b38:	4013      	ands	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	685a      	ldr	r2, [r3, #4]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	691b      	ldr	r3, [r3, #16]
 8001b50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	699b      	ldr	r3, [r3, #24]
 8001b5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a1b      	ldr	r3, [r3, #32]
 8001b68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b6a:	697a      	ldr	r2, [r7, #20]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d107      	bne.n	8001b88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b80:	4313      	orrs	r3, r2
 8001b82:	697a      	ldr	r2, [r7, #20]
 8001b84:	4313      	orrs	r3, r2
 8001b86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	695b      	ldr	r3, [r3, #20]
 8001b96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	f023 0307 	bic.w	r3, r3, #7
 8001b9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	697a      	ldr	r2, [r7, #20]
 8001ba6:	4313      	orrs	r3, r2
 8001ba8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d117      	bne.n	8001be2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d00e      	beq.n	8001be2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f000 fadf 	bl	8002188 <DMA_CheckFifoParam>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d008      	beq.n	8001be2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2240      	movs	r2, #64	; 0x40
 8001bd4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001bde:	2301      	movs	r3, #1
 8001be0:	e016      	b.n	8001c10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001bea:	6878      	ldr	r0, [r7, #4]
 8001bec:	f000 fa96 	bl	800211c <DMA_CalcBaseAndBitshift>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001bf8:	223f      	movs	r2, #63	; 0x3f
 8001bfa:	409a      	lsls	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c0e:	2300      	movs	r3, #0
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	3718      	adds	r7, #24
 8001c14:	46bd      	mov	sp, r7
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	f010803f 	.word	0xf010803f

08001c1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b086      	sub	sp, #24
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c3a:	2b01      	cmp	r3, #1
 8001c3c:	d101      	bne.n	8001c42 <HAL_DMA_Start_IT+0x26>
 8001c3e:	2302      	movs	r3, #2
 8001c40:	e040      	b.n	8001cc4 <HAL_DMA_Start_IT+0xa8>
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	2b01      	cmp	r3, #1
 8001c54:	d12f      	bne.n	8001cb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2202      	movs	r2, #2
 8001c5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	687a      	ldr	r2, [r7, #4]
 8001c68:	68b9      	ldr	r1, [r7, #8]
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 fa28 	bl	80020c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c74:	223f      	movs	r2, #63	; 0x3f
 8001c76:	409a      	lsls	r2, r3
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0216 	orr.w	r2, r2, #22
 8001c8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d007      	beq.n	8001ca4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	681a      	ldr	r2, [r3, #0]
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f042 0208 	orr.w	r2, r2, #8
 8001ca2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	681a      	ldr	r2, [r3, #0]
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f042 0201 	orr.w	r2, r2, #1
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	e005      	b.n	8001cc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	2200      	movs	r2, #0
 8001cba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3718      	adds	r7, #24
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001cda:	f7ff fdaf 	bl	800183c <HAL_GetTick>
 8001cde:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ce6:	b2db      	uxtb	r3, r3
 8001ce8:	2b02      	cmp	r3, #2
 8001cea:	d008      	beq.n	8001cfe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2280      	movs	r2, #128	; 0x80
 8001cf0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e052      	b.n	8001da4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	681a      	ldr	r2, [r3, #0]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f022 0216 	bic.w	r2, r2, #22
 8001d0c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	695a      	ldr	r2, [r3, #20]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001d1c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d103      	bne.n	8001d2e <HAL_DMA_Abort+0x62>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d007      	beq.n	8001d3e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	681a      	ldr	r2, [r3, #0]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f022 0208 	bic.w	r2, r2, #8
 8001d3c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f022 0201 	bic.w	r2, r2, #1
 8001d4c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d4e:	e013      	b.n	8001d78 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001d50:	f7ff fd74 	bl	800183c <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b05      	cmp	r3, #5
 8001d5c:	d90c      	bls.n	8001d78 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2220      	movs	r2, #32
 8001d62:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2203      	movs	r2, #3
 8001d68:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2200      	movs	r2, #0
 8001d70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001d74:	2303      	movs	r3, #3
 8001d76:	e015      	b.n	8001da4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 0301 	and.w	r3, r3, #1
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d1e4      	bne.n	8001d50 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8a:	223f      	movs	r2, #63	; 0x3f
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2201      	movs	r2, #1
 8001d96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3710      	adds	r7, #16
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}

08001dac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b086      	sub	sp, #24
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001db4:	2300      	movs	r3, #0
 8001db6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001db8:	4b8e      	ldr	r3, [pc, #568]	; (8001ff4 <HAL_DMA_IRQHandler+0x248>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a8e      	ldr	r2, [pc, #568]	; (8001ff8 <HAL_DMA_IRQHandler+0x24c>)
 8001dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc2:	0a9b      	lsrs	r3, r3, #10
 8001dc4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd6:	2208      	movs	r2, #8
 8001dd8:	409a      	lsls	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d01a      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 0304 	and.w	r3, r3, #4
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d013      	beq.n	8001e18 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f022 0204 	bic.w	r2, r2, #4
 8001dfe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e04:	2208      	movs	r2, #8
 8001e06:	409a      	lsls	r2, r3
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e10:	f043 0201 	orr.w	r2, r3, #1
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	409a      	lsls	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	4013      	ands	r3, r2
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d012      	beq.n	8001e4e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	695b      	ldr	r3, [r3, #20]
 8001e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d00b      	beq.n	8001e4e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	409a      	lsls	r2, r3
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e46:	f043 0202 	orr.w	r2, r3, #2
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e52:	2204      	movs	r2, #4
 8001e54:	409a      	lsls	r2, r3
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	4013      	ands	r3, r2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d012      	beq.n	8001e84 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 0302 	and.w	r3, r3, #2
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d00b      	beq.n	8001e84 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	2204      	movs	r2, #4
 8001e72:	409a      	lsls	r2, r3
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7c:	f043 0204 	orr.w	r2, r3, #4
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e88:	2210      	movs	r2, #16
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d043      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0308 	and.w	r3, r3, #8
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d03c      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea6:	2210      	movs	r2, #16
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d018      	beq.n	8001eee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d108      	bne.n	8001edc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d024      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	4798      	blx	r3
 8001eda:	e01f      	b.n	8001f1c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d01b      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee8:	6878      	ldr	r0, [r7, #4]
 8001eea:	4798      	blx	r3
 8001eec:	e016      	b.n	8001f1c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d107      	bne.n	8001f0c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f022 0208 	bic.w	r2, r2, #8
 8001f0a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d003      	beq.n	8001f1c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	6878      	ldr	r0, [r7, #4]
 8001f1a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f20:	2220      	movs	r2, #32
 8001f22:	409a      	lsls	r2, r3
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	4013      	ands	r3, r2
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	f000 808f 	beq.w	800204c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 8087 	beq.w	800204c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	2220      	movs	r2, #32
 8001f44:	409a      	lsls	r2, r3
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b05      	cmp	r3, #5
 8001f54:	d136      	bne.n	8001fc4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	681a      	ldr	r2, [r3, #0]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f022 0216 	bic.w	r2, r2, #22
 8001f64:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	695a      	ldr	r2, [r3, #20]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f74:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d103      	bne.n	8001f86 <HAL_DMA_IRQHandler+0x1da>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d007      	beq.n	8001f96 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0208 	bic.w	r2, r2, #8
 8001f94:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f9a:	223f      	movs	r2, #63	; 0x3f
 8001f9c:	409a      	lsls	r2, r3
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2200      	movs	r2, #0
 8001fae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d07e      	beq.n	80020b8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	4798      	blx	r3
        }
        return;
 8001fc2:	e079      	b.n	80020b8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d01d      	beq.n	800200e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d10d      	bne.n	8001ffc <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d031      	beq.n	800204c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	4798      	blx	r3
 8001ff0:	e02c      	b.n	800204c <HAL_DMA_IRQHandler+0x2a0>
 8001ff2:	bf00      	nop
 8001ff4:	20000000 	.word	0x20000000
 8001ff8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002000:	2b00      	cmp	r3, #0
 8002002:	d023      	beq.n	800204c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	4798      	blx	r3
 800200c:	e01e      	b.n	800204c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002018:	2b00      	cmp	r3, #0
 800201a:	d10f      	bne.n	800203c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f022 0210 	bic.w	r2, r2, #16
 800202a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2201      	movs	r2, #1
 8002030:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002040:	2b00      	cmp	r3, #0
 8002042:	d003      	beq.n	800204c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002048:	6878      	ldr	r0, [r7, #4]
 800204a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002050:	2b00      	cmp	r3, #0
 8002052:	d032      	beq.n	80020ba <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002058:	f003 0301 	and.w	r3, r3, #1
 800205c:	2b00      	cmp	r3, #0
 800205e:	d022      	beq.n	80020a6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2205      	movs	r2, #5
 8002064:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f022 0201 	bic.w	r2, r2, #1
 8002076:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	3301      	adds	r3, #1
 800207c:	60bb      	str	r3, [r7, #8]
 800207e:	697a      	ldr	r2, [r7, #20]
 8002080:	429a      	cmp	r2, r3
 8002082:	d307      	bcc.n	8002094 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0301 	and.w	r3, r3, #1
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1f2      	bne.n	8002078 <HAL_DMA_IRQHandler+0x2cc>
 8002092:	e000      	b.n	8002096 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002094:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2200      	movs	r2, #0
 80020a2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d005      	beq.n	80020ba <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	4798      	blx	r3
 80020b6:	e000      	b.n	80020ba <HAL_DMA_IRQHandler+0x30e>
        return;
 80020b8:	bf00      	nop
    }
  }
}
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}

080020c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020c0:	b480      	push	{r7}
 80020c2:	b085      	sub	sp, #20
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	60f8      	str	r0, [r7, #12]
 80020c8:	60b9      	str	r1, [r7, #8]
 80020ca:	607a      	str	r2, [r7, #4]
 80020cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	689b      	ldr	r3, [r3, #8]
 80020ea:	2b40      	cmp	r3, #64	; 0x40
 80020ec:	d108      	bne.n	8002100 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	68ba      	ldr	r2, [r7, #8]
 80020fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80020fe:	e007      	b.n	8002110 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68ba      	ldr	r2, [r7, #8]
 8002106:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	687a      	ldr	r2, [r7, #4]
 800210e:	60da      	str	r2, [r3, #12]
}
 8002110:	bf00      	nop
 8002112:	3714      	adds	r7, #20
 8002114:	46bd      	mov	sp, r7
 8002116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211a:	4770      	bx	lr

0800211c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800211c:	b480      	push	{r7}
 800211e:	b085      	sub	sp, #20
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	b2db      	uxtb	r3, r3
 800212a:	3b10      	subs	r3, #16
 800212c:	4a14      	ldr	r2, [pc, #80]	; (8002180 <DMA_CalcBaseAndBitshift+0x64>)
 800212e:	fba2 2303 	umull	r2, r3, r2, r3
 8002132:	091b      	lsrs	r3, r3, #4
 8002134:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002136:	4a13      	ldr	r2, [pc, #76]	; (8002184 <DMA_CalcBaseAndBitshift+0x68>)
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	4413      	add	r3, r2
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	2b03      	cmp	r3, #3
 8002148:	d909      	bls.n	800215e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002152:	f023 0303 	bic.w	r3, r3, #3
 8002156:	1d1a      	adds	r2, r3, #4
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	659a      	str	r2, [r3, #88]	; 0x58
 800215c:	e007      	b.n	800216e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002166:	f023 0303 	bic.w	r3, r3, #3
 800216a:	687a      	ldr	r2, [r7, #4]
 800216c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002172:	4618      	mov	r0, r3
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	aaaaaaab 	.word	0xaaaaaaab
 8002184:	0800dd74 	.word	0x0800dd74

08002188 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002190:	2300      	movs	r3, #0
 8002192:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	699b      	ldr	r3, [r3, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d11f      	bne.n	80021e2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d856      	bhi.n	8002256 <DMA_CheckFifoParam+0xce>
 80021a8:	a201      	add	r2, pc, #4	; (adr r2, 80021b0 <DMA_CheckFifoParam+0x28>)
 80021aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ae:	bf00      	nop
 80021b0:	080021c1 	.word	0x080021c1
 80021b4:	080021d3 	.word	0x080021d3
 80021b8:	080021c1 	.word	0x080021c1
 80021bc:	08002257 	.word	0x08002257
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d046      	beq.n	800225a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021cc:	2301      	movs	r3, #1
 80021ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021d0:	e043      	b.n	800225a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021da:	d140      	bne.n	800225e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021e0:	e03d      	b.n	800225e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	699b      	ldr	r3, [r3, #24]
 80021e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021ea:	d121      	bne.n	8002230 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	2b03      	cmp	r3, #3
 80021f0:	d837      	bhi.n	8002262 <DMA_CheckFifoParam+0xda>
 80021f2:	a201      	add	r2, pc, #4	; (adr r2, 80021f8 <DMA_CheckFifoParam+0x70>)
 80021f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f8:	08002209 	.word	0x08002209
 80021fc:	0800220f 	.word	0x0800220f
 8002200:	08002209 	.word	0x08002209
 8002204:	08002221 	.word	0x08002221
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002208:	2301      	movs	r3, #1
 800220a:	73fb      	strb	r3, [r7, #15]
      break;
 800220c:	e030      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002212:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d025      	beq.n	8002266 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800221e:	e022      	b.n	8002266 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002224:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002228:	d11f      	bne.n	800226a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800222e:	e01c      	b.n	800226a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	2b02      	cmp	r3, #2
 8002234:	d903      	bls.n	800223e <DMA_CheckFifoParam+0xb6>
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	2b03      	cmp	r3, #3
 800223a:	d003      	beq.n	8002244 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800223c:	e018      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	73fb      	strb	r3, [r7, #15]
      break;
 8002242:	e015      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00e      	beq.n	800226e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	73fb      	strb	r3, [r7, #15]
      break;
 8002254:	e00b      	b.n	800226e <DMA_CheckFifoParam+0xe6>
      break;
 8002256:	bf00      	nop
 8002258:	e00a      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      break;
 800225a:	bf00      	nop
 800225c:	e008      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      break;
 800225e:	bf00      	nop
 8002260:	e006      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      break;
 8002262:	bf00      	nop
 8002264:	e004      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      break;
 8002266:	bf00      	nop
 8002268:	e002      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      break;   
 800226a:	bf00      	nop
 800226c:	e000      	b.n	8002270 <DMA_CheckFifoParam+0xe8>
      break;
 800226e:	bf00      	nop
    }
  } 
  
  return status; 
 8002270:	7bfb      	ldrb	r3, [r7, #15]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3714      	adds	r7, #20
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop

08002280 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002280:	b480      	push	{r7}
 8002282:	b089      	sub	sp, #36	; 0x24
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
 8002288:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800228a:	2300      	movs	r3, #0
 800228c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800228e:	2300      	movs	r3, #0
 8002290:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002296:	2300      	movs	r3, #0
 8002298:	61fb      	str	r3, [r7, #28]
 800229a:	e16b      	b.n	8002574 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800229c:	2201      	movs	r2, #1
 800229e:	69fb      	ldr	r3, [r7, #28]
 80022a0:	fa02 f303 	lsl.w	r3, r2, r3
 80022a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	697a      	ldr	r2, [r7, #20]
 80022ac:	4013      	ands	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022b0:	693a      	ldr	r2, [r7, #16]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	429a      	cmp	r2, r3
 80022b6:	f040 815a 	bne.w	800256e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ba:	683b      	ldr	r3, [r7, #0]
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	2b01      	cmp	r3, #1
 80022c4:	d005      	beq.n	80022d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d130      	bne.n	8002334 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	689b      	ldr	r3, [r3, #8]
 80022d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	005b      	lsls	r3, r3, #1
 80022dc:	2203      	movs	r2, #3
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	68da      	ldr	r2, [r3, #12]
 80022ee:	69fb      	ldr	r3, [r7, #28]
 80022f0:	005b      	lsls	r3, r3, #1
 80022f2:	fa02 f303 	lsl.w	r3, r2, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	685b      	ldr	r3, [r3, #4]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002308:	2201      	movs	r2, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	43db      	mvns	r3, r3
 8002312:	69ba      	ldr	r2, [r7, #24]
 8002314:	4013      	ands	r3, r2
 8002316:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 0201 	and.w	r2, r3, #1
 8002322:	69fb      	ldr	r3, [r7, #28]
 8002324:	fa02 f303 	lsl.w	r3, r2, r3
 8002328:	69ba      	ldr	r2, [r7, #24]
 800232a:	4313      	orrs	r3, r2
 800232c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f003 0303 	and.w	r3, r3, #3
 800233c:	2b03      	cmp	r3, #3
 800233e:	d017      	beq.n	8002370 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	68db      	ldr	r3, [r3, #12]
 8002344:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	2203      	movs	r2, #3
 800234c:	fa02 f303 	lsl.w	r3, r2, r3
 8002350:	43db      	mvns	r3, r3
 8002352:	69ba      	ldr	r2, [r7, #24]
 8002354:	4013      	ands	r3, r2
 8002356:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	689a      	ldr	r2, [r3, #8]
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	fa02 f303 	lsl.w	r3, r2, r3
 8002364:	69ba      	ldr	r2, [r7, #24]
 8002366:	4313      	orrs	r3, r2
 8002368:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	f003 0303 	and.w	r3, r3, #3
 8002378:	2b02      	cmp	r3, #2
 800237a:	d123      	bne.n	80023c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	08da      	lsrs	r2, r3, #3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3208      	adds	r2, #8
 8002384:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002388:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800238a:	69fb      	ldr	r3, [r7, #28]
 800238c:	f003 0307 	and.w	r3, r3, #7
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	220f      	movs	r2, #15
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	43db      	mvns	r3, r3
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	4013      	ands	r3, r2
 800239e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691a      	ldr	r2, [r3, #16]
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	f003 0307 	and.w	r3, r3, #7
 80023aa:	009b      	lsls	r3, r3, #2
 80023ac:	fa02 f303 	lsl.w	r3, r2, r3
 80023b0:	69ba      	ldr	r2, [r7, #24]
 80023b2:	4313      	orrs	r3, r2
 80023b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	08da      	lsrs	r2, r3, #3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	3208      	adds	r2, #8
 80023be:	69b9      	ldr	r1, [r7, #24]
 80023c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	2203      	movs	r2, #3
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	43db      	mvns	r3, r3
 80023d6:	69ba      	ldr	r2, [r7, #24]
 80023d8:	4013      	ands	r3, r2
 80023da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 0203 	and.w	r2, r3, #3
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	005b      	lsls	r3, r3, #1
 80023e8:	fa02 f303 	lsl.w	r3, r2, r3
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	685b      	ldr	r3, [r3, #4]
 80023fc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002400:	2b00      	cmp	r3, #0
 8002402:	f000 80b4 	beq.w	800256e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002406:	2300      	movs	r3, #0
 8002408:	60fb      	str	r3, [r7, #12]
 800240a:	4b60      	ldr	r3, [pc, #384]	; (800258c <HAL_GPIO_Init+0x30c>)
 800240c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800240e:	4a5f      	ldr	r2, [pc, #380]	; (800258c <HAL_GPIO_Init+0x30c>)
 8002410:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002414:	6453      	str	r3, [r2, #68]	; 0x44
 8002416:	4b5d      	ldr	r3, [pc, #372]	; (800258c <HAL_GPIO_Init+0x30c>)
 8002418:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800241a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002422:	4a5b      	ldr	r2, [pc, #364]	; (8002590 <HAL_GPIO_Init+0x310>)
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	089b      	lsrs	r3, r3, #2
 8002428:	3302      	adds	r3, #2
 800242a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800242e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	009b      	lsls	r3, r3, #2
 8002438:	220f      	movs	r2, #15
 800243a:	fa02 f303 	lsl.w	r3, r2, r3
 800243e:	43db      	mvns	r3, r3
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	4013      	ands	r3, r2
 8002444:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a52      	ldr	r2, [pc, #328]	; (8002594 <HAL_GPIO_Init+0x314>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d02b      	beq.n	80024a6 <HAL_GPIO_Init+0x226>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a51      	ldr	r2, [pc, #324]	; (8002598 <HAL_GPIO_Init+0x318>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d025      	beq.n	80024a2 <HAL_GPIO_Init+0x222>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a50      	ldr	r2, [pc, #320]	; (800259c <HAL_GPIO_Init+0x31c>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d01f      	beq.n	800249e <HAL_GPIO_Init+0x21e>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a4f      	ldr	r2, [pc, #316]	; (80025a0 <HAL_GPIO_Init+0x320>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d019      	beq.n	800249a <HAL_GPIO_Init+0x21a>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a4e      	ldr	r2, [pc, #312]	; (80025a4 <HAL_GPIO_Init+0x324>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d013      	beq.n	8002496 <HAL_GPIO_Init+0x216>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a4d      	ldr	r2, [pc, #308]	; (80025a8 <HAL_GPIO_Init+0x328>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d00d      	beq.n	8002492 <HAL_GPIO_Init+0x212>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a4c      	ldr	r2, [pc, #304]	; (80025ac <HAL_GPIO_Init+0x32c>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d007      	beq.n	800248e <HAL_GPIO_Init+0x20e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a4b      	ldr	r2, [pc, #300]	; (80025b0 <HAL_GPIO_Init+0x330>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d101      	bne.n	800248a <HAL_GPIO_Init+0x20a>
 8002486:	2307      	movs	r3, #7
 8002488:	e00e      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 800248a:	2308      	movs	r3, #8
 800248c:	e00c      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 800248e:	2306      	movs	r3, #6
 8002490:	e00a      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 8002492:	2305      	movs	r3, #5
 8002494:	e008      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 8002496:	2304      	movs	r3, #4
 8002498:	e006      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 800249a:	2303      	movs	r3, #3
 800249c:	e004      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 800249e:	2302      	movs	r3, #2
 80024a0:	e002      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 80024a2:	2301      	movs	r3, #1
 80024a4:	e000      	b.n	80024a8 <HAL_GPIO_Init+0x228>
 80024a6:	2300      	movs	r3, #0
 80024a8:	69fa      	ldr	r2, [r7, #28]
 80024aa:	f002 0203 	and.w	r2, r2, #3
 80024ae:	0092      	lsls	r2, r2, #2
 80024b0:	4093      	lsls	r3, r2
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	4313      	orrs	r3, r2
 80024b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024b8:	4935      	ldr	r1, [pc, #212]	; (8002590 <HAL_GPIO_Init+0x310>)
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	089b      	lsrs	r3, r3, #2
 80024be:	3302      	adds	r3, #2
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024c6:	4b3b      	ldr	r3, [pc, #236]	; (80025b4 <HAL_GPIO_Init+0x334>)
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	43db      	mvns	r3, r3
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	4013      	ands	r3, r2
 80024d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024d6:	683b      	ldr	r3, [r7, #0]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d003      	beq.n	80024ea <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	4313      	orrs	r3, r2
 80024e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ea:	4a32      	ldr	r2, [pc, #200]	; (80025b4 <HAL_GPIO_Init+0x334>)
 80024ec:	69bb      	ldr	r3, [r7, #24]
 80024ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024f0:	4b30      	ldr	r3, [pc, #192]	; (80025b4 <HAL_GPIO_Init+0x334>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024f6:	693b      	ldr	r3, [r7, #16]
 80024f8:	43db      	mvns	r3, r3
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	4013      	ands	r3, r2
 80024fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d003      	beq.n	8002514 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4313      	orrs	r3, r2
 8002512:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002514:	4a27      	ldr	r2, [pc, #156]	; (80025b4 <HAL_GPIO_Init+0x334>)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800251a:	4b26      	ldr	r3, [pc, #152]	; (80025b4 <HAL_GPIO_Init+0x334>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	4313      	orrs	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800253e:	4a1d      	ldr	r2, [pc, #116]	; (80025b4 <HAL_GPIO_Init+0x334>)
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002544:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <HAL_GPIO_Init+0x334>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002568:	4a12      	ldr	r2, [pc, #72]	; (80025b4 <HAL_GPIO_Init+0x334>)
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	3301      	adds	r3, #1
 8002572:	61fb      	str	r3, [r7, #28]
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	2b0f      	cmp	r3, #15
 8002578:	f67f ae90 	bls.w	800229c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800257c:	bf00      	nop
 800257e:	bf00      	nop
 8002580:	3724      	adds	r7, #36	; 0x24
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40023800 	.word	0x40023800
 8002590:	40013800 	.word	0x40013800
 8002594:	40020000 	.word	0x40020000
 8002598:	40020400 	.word	0x40020400
 800259c:	40020800 	.word	0x40020800
 80025a0:	40020c00 	.word	0x40020c00
 80025a4:	40021000 	.word	0x40021000
 80025a8:	40021400 	.word	0x40021400
 80025ac:	40021800 	.word	0x40021800
 80025b0:	40021c00 	.word	0x40021c00
 80025b4:	40013c00 	.word	0x40013c00

080025b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b085      	sub	sp, #20
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	691a      	ldr	r2, [r3, #16]
 80025c8:	887b      	ldrh	r3, [r7, #2]
 80025ca:	4013      	ands	r3, r2
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d002      	beq.n	80025d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
 80025d4:	e001      	b.n	80025da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80025d6:	2300      	movs	r3, #0
 80025d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80025da:	7bfb      	ldrb	r3, [r7, #15]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3714      	adds	r7, #20
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b083      	sub	sp, #12
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	807b      	strh	r3, [r7, #2]
 80025f4:	4613      	mov	r3, r2
 80025f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f8:	787b      	ldrb	r3, [r7, #1]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025fe:	887a      	ldrh	r2, [r7, #2]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002604:	e003      	b.n	800260e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002606:	887b      	ldrh	r3, [r7, #2]
 8002608:	041a      	lsls	r2, r3, #16
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	619a      	str	r2, [r3, #24]
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800261a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800261c:	b08f      	sub	sp, #60	; 0x3c
 800261e:	af0a      	add	r7, sp, #40	; 0x28
 8002620:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e054      	b.n	80026d6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002638:	b2db      	uxtb	r3, r3
 800263a:	2b00      	cmp	r3, #0
 800263c:	d106      	bne.n	800264c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2200      	movs	r2, #0
 8002642:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f00a ff06 	bl	800d458 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2203      	movs	r2, #3
 8002650:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002658:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800265c:	2b00      	cmp	r3, #0
 800265e:	d102      	bne.n	8002666 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f004 fa74 	bl	8006b58 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	603b      	str	r3, [r7, #0]
 8002676:	687e      	ldr	r6, [r7, #4]
 8002678:	466d      	mov	r5, sp
 800267a:	f106 0410 	add.w	r4, r6, #16
 800267e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002680:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002682:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002684:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002686:	e894 0003 	ldmia.w	r4, {r0, r1}
 800268a:	e885 0003 	stmia.w	r5, {r0, r1}
 800268e:	1d33      	adds	r3, r6, #4
 8002690:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002692:	6838      	ldr	r0, [r7, #0]
 8002694:	f004 f9ee 	bl	8006a74 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	2101      	movs	r1, #1
 800269e:	4618      	mov	r0, r3
 80026a0:	f004 fa6b 	bl	8006b7a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	603b      	str	r3, [r7, #0]
 80026aa:	687e      	ldr	r6, [r7, #4]
 80026ac:	466d      	mov	r5, sp
 80026ae:	f106 0410 	add.w	r4, r6, #16
 80026b2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026b4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026ba:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026be:	e885 0003 	stmia.w	r5, {r0, r1}
 80026c2:	1d33      	adds	r3, r6, #4
 80026c4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026c6:	6838      	ldr	r0, [r7, #0]
 80026c8:	f004 fbf4 	bl	8006eb4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2201      	movs	r2, #1
 80026d0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3714      	adds	r7, #20
 80026da:	46bd      	mov	sp, r7
 80026dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080026de <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80026de:	b590      	push	{r4, r7, lr}
 80026e0:	b089      	sub	sp, #36	; 0x24
 80026e2:	af04      	add	r7, sp, #16
 80026e4:	6078      	str	r0, [r7, #4]
 80026e6:	4608      	mov	r0, r1
 80026e8:	4611      	mov	r1, r2
 80026ea:	461a      	mov	r2, r3
 80026ec:	4603      	mov	r3, r0
 80026ee:	70fb      	strb	r3, [r7, #3]
 80026f0:	460b      	mov	r3, r1
 80026f2:	70bb      	strb	r3, [r7, #2]
 80026f4:	4613      	mov	r3, r2
 80026f6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80026fe:	2b01      	cmp	r3, #1
 8002700:	d101      	bne.n	8002706 <HAL_HCD_HC_Init+0x28>
 8002702:	2302      	movs	r3, #2
 8002704:	e076      	b.n	80027f4 <HAL_HCD_HC_Init+0x116>
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2201      	movs	r2, #1
 800270a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 800270e:	78fb      	ldrb	r3, [r7, #3]
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	212c      	movs	r1, #44	; 0x2c
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	4413      	add	r3, r2
 800271a:	333d      	adds	r3, #61	; 0x3d
 800271c:	2200      	movs	r2, #0
 800271e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002720:	78fb      	ldrb	r3, [r7, #3]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	212c      	movs	r1, #44	; 0x2c
 8002726:	fb01 f303 	mul.w	r3, r1, r3
 800272a:	4413      	add	r3, r2
 800272c:	3338      	adds	r3, #56	; 0x38
 800272e:	787a      	ldrb	r2, [r7, #1]
 8002730:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002732:	78fb      	ldrb	r3, [r7, #3]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	212c      	movs	r1, #44	; 0x2c
 8002738:	fb01 f303 	mul.w	r3, r1, r3
 800273c:	4413      	add	r3, r2
 800273e:	3340      	adds	r3, #64	; 0x40
 8002740:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002742:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002744:	78fb      	ldrb	r3, [r7, #3]
 8002746:	687a      	ldr	r2, [r7, #4]
 8002748:	212c      	movs	r1, #44	; 0x2c
 800274a:	fb01 f303 	mul.w	r3, r1, r3
 800274e:	4413      	add	r3, r2
 8002750:	3339      	adds	r3, #57	; 0x39
 8002752:	78fa      	ldrb	r2, [r7, #3]
 8002754:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002756:	78fb      	ldrb	r3, [r7, #3]
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	212c      	movs	r1, #44	; 0x2c
 800275c:	fb01 f303 	mul.w	r3, r1, r3
 8002760:	4413      	add	r3, r2
 8002762:	333f      	adds	r3, #63	; 0x3f
 8002764:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002768:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	78ba      	ldrb	r2, [r7, #2]
 800276e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002772:	b2d0      	uxtb	r0, r2
 8002774:	687a      	ldr	r2, [r7, #4]
 8002776:	212c      	movs	r1, #44	; 0x2c
 8002778:	fb01 f303 	mul.w	r3, r1, r3
 800277c:	4413      	add	r3, r2
 800277e:	333a      	adds	r3, #58	; 0x3a
 8002780:	4602      	mov	r2, r0
 8002782:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002784:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002788:	2b00      	cmp	r3, #0
 800278a:	da09      	bge.n	80027a0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	212c      	movs	r1, #44	; 0x2c
 8002792:	fb01 f303 	mul.w	r3, r1, r3
 8002796:	4413      	add	r3, r2
 8002798:	333b      	adds	r3, #59	; 0x3b
 800279a:	2201      	movs	r2, #1
 800279c:	701a      	strb	r2, [r3, #0]
 800279e:	e008      	b.n	80027b2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 80027a0:	78fb      	ldrb	r3, [r7, #3]
 80027a2:	687a      	ldr	r2, [r7, #4]
 80027a4:	212c      	movs	r1, #44	; 0x2c
 80027a6:	fb01 f303 	mul.w	r3, r1, r3
 80027aa:	4413      	add	r3, r2
 80027ac:	333b      	adds	r3, #59	; 0x3b
 80027ae:	2200      	movs	r2, #0
 80027b0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80027b2:	78fb      	ldrb	r3, [r7, #3]
 80027b4:	687a      	ldr	r2, [r7, #4]
 80027b6:	212c      	movs	r1, #44	; 0x2c
 80027b8:	fb01 f303 	mul.w	r3, r1, r3
 80027bc:	4413      	add	r3, r2
 80027be:	333c      	adds	r3, #60	; 0x3c
 80027c0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80027c4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6818      	ldr	r0, [r3, #0]
 80027ca:	787c      	ldrb	r4, [r7, #1]
 80027cc:	78ba      	ldrb	r2, [r7, #2]
 80027ce:	78f9      	ldrb	r1, [r7, #3]
 80027d0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80027d2:	9302      	str	r3, [sp, #8]
 80027d4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80027d8:	9301      	str	r3, [sp, #4]
 80027da:	f897 3020 	ldrb.w	r3, [r7, #32]
 80027de:	9300      	str	r3, [sp, #0]
 80027e0:	4623      	mov	r3, r4
 80027e2:	f004 fced 	bl	80071c0 <USB_HC_Init>
 80027e6:	4603      	mov	r3, r0
 80027e8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80027f4:	4618      	mov	r0, r3
 80027f6:	3714      	adds	r7, #20
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd90      	pop	{r4, r7, pc}

080027fc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	460b      	mov	r3, r1
 8002806:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002812:	2b01      	cmp	r3, #1
 8002814:	d101      	bne.n	800281a <HAL_HCD_HC_Halt+0x1e>
 8002816:	2302      	movs	r3, #2
 8002818:	e00f      	b.n	800283a <HAL_HCD_HC_Halt+0x3e>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	2201      	movs	r2, #1
 800281e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	4611      	mov	r1, r2
 800282a:	4618      	mov	r0, r3
 800282c:	f004 ff3d 	bl	80076aa <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002838:	7bfb      	ldrb	r3, [r7, #15]
}
 800283a:	4618      	mov	r0, r3
 800283c:	3710      	adds	r7, #16
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	4608      	mov	r0, r1
 800284e:	4611      	mov	r1, r2
 8002850:	461a      	mov	r2, r3
 8002852:	4603      	mov	r3, r0
 8002854:	70fb      	strb	r3, [r7, #3]
 8002856:	460b      	mov	r3, r1
 8002858:	70bb      	strb	r3, [r7, #2]
 800285a:	4613      	mov	r3, r2
 800285c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800285e:	78fb      	ldrb	r3, [r7, #3]
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	212c      	movs	r1, #44	; 0x2c
 8002864:	fb01 f303 	mul.w	r3, r1, r3
 8002868:	4413      	add	r3, r2
 800286a:	333b      	adds	r3, #59	; 0x3b
 800286c:	78ba      	ldrb	r2, [r7, #2]
 800286e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002870:	78fb      	ldrb	r3, [r7, #3]
 8002872:	687a      	ldr	r2, [r7, #4]
 8002874:	212c      	movs	r1, #44	; 0x2c
 8002876:	fb01 f303 	mul.w	r3, r1, r3
 800287a:	4413      	add	r3, r2
 800287c:	333f      	adds	r3, #63	; 0x3f
 800287e:	787a      	ldrb	r2, [r7, #1]
 8002880:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002882:	7c3b      	ldrb	r3, [r7, #16]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d112      	bne.n	80028ae <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	687a      	ldr	r2, [r7, #4]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	3342      	adds	r3, #66	; 0x42
 8002896:	2203      	movs	r2, #3
 8002898:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	687a      	ldr	r2, [r7, #4]
 800289e:	212c      	movs	r1, #44	; 0x2c
 80028a0:	fb01 f303 	mul.w	r3, r1, r3
 80028a4:	4413      	add	r3, r2
 80028a6:	333d      	adds	r3, #61	; 0x3d
 80028a8:	7f3a      	ldrb	r2, [r7, #28]
 80028aa:	701a      	strb	r2, [r3, #0]
 80028ac:	e008      	b.n	80028c0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80028ae:	78fb      	ldrb	r3, [r7, #3]
 80028b0:	687a      	ldr	r2, [r7, #4]
 80028b2:	212c      	movs	r1, #44	; 0x2c
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	3342      	adds	r3, #66	; 0x42
 80028bc:	2202      	movs	r2, #2
 80028be:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80028c0:	787b      	ldrb	r3, [r7, #1]
 80028c2:	2b03      	cmp	r3, #3
 80028c4:	f200 80c6 	bhi.w	8002a54 <HAL_HCD_HC_SubmitRequest+0x210>
 80028c8:	a201      	add	r2, pc, #4	; (adr r2, 80028d0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80028ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ce:	bf00      	nop
 80028d0:	080028e1 	.word	0x080028e1
 80028d4:	08002a41 	.word	0x08002a41
 80028d8:	08002945 	.word	0x08002945
 80028dc:	080029c3 	.word	0x080029c3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80028e0:	7c3b      	ldrb	r3, [r7, #16]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	f040 80b8 	bne.w	8002a58 <HAL_HCD_HC_SubmitRequest+0x214>
 80028e8:	78bb      	ldrb	r3, [r7, #2]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	f040 80b4 	bne.w	8002a58 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80028f0:	8b3b      	ldrh	r3, [r7, #24]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d108      	bne.n	8002908 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80028f6:	78fb      	ldrb	r3, [r7, #3]
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	212c      	movs	r1, #44	; 0x2c
 80028fc:	fb01 f303 	mul.w	r3, r1, r3
 8002900:	4413      	add	r3, r2
 8002902:	3355      	adds	r3, #85	; 0x55
 8002904:	2201      	movs	r2, #1
 8002906:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002908:	78fb      	ldrb	r3, [r7, #3]
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	3355      	adds	r3, #85	; 0x55
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d109      	bne.n	8002930 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	687a      	ldr	r2, [r7, #4]
 8002920:	212c      	movs	r1, #44	; 0x2c
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	4413      	add	r3, r2
 8002928:	3342      	adds	r3, #66	; 0x42
 800292a:	2200      	movs	r2, #0
 800292c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800292e:	e093      	b.n	8002a58 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002930:	78fb      	ldrb	r3, [r7, #3]
 8002932:	687a      	ldr	r2, [r7, #4]
 8002934:	212c      	movs	r1, #44	; 0x2c
 8002936:	fb01 f303 	mul.w	r3, r1, r3
 800293a:	4413      	add	r3, r2
 800293c:	3342      	adds	r3, #66	; 0x42
 800293e:	2202      	movs	r2, #2
 8002940:	701a      	strb	r2, [r3, #0]
      break;
 8002942:	e089      	b.n	8002a58 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002944:	78bb      	ldrb	r3, [r7, #2]
 8002946:	2b00      	cmp	r3, #0
 8002948:	d11d      	bne.n	8002986 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800294a:	78fb      	ldrb	r3, [r7, #3]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	212c      	movs	r1, #44	; 0x2c
 8002950:	fb01 f303 	mul.w	r3, r1, r3
 8002954:	4413      	add	r3, r2
 8002956:	3355      	adds	r3, #85	; 0x55
 8002958:	781b      	ldrb	r3, [r3, #0]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d109      	bne.n	8002972 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800295e:	78fb      	ldrb	r3, [r7, #3]
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	212c      	movs	r1, #44	; 0x2c
 8002964:	fb01 f303 	mul.w	r3, r1, r3
 8002968:	4413      	add	r3, r2
 800296a:	3342      	adds	r3, #66	; 0x42
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002970:	e073      	b.n	8002a5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002972:	78fb      	ldrb	r3, [r7, #3]
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	212c      	movs	r1, #44	; 0x2c
 8002978:	fb01 f303 	mul.w	r3, r1, r3
 800297c:	4413      	add	r3, r2
 800297e:	3342      	adds	r3, #66	; 0x42
 8002980:	2202      	movs	r2, #2
 8002982:	701a      	strb	r2, [r3, #0]
      break;
 8002984:	e069      	b.n	8002a5a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002986:	78fb      	ldrb	r3, [r7, #3]
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	212c      	movs	r1, #44	; 0x2c
 800298c:	fb01 f303 	mul.w	r3, r1, r3
 8002990:	4413      	add	r3, r2
 8002992:	3354      	adds	r3, #84	; 0x54
 8002994:	781b      	ldrb	r3, [r3, #0]
 8002996:	2b00      	cmp	r3, #0
 8002998:	d109      	bne.n	80029ae <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800299a:	78fb      	ldrb	r3, [r7, #3]
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	212c      	movs	r1, #44	; 0x2c
 80029a0:	fb01 f303 	mul.w	r3, r1, r3
 80029a4:	4413      	add	r3, r2
 80029a6:	3342      	adds	r3, #66	; 0x42
 80029a8:	2200      	movs	r2, #0
 80029aa:	701a      	strb	r2, [r3, #0]
      break;
 80029ac:	e055      	b.n	8002a5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029ae:	78fb      	ldrb	r3, [r7, #3]
 80029b0:	687a      	ldr	r2, [r7, #4]
 80029b2:	212c      	movs	r1, #44	; 0x2c
 80029b4:	fb01 f303 	mul.w	r3, r1, r3
 80029b8:	4413      	add	r3, r2
 80029ba:	3342      	adds	r3, #66	; 0x42
 80029bc:	2202      	movs	r2, #2
 80029be:	701a      	strb	r2, [r3, #0]
      break;
 80029c0:	e04b      	b.n	8002a5a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80029c2:	78bb      	ldrb	r3, [r7, #2]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d11d      	bne.n	8002a04 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	212c      	movs	r1, #44	; 0x2c
 80029ce:	fb01 f303 	mul.w	r3, r1, r3
 80029d2:	4413      	add	r3, r2
 80029d4:	3355      	adds	r3, #85	; 0x55
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d109      	bne.n	80029f0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80029dc:	78fb      	ldrb	r3, [r7, #3]
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	212c      	movs	r1, #44	; 0x2c
 80029e2:	fb01 f303 	mul.w	r3, r1, r3
 80029e6:	4413      	add	r3, r2
 80029e8:	3342      	adds	r3, #66	; 0x42
 80029ea:	2200      	movs	r2, #0
 80029ec:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80029ee:	e034      	b.n	8002a5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	212c      	movs	r1, #44	; 0x2c
 80029f6:	fb01 f303 	mul.w	r3, r1, r3
 80029fa:	4413      	add	r3, r2
 80029fc:	3342      	adds	r3, #66	; 0x42
 80029fe:	2202      	movs	r2, #2
 8002a00:	701a      	strb	r2, [r3, #0]
      break;
 8002a02:	e02a      	b.n	8002a5a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	687a      	ldr	r2, [r7, #4]
 8002a08:	212c      	movs	r1, #44	; 0x2c
 8002a0a:	fb01 f303 	mul.w	r3, r1, r3
 8002a0e:	4413      	add	r3, r2
 8002a10:	3354      	adds	r3, #84	; 0x54
 8002a12:	781b      	ldrb	r3, [r3, #0]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d109      	bne.n	8002a2c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a18:	78fb      	ldrb	r3, [r7, #3]
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	212c      	movs	r1, #44	; 0x2c
 8002a1e:	fb01 f303 	mul.w	r3, r1, r3
 8002a22:	4413      	add	r3, r2
 8002a24:	3342      	adds	r3, #66	; 0x42
 8002a26:	2200      	movs	r2, #0
 8002a28:	701a      	strb	r2, [r3, #0]
      break;
 8002a2a:	e016      	b.n	8002a5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002a2c:	78fb      	ldrb	r3, [r7, #3]
 8002a2e:	687a      	ldr	r2, [r7, #4]
 8002a30:	212c      	movs	r1, #44	; 0x2c
 8002a32:	fb01 f303 	mul.w	r3, r1, r3
 8002a36:	4413      	add	r3, r2
 8002a38:	3342      	adds	r3, #66	; 0x42
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	701a      	strb	r2, [r3, #0]
      break;
 8002a3e:	e00c      	b.n	8002a5a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002a40:	78fb      	ldrb	r3, [r7, #3]
 8002a42:	687a      	ldr	r2, [r7, #4]
 8002a44:	212c      	movs	r1, #44	; 0x2c
 8002a46:	fb01 f303 	mul.w	r3, r1, r3
 8002a4a:	4413      	add	r3, r2
 8002a4c:	3342      	adds	r3, #66	; 0x42
 8002a4e:	2200      	movs	r2, #0
 8002a50:	701a      	strb	r2, [r3, #0]
      break;
 8002a52:	e002      	b.n	8002a5a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002a54:	bf00      	nop
 8002a56:	e000      	b.n	8002a5a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002a58:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002a5a:	78fb      	ldrb	r3, [r7, #3]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	212c      	movs	r1, #44	; 0x2c
 8002a60:	fb01 f303 	mul.w	r3, r1, r3
 8002a64:	4413      	add	r3, r2
 8002a66:	3344      	adds	r3, #68	; 0x44
 8002a68:	697a      	ldr	r2, [r7, #20]
 8002a6a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002a6c:	78fb      	ldrb	r3, [r7, #3]
 8002a6e:	8b3a      	ldrh	r2, [r7, #24]
 8002a70:	6879      	ldr	r1, [r7, #4]
 8002a72:	202c      	movs	r0, #44	; 0x2c
 8002a74:	fb00 f303 	mul.w	r3, r0, r3
 8002a78:	440b      	add	r3, r1
 8002a7a:	334c      	adds	r3, #76	; 0x4c
 8002a7c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002a7e:	78fb      	ldrb	r3, [r7, #3]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	212c      	movs	r1, #44	; 0x2c
 8002a84:	fb01 f303 	mul.w	r3, r1, r3
 8002a88:	4413      	add	r3, r2
 8002a8a:	3360      	adds	r3, #96	; 0x60
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002a90:	78fb      	ldrb	r3, [r7, #3]
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	212c      	movs	r1, #44	; 0x2c
 8002a96:	fb01 f303 	mul.w	r3, r1, r3
 8002a9a:	4413      	add	r3, r2
 8002a9c:	3350      	adds	r3, #80	; 0x50
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002aa2:	78fb      	ldrb	r3, [r7, #3]
 8002aa4:	687a      	ldr	r2, [r7, #4]
 8002aa6:	212c      	movs	r1, #44	; 0x2c
 8002aa8:	fb01 f303 	mul.w	r3, r1, r3
 8002aac:	4413      	add	r3, r2
 8002aae:	3339      	adds	r3, #57	; 0x39
 8002ab0:	78fa      	ldrb	r2, [r7, #3]
 8002ab2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	687a      	ldr	r2, [r7, #4]
 8002ab8:	212c      	movs	r1, #44	; 0x2c
 8002aba:	fb01 f303 	mul.w	r3, r1, r3
 8002abe:	4413      	add	r3, r2
 8002ac0:	3361      	adds	r3, #97	; 0x61
 8002ac2:	2200      	movs	r2, #0
 8002ac4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6818      	ldr	r0, [r3, #0]
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	222c      	movs	r2, #44	; 0x2c
 8002ace:	fb02 f303 	mul.w	r3, r2, r3
 8002ad2:	3338      	adds	r3, #56	; 0x38
 8002ad4:	687a      	ldr	r2, [r7, #4]
 8002ad6:	18d1      	adds	r1, r2, r3
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	691b      	ldr	r3, [r3, #16]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	f004 fc90 	bl	8007404 <USB_HC_StartXfer>
 8002ae4:	4603      	mov	r3, r0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop

08002af0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b086      	sub	sp, #24
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f004 f991 	bl	8006e2e <USB_GetMode>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	f040 80f6 	bne.w	8002d00 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f004 f975 	bl	8006e08 <USB_ReadInterrupts>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80ec 	beq.w	8002cfe <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	4618      	mov	r0, r3
 8002b2c:	f004 f96c 	bl	8006e08 <USB_ReadInterrupts>
 8002b30:	4603      	mov	r3, r0
 8002b32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b3a:	d104      	bne.n	8002b46 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002b44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f004 f95c 	bl	8006e08 <USB_ReadInterrupts>
 8002b50:	4603      	mov	r3, r0
 8002b52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b5a:	d104      	bne.n	8002b66 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f004 f94c 	bl	8006e08 <USB_ReadInterrupts>
 8002b70:	4603      	mov	r3, r0
 8002b72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002b7a:	d104      	bne.n	8002b86 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	f004 f93c 	bl	8006e08 <USB_ReadInterrupts>
 8002b90:	4603      	mov	r3, r0
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d103      	bne.n	8002ba2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f004 f92e 	bl	8006e08 <USB_ReadInterrupts>
 8002bac:	4603      	mov	r3, r0
 8002bae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bb6:	d11c      	bne.n	8002bf2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002bc0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 0301 	and.w	r3, r3, #1
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d10f      	bne.n	8002bf2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002bd2:	2110      	movs	r1, #16
 8002bd4:	6938      	ldr	r0, [r7, #16]
 8002bd6:	f004 f81d 	bl	8006c14 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002bda:	6938      	ldr	r0, [r7, #16]
 8002bdc:	f004 f84e 	bl	8006c7c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2101      	movs	r1, #1
 8002be6:	4618      	mov	r0, r3
 8002be8:	f004 fa24 	bl	8007034 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002bec:	6878      	ldr	r0, [r7, #4]
 8002bee:	f00a fcb1 	bl	800d554 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f004 f906 	bl	8006e08 <USB_ReadInterrupts>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c02:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c06:	d102      	bne.n	8002c0e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f001 f89e 	bl	8003d4a <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4618      	mov	r0, r3
 8002c14:	f004 f8f8 	bl	8006e08 <USB_ReadInterrupts>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	f003 0308 	and.w	r3, r3, #8
 8002c1e:	2b08      	cmp	r3, #8
 8002c20:	d106      	bne.n	8002c30 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f00a fc7a 	bl	800d51c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2208      	movs	r2, #8
 8002c2e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4618      	mov	r0, r3
 8002c36:	f004 f8e7 	bl	8006e08 <USB_ReadInterrupts>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	f003 0310 	and.w	r3, r3, #16
 8002c40:	2b10      	cmp	r3, #16
 8002c42:	d101      	bne.n	8002c48 <HAL_HCD_IRQHandler+0x158>
 8002c44:	2301      	movs	r3, #1
 8002c46:	e000      	b.n	8002c4a <HAL_HCD_IRQHandler+0x15a>
 8002c48:	2300      	movs	r3, #0
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d012      	beq.n	8002c74 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	699a      	ldr	r2, [r3, #24]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f022 0210 	bic.w	r2, r2, #16
 8002c5c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002c5e:	6878      	ldr	r0, [r7, #4]
 8002c60:	f000 ffa1 	bl	8003ba6 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	699a      	ldr	r2, [r3, #24]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f042 0210 	orr.w	r2, r2, #16
 8002c72:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f004 f8c5 	bl	8006e08 <USB_ReadInterrupts>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002c88:	d13a      	bne.n	8002d00 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f004 fcfa 	bl	8007688 <USB_HC_ReadInterrupt>
 8002c94:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002c96:	2300      	movs	r3, #0
 8002c98:	617b      	str	r3, [r7, #20]
 8002c9a:	e025      	b.n	8002ce8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	f003 030f 	and.w	r3, r3, #15
 8002ca2:	68ba      	ldr	r2, [r7, #8]
 8002ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d018      	beq.n	8002ce2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cc2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002cc6:	d106      	bne.n	8002cd6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	b2db      	uxtb	r3, r3
 8002ccc:	4619      	mov	r1, r3
 8002cce:	6878      	ldr	r0, [r7, #4]
 8002cd0:	f000 f8ab 	bl	8002e2a <HCD_HC_IN_IRQHandler>
 8002cd4:	e005      	b.n	8002ce2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	4619      	mov	r1, r3
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f000 fbf9 	bl	80034d4 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	3301      	adds	r3, #1
 8002ce6:	617b      	str	r3, [r7, #20]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	689b      	ldr	r3, [r3, #8]
 8002cec:	697a      	ldr	r2, [r7, #20]
 8002cee:	429a      	cmp	r2, r3
 8002cf0:	d3d4      	bcc.n	8002c9c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cfa:	615a      	str	r2, [r3, #20]
 8002cfc:	e000      	b.n	8002d00 <HAL_HCD_IRQHandler+0x210>
      return;
 8002cfe:	bf00      	nop
    }
  }
}
 8002d00:	3718      	adds	r7, #24
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002d06:	b580      	push	{r7, lr}
 8002d08:	b082      	sub	sp, #8
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002d14:	2b01      	cmp	r3, #1
 8002d16:	d101      	bne.n	8002d1c <HAL_HCD_Start+0x16>
 8002d18:	2302      	movs	r3, #2
 8002d1a:	e013      	b.n	8002d44 <HAL_HCD_Start+0x3e>
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2201      	movs	r2, #1
 8002d20:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2101      	movs	r1, #1
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f004 f9e6 	bl	80070fc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4618      	mov	r0, r3
 8002d36:	f003 fefe 	bl	8006b36 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}

08002d4c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002d5a:	2b01      	cmp	r3, #1
 8002d5c:	d101      	bne.n	8002d62 <HAL_HCD_Stop+0x16>
 8002d5e:	2302      	movs	r3, #2
 8002d60:	e00d      	b.n	8002d7e <HAL_HCD_Stop+0x32>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f004 fdd4 	bl	800791c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3708      	adds	r7, #8
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f004 f988 	bl	80070a8 <USB_ResetPort>
 8002d98:	4603      	mov	r3, r0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}

08002da2 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	460b      	mov	r3, r1
 8002dac:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002dae:	78fb      	ldrb	r3, [r7, #3]
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	212c      	movs	r1, #44	; 0x2c
 8002db4:	fb01 f303 	mul.w	r3, r1, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	3360      	adds	r3, #96	; 0x60
 8002dbc:	781b      	ldrb	r3, [r3, #0]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	370c      	adds	r7, #12
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc8:	4770      	bx	lr

08002dca <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002dca:	b480      	push	{r7}
 8002dcc:	b083      	sub	sp, #12
 8002dce:	af00      	add	r7, sp, #0
 8002dd0:	6078      	str	r0, [r7, #4]
 8002dd2:	460b      	mov	r3, r1
 8002dd4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002dd6:	78fb      	ldrb	r3, [r7, #3]
 8002dd8:	687a      	ldr	r2, [r7, #4]
 8002dda:	212c      	movs	r1, #44	; 0x2c
 8002ddc:	fb01 f303 	mul.w	r3, r1, r3
 8002de0:	4413      	add	r3, r2
 8002de2:	3350      	adds	r3, #80	; 0x50
 8002de4:	681b      	ldr	r3, [r3, #0]
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr

08002df2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b082      	sub	sp, #8
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f004 f9cc 	bl	800719c <USB_GetCurrentFrame>
 8002e04:	4603      	mov	r3, r0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3708      	adds	r7, #8
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002e0e:	b580      	push	{r7, lr}
 8002e10:	b082      	sub	sp, #8
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f004 f9a7 	bl	800716e <USB_GetHostSpeed>
 8002e20:	4603      	mov	r3, r0
}
 8002e22:	4618      	mov	r0, r3
 8002e24:	3708      	adds	r7, #8
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b086      	sub	sp, #24
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
 8002e32:	460b      	mov	r3, r1
 8002e34:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002e40:	78fb      	ldrb	r3, [r7, #3]
 8002e42:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	015a      	lsls	r2, r3, #5
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 0304 	and.w	r3, r3, #4
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	d11a      	bne.n	8002e90 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	015a      	lsls	r2, r3, #5
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4413      	add	r3, r2
 8002e62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e66:	461a      	mov	r2, r3
 8002e68:	2304      	movs	r3, #4
 8002e6a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	212c      	movs	r1, #44	; 0x2c
 8002e72:	fb01 f303 	mul.w	r3, r1, r3
 8002e76:	4413      	add	r3, r2
 8002e78:	3361      	adds	r3, #97	; 0x61
 8002e7a:	2206      	movs	r2, #6
 8002e7c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	b2d2      	uxtb	r2, r2
 8002e86:	4611      	mov	r1, r2
 8002e88:	4618      	mov	r0, r3
 8002e8a:	f004 fc0e 	bl	80076aa <USB_HC_Halt>
 8002e8e:	e0af      	b.n	8002ff0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	015a      	lsls	r2, r3, #5
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	4413      	add	r3, r2
 8002e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ea2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ea6:	d11b      	bne.n	8002ee0 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002eba:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	212c      	movs	r1, #44	; 0x2c
 8002ec2:	fb01 f303 	mul.w	r3, r1, r3
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3361      	adds	r3, #97	; 0x61
 8002eca:	2207      	movs	r2, #7
 8002ecc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68fa      	ldr	r2, [r7, #12]
 8002ed4:	b2d2      	uxtb	r2, r2
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f004 fbe6 	bl	80076aa <USB_HC_Halt>
 8002ede:	e087      	b.n	8002ff0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	693b      	ldr	r3, [r7, #16]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	f003 0320 	and.w	r3, r3, #32
 8002ef2:	2b20      	cmp	r3, #32
 8002ef4:	d109      	bne.n	8002f0a <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	015a      	lsls	r2, r3, #5
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4413      	add	r3, r2
 8002efe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f02:	461a      	mov	r2, r3
 8002f04:	2320      	movs	r3, #32
 8002f06:	6093      	str	r3, [r2, #8]
 8002f08:	e072      	b.n	8002ff0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	015a      	lsls	r2, r3, #5
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	4413      	add	r3, r2
 8002f12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 0308 	and.w	r3, r3, #8
 8002f1c:	2b08      	cmp	r3, #8
 8002f1e:	d11a      	bne.n	8002f56 <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	015a      	lsls	r2, r3, #5
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	4413      	add	r3, r2
 8002f28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f2c:	461a      	mov	r2, r3
 8002f2e:	2308      	movs	r3, #8
 8002f30:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f32:	687a      	ldr	r2, [r7, #4]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	212c      	movs	r1, #44	; 0x2c
 8002f38:	fb01 f303 	mul.w	r3, r1, r3
 8002f3c:	4413      	add	r3, r2
 8002f3e:	3361      	adds	r3, #97	; 0x61
 8002f40:	2205      	movs	r2, #5
 8002f42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68fa      	ldr	r2, [r7, #12]
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	4611      	mov	r1, r2
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f004 fbab 	bl	80076aa <USB_HC_Halt>
 8002f54:	e04c      	b.n	8002ff0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	015a      	lsls	r2, r3, #5
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	4413      	add	r3, r2
 8002f5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f62:	689b      	ldr	r3, [r3, #8]
 8002f64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f6c:	d11b      	bne.n	8002fa6 <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	015a      	lsls	r2, r3, #5
 8002f72:	693b      	ldr	r3, [r7, #16]
 8002f74:	4413      	add	r3, r2
 8002f76:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002f80:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3361      	adds	r3, #97	; 0x61
 8002f90:	2208      	movs	r2, #8
 8002f92:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	b2d2      	uxtb	r2, r2
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f004 fb83 	bl	80076aa <USB_HC_Halt>
 8002fa4:	e024      	b.n	8002ff0 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	015a      	lsls	r2, r3, #5
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4413      	add	r3, r2
 8002fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fb8:	2b80      	cmp	r3, #128	; 0x80
 8002fba:	d119      	bne.n	8002ff0 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	015a      	lsls	r2, r3, #5
 8002fc0:	693b      	ldr	r3, [r7, #16]
 8002fc2:	4413      	add	r3, r2
 8002fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc8:	461a      	mov	r2, r3
 8002fca:	2380      	movs	r3, #128	; 0x80
 8002fcc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	212c      	movs	r1, #44	; 0x2c
 8002fd4:	fb01 f303 	mul.w	r3, r1, r3
 8002fd8:	4413      	add	r3, r2
 8002fda:	3361      	adds	r3, #97	; 0x61
 8002fdc:	2206      	movs	r2, #6
 8002fde:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68fa      	ldr	r2, [r7, #12]
 8002fe6:	b2d2      	uxtb	r2, r2
 8002fe8:	4611      	mov	r1, r2
 8002fea:	4618      	mov	r0, r3
 8002fec:	f004 fb5d 	bl	80076aa <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003006:	d112      	bne.n	800302e <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68fa      	ldr	r2, [r7, #12]
 800300e:	b2d2      	uxtb	r2, r2
 8003010:	4611      	mov	r1, r2
 8003012:	4618      	mov	r0, r3
 8003014:	f004 fb49 	bl	80076aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	015a      	lsls	r2, r3, #5
 800301c:	693b      	ldr	r3, [r7, #16]
 800301e:	4413      	add	r3, r2
 8003020:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003024:	461a      	mov	r2, r3
 8003026:	f44f 7300 	mov.w	r3, #512	; 0x200
 800302a:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 800302c:	e24e      	b.n	80034cc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	015a      	lsls	r2, r3, #5
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	4413      	add	r3, r2
 8003036:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	f003 0301 	and.w	r3, r3, #1
 8003040:	2b01      	cmp	r3, #1
 8003042:	f040 80df 	bne.w	8003204 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d019      	beq.n	8003082 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 800304e:	687a      	ldr	r2, [r7, #4]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	3348      	adds	r3, #72	; 0x48
 800305c:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	0159      	lsls	r1, r3, #5
 8003062:	693b      	ldr	r3, [r7, #16]
 8003064:	440b      	add	r3, r1
 8003066:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003070:	1ad2      	subs	r2, r2, r3
 8003072:	6879      	ldr	r1, [r7, #4]
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	202c      	movs	r0, #44	; 0x2c
 8003078:	fb00 f303 	mul.w	r3, r0, r3
 800307c:	440b      	add	r3, r1
 800307e:	3350      	adds	r3, #80	; 0x50
 8003080:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003082:	687a      	ldr	r2, [r7, #4]
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	212c      	movs	r1, #44	; 0x2c
 8003088:	fb01 f303 	mul.w	r3, r1, r3
 800308c:	4413      	add	r3, r2
 800308e:	3361      	adds	r3, #97	; 0x61
 8003090:	2201      	movs	r2, #1
 8003092:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003094:	687a      	ldr	r2, [r7, #4]
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	212c      	movs	r1, #44	; 0x2c
 800309a:	fb01 f303 	mul.w	r3, r1, r3
 800309e:	4413      	add	r3, r2
 80030a0:	335c      	adds	r3, #92	; 0x5c
 80030a2:	2200      	movs	r2, #0
 80030a4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	015a      	lsls	r2, r3, #5
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	4413      	add	r3, r2
 80030ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b2:	461a      	mov	r2, r3
 80030b4:	2301      	movs	r3, #1
 80030b6:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	212c      	movs	r1, #44	; 0x2c
 80030be:	fb01 f303 	mul.w	r3, r1, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	333f      	adds	r3, #63	; 0x3f
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d009      	beq.n	80030e0 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80030cc:	687a      	ldr	r2, [r7, #4]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	212c      	movs	r1, #44	; 0x2c
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	333f      	adds	r3, #63	; 0x3f
 80030da:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d111      	bne.n	8003104 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	68fa      	ldr	r2, [r7, #12]
 80030e6:	b2d2      	uxtb	r2, r2
 80030e8:	4611      	mov	r1, r2
 80030ea:	4618      	mov	r0, r3
 80030ec:	f004 fadd 	bl	80076aa <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	015a      	lsls	r2, r3, #5
 80030f4:	693b      	ldr	r3, [r7, #16]
 80030f6:	4413      	add	r3, r2
 80030f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030fc:	461a      	mov	r2, r3
 80030fe:	2310      	movs	r3, #16
 8003100:	6093      	str	r3, [r2, #8]
 8003102:	e03a      	b.n	800317a <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003104:	687a      	ldr	r2, [r7, #4]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	212c      	movs	r1, #44	; 0x2c
 800310a:	fb01 f303 	mul.w	r3, r1, r3
 800310e:	4413      	add	r3, r2
 8003110:	333f      	adds	r3, #63	; 0x3f
 8003112:	781b      	ldrb	r3, [r3, #0]
 8003114:	2b03      	cmp	r3, #3
 8003116:	d009      	beq.n	800312c <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	212c      	movs	r1, #44	; 0x2c
 800311e:	fb01 f303 	mul.w	r3, r1, r3
 8003122:	4413      	add	r3, r2
 8003124:	333f      	adds	r3, #63	; 0x3f
 8003126:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003128:	2b01      	cmp	r3, #1
 800312a:	d126      	bne.n	800317a <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	015a      	lsls	r2, r3, #5
 8003130:	693b      	ldr	r3, [r7, #16]
 8003132:	4413      	add	r3, r2
 8003134:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	68fa      	ldr	r2, [r7, #12]
 800313c:	0151      	lsls	r1, r2, #5
 800313e:	693a      	ldr	r2, [r7, #16]
 8003140:	440a      	add	r2, r1
 8003142:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003146:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800314a:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	212c      	movs	r1, #44	; 0x2c
 8003152:	fb01 f303 	mul.w	r3, r1, r3
 8003156:	4413      	add	r3, r2
 8003158:	3360      	adds	r3, #96	; 0x60
 800315a:	2201      	movs	r2, #1
 800315c:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	b2d9      	uxtb	r1, r3
 8003162:	687a      	ldr	r2, [r7, #4]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	202c      	movs	r0, #44	; 0x2c
 8003168:	fb00 f303 	mul.w	r3, r0, r3
 800316c:	4413      	add	r3, r2
 800316e:	3360      	adds	r3, #96	; 0x60
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	461a      	mov	r2, r3
 8003174:	6878      	ldr	r0, [r7, #4]
 8003176:	f00a f9fb 	bl	800d570 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	2b01      	cmp	r3, #1
 8003180:	d12b      	bne.n	80031da <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	212c      	movs	r1, #44	; 0x2c
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	4413      	add	r3, r2
 800318e:	3348      	adds	r3, #72	; 0x48
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6879      	ldr	r1, [r7, #4]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	202c      	movs	r0, #44	; 0x2c
 8003198:	fb00 f202 	mul.w	r2, r0, r2
 800319c:	440a      	add	r2, r1
 800319e:	3240      	adds	r2, #64	; 0x40
 80031a0:	8812      	ldrh	r2, [r2, #0]
 80031a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80031a6:	f003 0301 	and.w	r3, r3, #1
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f000 818e 	beq.w	80034cc <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	212c      	movs	r1, #44	; 0x2c
 80031b6:	fb01 f303 	mul.w	r3, r1, r3
 80031ba:	4413      	add	r3, r2
 80031bc:	3354      	adds	r3, #84	; 0x54
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	f083 0301 	eor.w	r3, r3, #1
 80031c4:	b2d8      	uxtb	r0, r3
 80031c6:	687a      	ldr	r2, [r7, #4]
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	212c      	movs	r1, #44	; 0x2c
 80031cc:	fb01 f303 	mul.w	r3, r1, r3
 80031d0:	4413      	add	r3, r2
 80031d2:	3354      	adds	r3, #84	; 0x54
 80031d4:	4602      	mov	r2, r0
 80031d6:	701a      	strb	r2, [r3, #0]
}
 80031d8:	e178      	b.n	80034cc <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	212c      	movs	r1, #44	; 0x2c
 80031e0:	fb01 f303 	mul.w	r3, r1, r3
 80031e4:	4413      	add	r3, r2
 80031e6:	3354      	adds	r3, #84	; 0x54
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	f083 0301 	eor.w	r3, r3, #1
 80031ee:	b2d8      	uxtb	r0, r3
 80031f0:	687a      	ldr	r2, [r7, #4]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	212c      	movs	r1, #44	; 0x2c
 80031f6:	fb01 f303 	mul.w	r3, r1, r3
 80031fa:	4413      	add	r3, r2
 80031fc:	3354      	adds	r3, #84	; 0x54
 80031fe:	4602      	mov	r2, r0
 8003200:	701a      	strb	r2, [r3, #0]
}
 8003202:	e163      	b.n	80034cc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	015a      	lsls	r2, r3, #5
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	4413      	add	r3, r2
 800320c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003210:	689b      	ldr	r3, [r3, #8]
 8003212:	f003 0302 	and.w	r3, r3, #2
 8003216:	2b02      	cmp	r3, #2
 8003218:	f040 80f6 	bne.w	8003408 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 800321c:	687a      	ldr	r2, [r7, #4]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	212c      	movs	r1, #44	; 0x2c
 8003222:	fb01 f303 	mul.w	r3, r1, r3
 8003226:	4413      	add	r3, r2
 8003228:	3361      	adds	r3, #97	; 0x61
 800322a:	781b      	ldrb	r3, [r3, #0]
 800322c:	2b01      	cmp	r3, #1
 800322e:	d109      	bne.n	8003244 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	212c      	movs	r1, #44	; 0x2c
 8003236:	fb01 f303 	mul.w	r3, r1, r3
 800323a:	4413      	add	r3, r2
 800323c:	3360      	adds	r3, #96	; 0x60
 800323e:	2201      	movs	r2, #1
 8003240:	701a      	strb	r2, [r3, #0]
 8003242:	e0c9      	b.n	80033d8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003244:	687a      	ldr	r2, [r7, #4]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	212c      	movs	r1, #44	; 0x2c
 800324a:	fb01 f303 	mul.w	r3, r1, r3
 800324e:	4413      	add	r3, r2
 8003250:	3361      	adds	r3, #97	; 0x61
 8003252:	781b      	ldrb	r3, [r3, #0]
 8003254:	2b05      	cmp	r3, #5
 8003256:	d109      	bne.n	800326c <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	212c      	movs	r1, #44	; 0x2c
 800325e:	fb01 f303 	mul.w	r3, r1, r3
 8003262:	4413      	add	r3, r2
 8003264:	3360      	adds	r3, #96	; 0x60
 8003266:	2205      	movs	r2, #5
 8003268:	701a      	strb	r2, [r3, #0]
 800326a:	e0b5      	b.n	80033d8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800326c:	687a      	ldr	r2, [r7, #4]
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	212c      	movs	r1, #44	; 0x2c
 8003272:	fb01 f303 	mul.w	r3, r1, r3
 8003276:	4413      	add	r3, r2
 8003278:	3361      	adds	r3, #97	; 0x61
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	2b06      	cmp	r3, #6
 800327e:	d009      	beq.n	8003294 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003280:	687a      	ldr	r2, [r7, #4]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	212c      	movs	r1, #44	; 0x2c
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	4413      	add	r3, r2
 800328c:	3361      	adds	r3, #97	; 0x61
 800328e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003290:	2b08      	cmp	r3, #8
 8003292:	d150      	bne.n	8003336 <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003294:	687a      	ldr	r2, [r7, #4]
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	212c      	movs	r1, #44	; 0x2c
 800329a:	fb01 f303 	mul.w	r3, r1, r3
 800329e:	4413      	add	r3, r2
 80032a0:	335c      	adds	r3, #92	; 0x5c
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	202c      	movs	r0, #44	; 0x2c
 80032ac:	fb00 f303 	mul.w	r3, r0, r3
 80032b0:	440b      	add	r3, r1
 80032b2:	335c      	adds	r3, #92	; 0x5c
 80032b4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	212c      	movs	r1, #44	; 0x2c
 80032bc:	fb01 f303 	mul.w	r3, r1, r3
 80032c0:	4413      	add	r3, r2
 80032c2:	335c      	adds	r3, #92	; 0x5c
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d912      	bls.n	80032f0 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032ca:	687a      	ldr	r2, [r7, #4]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	212c      	movs	r1, #44	; 0x2c
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	335c      	adds	r3, #92	; 0x5c
 80032d8:	2200      	movs	r2, #0
 80032da:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	212c      	movs	r1, #44	; 0x2c
 80032e2:	fb01 f303 	mul.w	r3, r1, r3
 80032e6:	4413      	add	r3, r2
 80032e8:	3360      	adds	r3, #96	; 0x60
 80032ea:	2204      	movs	r2, #4
 80032ec:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032ee:	e073      	b.n	80033d8 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80032f0:	687a      	ldr	r2, [r7, #4]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	212c      	movs	r1, #44	; 0x2c
 80032f6:	fb01 f303 	mul.w	r3, r1, r3
 80032fa:	4413      	add	r3, r2
 80032fc:	3360      	adds	r3, #96	; 0x60
 80032fe:	2202      	movs	r2, #2
 8003300:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	4413      	add	r3, r2
 800330a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003318:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003320:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	015a      	lsls	r2, r3, #5
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	4413      	add	r3, r2
 800332a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800332e:	461a      	mov	r2, r3
 8003330:	68bb      	ldr	r3, [r7, #8]
 8003332:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003334:	e050      	b.n	80033d8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	212c      	movs	r1, #44	; 0x2c
 800333c:	fb01 f303 	mul.w	r3, r1, r3
 8003340:	4413      	add	r3, r2
 8003342:	3361      	adds	r3, #97	; 0x61
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b03      	cmp	r3, #3
 8003348:	d122      	bne.n	8003390 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 800334a:	687a      	ldr	r2, [r7, #4]
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	212c      	movs	r1, #44	; 0x2c
 8003350:	fb01 f303 	mul.w	r3, r1, r3
 8003354:	4413      	add	r3, r2
 8003356:	3360      	adds	r3, #96	; 0x60
 8003358:	2202      	movs	r2, #2
 800335a:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	015a      	lsls	r2, r3, #5
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	4413      	add	r3, r2
 8003364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003372:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003374:	68bb      	ldr	r3, [r7, #8]
 8003376:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800337a:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	015a      	lsls	r2, r3, #5
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	4413      	add	r3, r2
 8003384:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003388:	461a      	mov	r2, r3
 800338a:	68bb      	ldr	r3, [r7, #8]
 800338c:	6013      	str	r3, [r2, #0]
 800338e:	e023      	b.n	80033d8 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	212c      	movs	r1, #44	; 0x2c
 8003396:	fb01 f303 	mul.w	r3, r1, r3
 800339a:	4413      	add	r3, r2
 800339c:	3361      	adds	r3, #97	; 0x61
 800339e:	781b      	ldrb	r3, [r3, #0]
 80033a0:	2b07      	cmp	r3, #7
 80033a2:	d119      	bne.n	80033d8 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80033a4:	687a      	ldr	r2, [r7, #4]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	212c      	movs	r1, #44	; 0x2c
 80033aa:	fb01 f303 	mul.w	r3, r1, r3
 80033ae:	4413      	add	r3, r2
 80033b0:	335c      	adds	r3, #92	; 0x5c
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	1c5a      	adds	r2, r3, #1
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	202c      	movs	r0, #44	; 0x2c
 80033bc:	fb00 f303 	mul.w	r3, r0, r3
 80033c0:	440b      	add	r3, r1
 80033c2:	335c      	adds	r3, #92	; 0x5c
 80033c4:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	212c      	movs	r1, #44	; 0x2c
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	4413      	add	r3, r2
 80033d2:	3360      	adds	r3, #96	; 0x60
 80033d4:	2204      	movs	r2, #4
 80033d6:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	015a      	lsls	r2, r3, #5
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	4413      	add	r3, r2
 80033e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033e4:	461a      	mov	r2, r3
 80033e6:	2302      	movs	r3, #2
 80033e8:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	b2d9      	uxtb	r1, r3
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	202c      	movs	r0, #44	; 0x2c
 80033f4:	fb00 f303 	mul.w	r3, r0, r3
 80033f8:	4413      	add	r3, r2
 80033fa:	3360      	adds	r3, #96	; 0x60
 80033fc:	781b      	ldrb	r3, [r3, #0]
 80033fe:	461a      	mov	r2, r3
 8003400:	6878      	ldr	r0, [r7, #4]
 8003402:	f00a f8b5 	bl	800d570 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003406:	e061      	b.n	80034cc <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4413      	add	r3, r2
 8003410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	f003 0310 	and.w	r3, r3, #16
 800341a:	2b10      	cmp	r3, #16
 800341c:	d156      	bne.n	80034cc <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	212c      	movs	r1, #44	; 0x2c
 8003424:	fb01 f303 	mul.w	r3, r1, r3
 8003428:	4413      	add	r3, r2
 800342a:	333f      	adds	r3, #63	; 0x3f
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b03      	cmp	r3, #3
 8003430:	d111      	bne.n	8003456 <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003432:	687a      	ldr	r2, [r7, #4]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	212c      	movs	r1, #44	; 0x2c
 8003438:	fb01 f303 	mul.w	r3, r1, r3
 800343c:	4413      	add	r3, r2
 800343e:	335c      	adds	r3, #92	; 0x5c
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	68fa      	ldr	r2, [r7, #12]
 800344a:	b2d2      	uxtb	r2, r2
 800344c:	4611      	mov	r1, r2
 800344e:	4618      	mov	r0, r3
 8003450:	f004 f92b 	bl	80076aa <USB_HC_Halt>
 8003454:	e031      	b.n	80034ba <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	212c      	movs	r1, #44	; 0x2c
 800345c:	fb01 f303 	mul.w	r3, r1, r3
 8003460:	4413      	add	r3, r2
 8003462:	333f      	adds	r3, #63	; 0x3f
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d009      	beq.n	800347e <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 800346a:	687a      	ldr	r2, [r7, #4]
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	212c      	movs	r1, #44	; 0x2c
 8003470:	fb01 f303 	mul.w	r3, r1, r3
 8003474:	4413      	add	r3, r2
 8003476:	333f      	adds	r3, #63	; 0x3f
 8003478:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800347a:	2b02      	cmp	r3, #2
 800347c:	d11d      	bne.n	80034ba <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	212c      	movs	r1, #44	; 0x2c
 8003484:	fb01 f303 	mul.w	r3, r1, r3
 8003488:	4413      	add	r3, r2
 800348a:	335c      	adds	r3, #92	; 0x5c
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	691b      	ldr	r3, [r3, #16]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d110      	bne.n	80034ba <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003498:	687a      	ldr	r2, [r7, #4]
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	212c      	movs	r1, #44	; 0x2c
 800349e:	fb01 f303 	mul.w	r3, r1, r3
 80034a2:	4413      	add	r3, r2
 80034a4:	3361      	adds	r3, #97	; 0x61
 80034a6:	2203      	movs	r2, #3
 80034a8:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	4611      	mov	r1, r2
 80034b4:	4618      	mov	r0, r3
 80034b6:	f004 f8f8 	bl	80076aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	015a      	lsls	r2, r3, #5
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	4413      	add	r3, r2
 80034c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034c6:	461a      	mov	r2, r3
 80034c8:	2310      	movs	r3, #16
 80034ca:	6093      	str	r3, [r2, #8]
}
 80034cc:	bf00      	nop
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b088      	sub	sp, #32
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	460b      	mov	r3, r1
 80034de:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80034ea:	78fb      	ldrb	r3, [r7, #3]
 80034ec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80034ee:	697b      	ldr	r3, [r7, #20]
 80034f0:	015a      	lsls	r2, r3, #5
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	4413      	add	r3, r2
 80034f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b04      	cmp	r3, #4
 8003502:	d11a      	bne.n	800353a <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003504:	697b      	ldr	r3, [r7, #20]
 8003506:	015a      	lsls	r2, r3, #5
 8003508:	69bb      	ldr	r3, [r7, #24]
 800350a:	4413      	add	r3, r2
 800350c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003510:	461a      	mov	r2, r3
 8003512:	2304      	movs	r3, #4
 8003514:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003516:	687a      	ldr	r2, [r7, #4]
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	212c      	movs	r1, #44	; 0x2c
 800351c:	fb01 f303 	mul.w	r3, r1, r3
 8003520:	4413      	add	r3, r2
 8003522:	3361      	adds	r3, #97	; 0x61
 8003524:	2206      	movs	r2, #6
 8003526:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	697a      	ldr	r2, [r7, #20]
 800352e:	b2d2      	uxtb	r2, r2
 8003530:	4611      	mov	r1, r2
 8003532:	4618      	mov	r0, r3
 8003534:	f004 f8b9 	bl	80076aa <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003538:	e331      	b.n	8003b9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	015a      	lsls	r2, r3, #5
 800353e:	69bb      	ldr	r3, [r7, #24]
 8003540:	4413      	add	r3, r2
 8003542:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	f003 0320 	and.w	r3, r3, #32
 800354c:	2b20      	cmp	r3, #32
 800354e:	d12e      	bne.n	80035ae <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	015a      	lsls	r2, r3, #5
 8003554:	69bb      	ldr	r3, [r7, #24]
 8003556:	4413      	add	r3, r2
 8003558:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800355c:	461a      	mov	r2, r3
 800355e:	2320      	movs	r3, #32
 8003560:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	697b      	ldr	r3, [r7, #20]
 8003566:	212c      	movs	r1, #44	; 0x2c
 8003568:	fb01 f303 	mul.w	r3, r1, r3
 800356c:	4413      	add	r3, r2
 800356e:	333d      	adds	r3, #61	; 0x3d
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	2b01      	cmp	r3, #1
 8003574:	f040 8313 	bne.w	8003b9e <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003578:	687a      	ldr	r2, [r7, #4]
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	212c      	movs	r1, #44	; 0x2c
 800357e:	fb01 f303 	mul.w	r3, r1, r3
 8003582:	4413      	add	r3, r2
 8003584:	333d      	adds	r3, #61	; 0x3d
 8003586:	2200      	movs	r2, #0
 8003588:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	697b      	ldr	r3, [r7, #20]
 800358e:	212c      	movs	r1, #44	; 0x2c
 8003590:	fb01 f303 	mul.w	r3, r1, r3
 8003594:	4413      	add	r3, r2
 8003596:	3360      	adds	r3, #96	; 0x60
 8003598:	2202      	movs	r2, #2
 800359a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	b2d2      	uxtb	r2, r2
 80035a4:	4611      	mov	r1, r2
 80035a6:	4618      	mov	r0, r3
 80035a8:	f004 f87f 	bl	80076aa <USB_HC_Halt>
}
 80035ac:	e2f7      	b.n	8003b9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035c4:	d112      	bne.n	80035ec <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	015a      	lsls	r2, r3, #5
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	4413      	add	r3, r2
 80035ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035d2:	461a      	mov	r2, r3
 80035d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80035d8:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	697a      	ldr	r2, [r7, #20]
 80035e0:	b2d2      	uxtb	r2, r2
 80035e2:	4611      	mov	r1, r2
 80035e4:	4618      	mov	r0, r3
 80035e6:	f004 f860 	bl	80076aa <USB_HC_Halt>
}
 80035ea:	e2d8      	b.n	8003b9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	015a      	lsls	r2, r3, #5
 80035f0:	69bb      	ldr	r3, [r7, #24]
 80035f2:	4413      	add	r3, r2
 80035f4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 0301 	and.w	r3, r3, #1
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d140      	bne.n	8003684 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003602:	687a      	ldr	r2, [r7, #4]
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	212c      	movs	r1, #44	; 0x2c
 8003608:	fb01 f303 	mul.w	r3, r1, r3
 800360c:	4413      	add	r3, r2
 800360e:	335c      	adds	r3, #92	; 0x5c
 8003610:	2200      	movs	r2, #0
 8003612:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	015a      	lsls	r2, r3, #5
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	4413      	add	r3, r2
 800361c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003626:	2b40      	cmp	r3, #64	; 0x40
 8003628:	d111      	bne.n	800364e <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	212c      	movs	r1, #44	; 0x2c
 8003630:	fb01 f303 	mul.w	r3, r1, r3
 8003634:	4413      	add	r3, r2
 8003636:	333d      	adds	r3, #61	; 0x3d
 8003638:	2201      	movs	r2, #1
 800363a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 800363c:	697b      	ldr	r3, [r7, #20]
 800363e:	015a      	lsls	r2, r3, #5
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	4413      	add	r3, r2
 8003644:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003648:	461a      	mov	r2, r3
 800364a:	2340      	movs	r3, #64	; 0x40
 800364c:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	015a      	lsls	r2, r3, #5
 8003652:	69bb      	ldr	r3, [r7, #24]
 8003654:	4413      	add	r3, r2
 8003656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800365a:	461a      	mov	r2, r3
 800365c:	2301      	movs	r3, #1
 800365e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003660:	687a      	ldr	r2, [r7, #4]
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	212c      	movs	r1, #44	; 0x2c
 8003666:	fb01 f303 	mul.w	r3, r1, r3
 800366a:	4413      	add	r3, r2
 800366c:	3361      	adds	r3, #97	; 0x61
 800366e:	2201      	movs	r2, #1
 8003670:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	697a      	ldr	r2, [r7, #20]
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	4611      	mov	r1, r2
 800367c:	4618      	mov	r0, r3
 800367e:	f004 f814 	bl	80076aa <USB_HC_Halt>
}
 8003682:	e28c      	b.n	8003b9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003684:	697b      	ldr	r3, [r7, #20]
 8003686:	015a      	lsls	r2, r3, #5
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	4413      	add	r3, r2
 800368c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003696:	2b40      	cmp	r3, #64	; 0x40
 8003698:	d12c      	bne.n	80036f4 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 800369a:	687a      	ldr	r2, [r7, #4]
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	212c      	movs	r1, #44	; 0x2c
 80036a0:	fb01 f303 	mul.w	r3, r1, r3
 80036a4:	4413      	add	r3, r2
 80036a6:	3361      	adds	r3, #97	; 0x61
 80036a8:	2204      	movs	r2, #4
 80036aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80036ac:	687a      	ldr	r2, [r7, #4]
 80036ae:	697b      	ldr	r3, [r7, #20]
 80036b0:	212c      	movs	r1, #44	; 0x2c
 80036b2:	fb01 f303 	mul.w	r3, r1, r3
 80036b6:	4413      	add	r3, r2
 80036b8:	333d      	adds	r3, #61	; 0x3d
 80036ba:	2201      	movs	r2, #1
 80036bc:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	697b      	ldr	r3, [r7, #20]
 80036c2:	212c      	movs	r1, #44	; 0x2c
 80036c4:	fb01 f303 	mul.w	r3, r1, r3
 80036c8:	4413      	add	r3, r2
 80036ca:	335c      	adds	r3, #92	; 0x5c
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	697a      	ldr	r2, [r7, #20]
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	4611      	mov	r1, r2
 80036da:	4618      	mov	r0, r3
 80036dc:	f003 ffe5 	bl	80076aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	015a      	lsls	r2, r3, #5
 80036e4:	69bb      	ldr	r3, [r7, #24]
 80036e6:	4413      	add	r3, r2
 80036e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036ec:	461a      	mov	r2, r3
 80036ee:	2340      	movs	r3, #64	; 0x40
 80036f0:	6093      	str	r3, [r2, #8]
}
 80036f2:	e254      	b.n	8003b9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	015a      	lsls	r2, r3, #5
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	4413      	add	r3, r2
 80036fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f003 0308 	and.w	r3, r3, #8
 8003706:	2b08      	cmp	r3, #8
 8003708:	d11a      	bne.n	8003740 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	015a      	lsls	r2, r3, #5
 800370e:	69bb      	ldr	r3, [r7, #24]
 8003710:	4413      	add	r3, r2
 8003712:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003716:	461a      	mov	r2, r3
 8003718:	2308      	movs	r3, #8
 800371a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	212c      	movs	r1, #44	; 0x2c
 8003722:	fb01 f303 	mul.w	r3, r1, r3
 8003726:	4413      	add	r3, r2
 8003728:	3361      	adds	r3, #97	; 0x61
 800372a:	2205      	movs	r2, #5
 800372c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	697a      	ldr	r2, [r7, #20]
 8003734:	b2d2      	uxtb	r2, r2
 8003736:	4611      	mov	r1, r2
 8003738:	4618      	mov	r0, r3
 800373a:	f003 ffb6 	bl	80076aa <USB_HC_Halt>
}
 800373e:	e22e      	b.n	8003b9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003740:	697b      	ldr	r3, [r7, #20]
 8003742:	015a      	lsls	r2, r3, #5
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	4413      	add	r3, r2
 8003748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800374c:	689b      	ldr	r3, [r3, #8]
 800374e:	f003 0310 	and.w	r3, r3, #16
 8003752:	2b10      	cmp	r3, #16
 8003754:	d140      	bne.n	80037d8 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003756:	687a      	ldr	r2, [r7, #4]
 8003758:	697b      	ldr	r3, [r7, #20]
 800375a:	212c      	movs	r1, #44	; 0x2c
 800375c:	fb01 f303 	mul.w	r3, r1, r3
 8003760:	4413      	add	r3, r2
 8003762:	335c      	adds	r3, #92	; 0x5c
 8003764:	2200      	movs	r2, #0
 8003766:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	212c      	movs	r1, #44	; 0x2c
 800376e:	fb01 f303 	mul.w	r3, r1, r3
 8003772:	4413      	add	r3, r2
 8003774:	3361      	adds	r3, #97	; 0x61
 8003776:	2203      	movs	r2, #3
 8003778:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 800377a:	687a      	ldr	r2, [r7, #4]
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	212c      	movs	r1, #44	; 0x2c
 8003780:	fb01 f303 	mul.w	r3, r1, r3
 8003784:	4413      	add	r3, r2
 8003786:	333d      	adds	r3, #61	; 0x3d
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d112      	bne.n	80037b4 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	212c      	movs	r1, #44	; 0x2c
 8003794:	fb01 f303 	mul.w	r3, r1, r3
 8003798:	4413      	add	r3, r2
 800379a:	333c      	adds	r3, #60	; 0x3c
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d108      	bne.n	80037b4 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 80037a2:	687a      	ldr	r2, [r7, #4]
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	212c      	movs	r1, #44	; 0x2c
 80037a8:	fb01 f303 	mul.w	r3, r1, r3
 80037ac:	4413      	add	r3, r2
 80037ae:	333d      	adds	r3, #61	; 0x3d
 80037b0:	2201      	movs	r2, #1
 80037b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	697a      	ldr	r2, [r7, #20]
 80037ba:	b2d2      	uxtb	r2, r2
 80037bc:	4611      	mov	r1, r2
 80037be:	4618      	mov	r0, r3
 80037c0:	f003 ff73 	bl	80076aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	015a      	lsls	r2, r3, #5
 80037c8:	69bb      	ldr	r3, [r7, #24]
 80037ca:	4413      	add	r3, r2
 80037cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037d0:	461a      	mov	r2, r3
 80037d2:	2310      	movs	r3, #16
 80037d4:	6093      	str	r3, [r2, #8]
}
 80037d6:	e1e2      	b.n	8003b9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	015a      	lsls	r2, r3, #5
 80037dc:	69bb      	ldr	r3, [r7, #24]
 80037de:	4413      	add	r3, r2
 80037e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037e4:	689b      	ldr	r3, [r3, #8]
 80037e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037ea:	2b80      	cmp	r3, #128	; 0x80
 80037ec:	d164      	bne.n	80038b8 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	691b      	ldr	r3, [r3, #16]
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d111      	bne.n	800381a <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	212c      	movs	r1, #44	; 0x2c
 80037fc:	fb01 f303 	mul.w	r3, r1, r3
 8003800:	4413      	add	r3, r2
 8003802:	3361      	adds	r3, #97	; 0x61
 8003804:	2206      	movs	r2, #6
 8003806:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	697a      	ldr	r2, [r7, #20]
 800380e:	b2d2      	uxtb	r2, r2
 8003810:	4611      	mov	r1, r2
 8003812:	4618      	mov	r0, r3
 8003814:	f003 ff49 	bl	80076aa <USB_HC_Halt>
 8003818:	e044      	b.n	80038a4 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	212c      	movs	r1, #44	; 0x2c
 8003820:	fb01 f303 	mul.w	r3, r1, r3
 8003824:	4413      	add	r3, r2
 8003826:	335c      	adds	r3, #92	; 0x5c
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	1c5a      	adds	r2, r3, #1
 800382c:	6879      	ldr	r1, [r7, #4]
 800382e:	697b      	ldr	r3, [r7, #20]
 8003830:	202c      	movs	r0, #44	; 0x2c
 8003832:	fb00 f303 	mul.w	r3, r0, r3
 8003836:	440b      	add	r3, r1
 8003838:	335c      	adds	r3, #92	; 0x5c
 800383a:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	212c      	movs	r1, #44	; 0x2c
 8003842:	fb01 f303 	mul.w	r3, r1, r3
 8003846:	4413      	add	r3, r2
 8003848:	335c      	adds	r3, #92	; 0x5c
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	2b02      	cmp	r3, #2
 800384e:	d920      	bls.n	8003892 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003850:	687a      	ldr	r2, [r7, #4]
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	212c      	movs	r1, #44	; 0x2c
 8003856:	fb01 f303 	mul.w	r3, r1, r3
 800385a:	4413      	add	r3, r2
 800385c:	335c      	adds	r3, #92	; 0x5c
 800385e:	2200      	movs	r2, #0
 8003860:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	212c      	movs	r1, #44	; 0x2c
 8003868:	fb01 f303 	mul.w	r3, r1, r3
 800386c:	4413      	add	r3, r2
 800386e:	3360      	adds	r3, #96	; 0x60
 8003870:	2204      	movs	r2, #4
 8003872:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	b2d9      	uxtb	r1, r3
 8003878:	687a      	ldr	r2, [r7, #4]
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	202c      	movs	r0, #44	; 0x2c
 800387e:	fb00 f303 	mul.w	r3, r0, r3
 8003882:	4413      	add	r3, r2
 8003884:	3360      	adds	r3, #96	; 0x60
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	461a      	mov	r2, r3
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f009 fe70 	bl	800d570 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003890:	e008      	b.n	80038a4 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	3360      	adds	r3, #96	; 0x60
 80038a0:	2202      	movs	r2, #2
 80038a2:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	015a      	lsls	r2, r3, #5
 80038a8:	69bb      	ldr	r3, [r7, #24]
 80038aa:	4413      	add	r3, r2
 80038ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038b0:	461a      	mov	r2, r3
 80038b2:	2380      	movs	r3, #128	; 0x80
 80038b4:	6093      	str	r3, [r2, #8]
}
 80038b6:	e172      	b.n	8003b9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	015a      	lsls	r2, r3, #5
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	4413      	add	r3, r2
 80038c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038ce:	d11b      	bne.n	8003908 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	212c      	movs	r1, #44	; 0x2c
 80038d6:	fb01 f303 	mul.w	r3, r1, r3
 80038da:	4413      	add	r3, r2
 80038dc:	3361      	adds	r3, #97	; 0x61
 80038de:	2208      	movs	r2, #8
 80038e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	697a      	ldr	r2, [r7, #20]
 80038e8:	b2d2      	uxtb	r2, r2
 80038ea:	4611      	mov	r1, r2
 80038ec:	4618      	mov	r0, r3
 80038ee:	f003 fedc 	bl	80076aa <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038fe:	461a      	mov	r2, r3
 8003900:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003904:	6093      	str	r3, [r2, #8]
}
 8003906:	e14a      	b.n	8003b9e <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003908:	697b      	ldr	r3, [r7, #20]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	69bb      	ldr	r3, [r7, #24]
 800390e:	4413      	add	r3, r2
 8003910:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b02      	cmp	r3, #2
 800391c:	f040 813f 	bne.w	8003b9e <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003920:	687a      	ldr	r2, [r7, #4]
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	212c      	movs	r1, #44	; 0x2c
 8003926:	fb01 f303 	mul.w	r3, r1, r3
 800392a:	4413      	add	r3, r2
 800392c:	3361      	adds	r3, #97	; 0x61
 800392e:	781b      	ldrb	r3, [r3, #0]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d17d      	bne.n	8003a30 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003934:	687a      	ldr	r2, [r7, #4]
 8003936:	697b      	ldr	r3, [r7, #20]
 8003938:	212c      	movs	r1, #44	; 0x2c
 800393a:	fb01 f303 	mul.w	r3, r1, r3
 800393e:	4413      	add	r3, r2
 8003940:	3360      	adds	r3, #96	; 0x60
 8003942:	2201      	movs	r2, #1
 8003944:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003946:	687a      	ldr	r2, [r7, #4]
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	212c      	movs	r1, #44	; 0x2c
 800394c:	fb01 f303 	mul.w	r3, r1, r3
 8003950:	4413      	add	r3, r2
 8003952:	333f      	adds	r3, #63	; 0x3f
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b02      	cmp	r3, #2
 8003958:	d00a      	beq.n	8003970 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800395a:	687a      	ldr	r2, [r7, #4]
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	212c      	movs	r1, #44	; 0x2c
 8003960:	fb01 f303 	mul.w	r3, r1, r3
 8003964:	4413      	add	r3, r2
 8003966:	333f      	adds	r3, #63	; 0x3f
 8003968:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800396a:	2b03      	cmp	r3, #3
 800396c:	f040 8100 	bne.w	8003b70 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	691b      	ldr	r3, [r3, #16]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d113      	bne.n	80039a0 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	212c      	movs	r1, #44	; 0x2c
 800397e:	fb01 f303 	mul.w	r3, r1, r3
 8003982:	4413      	add	r3, r2
 8003984:	3355      	adds	r3, #85	; 0x55
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	f083 0301 	eor.w	r3, r3, #1
 800398c:	b2d8      	uxtb	r0, r3
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	212c      	movs	r1, #44	; 0x2c
 8003994:	fb01 f303 	mul.w	r3, r1, r3
 8003998:	4413      	add	r3, r2
 800399a:	3355      	adds	r3, #85	; 0x55
 800399c:	4602      	mov	r2, r0
 800399e:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	691b      	ldr	r3, [r3, #16]
 80039a4:	2b01      	cmp	r3, #1
 80039a6:	f040 80e3 	bne.w	8003b70 <HCD_HC_OUT_IRQHandler+0x69c>
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	697b      	ldr	r3, [r7, #20]
 80039ae:	212c      	movs	r1, #44	; 0x2c
 80039b0:	fb01 f303 	mul.w	r3, r1, r3
 80039b4:	4413      	add	r3, r2
 80039b6:	334c      	adds	r3, #76	; 0x4c
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	f000 80d8 	beq.w	8003b70 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80039c0:	687a      	ldr	r2, [r7, #4]
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	212c      	movs	r1, #44	; 0x2c
 80039c6:	fb01 f303 	mul.w	r3, r1, r3
 80039ca:	4413      	add	r3, r2
 80039cc:	334c      	adds	r3, #76	; 0x4c
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6879      	ldr	r1, [r7, #4]
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	202c      	movs	r0, #44	; 0x2c
 80039d6:	fb00 f202 	mul.w	r2, r0, r2
 80039da:	440a      	add	r2, r1
 80039dc:	3240      	adds	r2, #64	; 0x40
 80039de:	8812      	ldrh	r2, [r2, #0]
 80039e0:	4413      	add	r3, r2
 80039e2:	3b01      	subs	r3, #1
 80039e4:	6879      	ldr	r1, [r7, #4]
 80039e6:	697a      	ldr	r2, [r7, #20]
 80039e8:	202c      	movs	r0, #44	; 0x2c
 80039ea:	fb00 f202 	mul.w	r2, r0, r2
 80039ee:	440a      	add	r2, r1
 80039f0:	3240      	adds	r2, #64	; 0x40
 80039f2:	8812      	ldrh	r2, [r2, #0]
 80039f4:	fbb3 f3f2 	udiv	r3, r3, r2
 80039f8:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 80b5 	beq.w	8003b70 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	697b      	ldr	r3, [r7, #20]
 8003a0a:	212c      	movs	r1, #44	; 0x2c
 8003a0c:	fb01 f303 	mul.w	r3, r1, r3
 8003a10:	4413      	add	r3, r2
 8003a12:	3355      	adds	r3, #85	; 0x55
 8003a14:	781b      	ldrb	r3, [r3, #0]
 8003a16:	f083 0301 	eor.w	r3, r3, #1
 8003a1a:	b2d8      	uxtb	r0, r3
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	212c      	movs	r1, #44	; 0x2c
 8003a22:	fb01 f303 	mul.w	r3, r1, r3
 8003a26:	4413      	add	r3, r2
 8003a28:	3355      	adds	r3, #85	; 0x55
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	701a      	strb	r2, [r3, #0]
 8003a2e:	e09f      	b.n	8003b70 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	212c      	movs	r1, #44	; 0x2c
 8003a36:	fb01 f303 	mul.w	r3, r1, r3
 8003a3a:	4413      	add	r3, r2
 8003a3c:	3361      	adds	r3, #97	; 0x61
 8003a3e:	781b      	ldrb	r3, [r3, #0]
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d109      	bne.n	8003a58 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003a44:	687a      	ldr	r2, [r7, #4]
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	212c      	movs	r1, #44	; 0x2c
 8003a4a:	fb01 f303 	mul.w	r3, r1, r3
 8003a4e:	4413      	add	r3, r2
 8003a50:	3360      	adds	r3, #96	; 0x60
 8003a52:	2202      	movs	r2, #2
 8003a54:	701a      	strb	r2, [r3, #0]
 8003a56:	e08b      	b.n	8003b70 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	212c      	movs	r1, #44	; 0x2c
 8003a5e:	fb01 f303 	mul.w	r3, r1, r3
 8003a62:	4413      	add	r3, r2
 8003a64:	3361      	adds	r3, #97	; 0x61
 8003a66:	781b      	ldrb	r3, [r3, #0]
 8003a68:	2b04      	cmp	r3, #4
 8003a6a:	d109      	bne.n	8003a80 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	212c      	movs	r1, #44	; 0x2c
 8003a72:	fb01 f303 	mul.w	r3, r1, r3
 8003a76:	4413      	add	r3, r2
 8003a78:	3360      	adds	r3, #96	; 0x60
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	701a      	strb	r2, [r3, #0]
 8003a7e:	e077      	b.n	8003b70 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	212c      	movs	r1, #44	; 0x2c
 8003a86:	fb01 f303 	mul.w	r3, r1, r3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3361      	adds	r3, #97	; 0x61
 8003a8e:	781b      	ldrb	r3, [r3, #0]
 8003a90:	2b05      	cmp	r3, #5
 8003a92:	d109      	bne.n	8003aa8 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003a94:	687a      	ldr	r2, [r7, #4]
 8003a96:	697b      	ldr	r3, [r7, #20]
 8003a98:	212c      	movs	r1, #44	; 0x2c
 8003a9a:	fb01 f303 	mul.w	r3, r1, r3
 8003a9e:	4413      	add	r3, r2
 8003aa0:	3360      	adds	r3, #96	; 0x60
 8003aa2:	2205      	movs	r2, #5
 8003aa4:	701a      	strb	r2, [r3, #0]
 8003aa6:	e063      	b.n	8003b70 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	212c      	movs	r1, #44	; 0x2c
 8003aae:	fb01 f303 	mul.w	r3, r1, r3
 8003ab2:	4413      	add	r3, r2
 8003ab4:	3361      	adds	r3, #97	; 0x61
 8003ab6:	781b      	ldrb	r3, [r3, #0]
 8003ab8:	2b06      	cmp	r3, #6
 8003aba:	d009      	beq.n	8003ad0 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	212c      	movs	r1, #44	; 0x2c
 8003ac2:	fb01 f303 	mul.w	r3, r1, r3
 8003ac6:	4413      	add	r3, r2
 8003ac8:	3361      	adds	r3, #97	; 0x61
 8003aca:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003acc:	2b08      	cmp	r3, #8
 8003ace:	d14f      	bne.n	8003b70 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	212c      	movs	r1, #44	; 0x2c
 8003ad6:	fb01 f303 	mul.w	r3, r1, r3
 8003ada:	4413      	add	r3, r2
 8003adc:	335c      	adds	r3, #92	; 0x5c
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	1c5a      	adds	r2, r3, #1
 8003ae2:	6879      	ldr	r1, [r7, #4]
 8003ae4:	697b      	ldr	r3, [r7, #20]
 8003ae6:	202c      	movs	r0, #44	; 0x2c
 8003ae8:	fb00 f303 	mul.w	r3, r0, r3
 8003aec:	440b      	add	r3, r1
 8003aee:	335c      	adds	r3, #92	; 0x5c
 8003af0:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	697b      	ldr	r3, [r7, #20]
 8003af6:	212c      	movs	r1, #44	; 0x2c
 8003af8:	fb01 f303 	mul.w	r3, r1, r3
 8003afc:	4413      	add	r3, r2
 8003afe:	335c      	adds	r3, #92	; 0x5c
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d912      	bls.n	8003b2c <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	697b      	ldr	r3, [r7, #20]
 8003b0a:	212c      	movs	r1, #44	; 0x2c
 8003b0c:	fb01 f303 	mul.w	r3, r1, r3
 8003b10:	4413      	add	r3, r2
 8003b12:	335c      	adds	r3, #92	; 0x5c
 8003b14:	2200      	movs	r2, #0
 8003b16:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	212c      	movs	r1, #44	; 0x2c
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	4413      	add	r3, r2
 8003b24:	3360      	adds	r3, #96	; 0x60
 8003b26:	2204      	movs	r2, #4
 8003b28:	701a      	strb	r2, [r3, #0]
 8003b2a:	e021      	b.n	8003b70 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	697b      	ldr	r3, [r7, #20]
 8003b30:	212c      	movs	r1, #44	; 0x2c
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	4413      	add	r3, r2
 8003b38:	3360      	adds	r3, #96	; 0x60
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	015a      	lsls	r2, r3, #5
 8003b42:	69bb      	ldr	r3, [r7, #24]
 8003b44:	4413      	add	r3, r2
 8003b46:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003b54:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003b5c:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003b5e:	697b      	ldr	r3, [r7, #20]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	69bb      	ldr	r3, [r7, #24]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	693b      	ldr	r3, [r7, #16]
 8003b6e:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003b70:	697b      	ldr	r3, [r7, #20]
 8003b72:	015a      	lsls	r2, r3, #5
 8003b74:	69bb      	ldr	r3, [r7, #24]
 8003b76:	4413      	add	r3, r2
 8003b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b7c:	461a      	mov	r2, r3
 8003b7e:	2302      	movs	r3, #2
 8003b80:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	b2d9      	uxtb	r1, r3
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	202c      	movs	r0, #44	; 0x2c
 8003b8c:	fb00 f303 	mul.w	r3, r0, r3
 8003b90:	4413      	add	r3, r2
 8003b92:	3360      	adds	r3, #96	; 0x60
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	461a      	mov	r2, r3
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f009 fce9 	bl	800d570 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003b9e:	bf00      	nop
 8003ba0:	3720      	adds	r7, #32
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}

08003ba6 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ba6:	b580      	push	{r7, lr}
 8003ba8:	b08a      	sub	sp, #40	; 0x28
 8003baa:	af00      	add	r7, sp, #0
 8003bac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb6:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6a1b      	ldr	r3, [r3, #32]
 8003bbe:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003bc0:	69fb      	ldr	r3, [r7, #28]
 8003bc2:	f003 030f 	and.w	r3, r3, #15
 8003bc6:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003bc8:	69fb      	ldr	r3, [r7, #28]
 8003bca:	0c5b      	lsrs	r3, r3, #17
 8003bcc:	f003 030f 	and.w	r3, r3, #15
 8003bd0:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003bd2:	69fb      	ldr	r3, [r7, #28]
 8003bd4:	091b      	lsrs	r3, r3, #4
 8003bd6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003bda:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d004      	beq.n	8003bec <HCD_RXQLVL_IRQHandler+0x46>
 8003be2:	697b      	ldr	r3, [r7, #20]
 8003be4:	2b05      	cmp	r3, #5
 8003be6:	f000 80a9 	beq.w	8003d3c <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003bea:	e0aa      	b.n	8003d42 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 80a6 	beq.w	8003d40 <HCD_RXQLVL_IRQHandler+0x19a>
 8003bf4:	687a      	ldr	r2, [r7, #4]
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	212c      	movs	r1, #44	; 0x2c
 8003bfa:	fb01 f303 	mul.w	r3, r1, r3
 8003bfe:	4413      	add	r3, r2
 8003c00:	3344      	adds	r3, #68	; 0x44
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	f000 809b 	beq.w	8003d40 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003c0a:	687a      	ldr	r2, [r7, #4]
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	212c      	movs	r1, #44	; 0x2c
 8003c10:	fb01 f303 	mul.w	r3, r1, r3
 8003c14:	4413      	add	r3, r2
 8003c16:	3350      	adds	r3, #80	; 0x50
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	441a      	add	r2, r3
 8003c1e:	6879      	ldr	r1, [r7, #4]
 8003c20:	69bb      	ldr	r3, [r7, #24]
 8003c22:	202c      	movs	r0, #44	; 0x2c
 8003c24:	fb00 f303 	mul.w	r3, r0, r3
 8003c28:	440b      	add	r3, r1
 8003c2a:	334c      	adds	r3, #76	; 0x4c
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d87a      	bhi.n	8003d28 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	69bb      	ldr	r3, [r7, #24]
 8003c3a:	212c      	movs	r1, #44	; 0x2c
 8003c3c:	fb01 f303 	mul.w	r3, r1, r3
 8003c40:	4413      	add	r3, r2
 8003c42:	3344      	adds	r3, #68	; 0x44
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	693a      	ldr	r2, [r7, #16]
 8003c48:	b292      	uxth	r2, r2
 8003c4a:	4619      	mov	r1, r3
 8003c4c:	f003 f884 	bl	8006d58 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	69bb      	ldr	r3, [r7, #24]
 8003c54:	212c      	movs	r1, #44	; 0x2c
 8003c56:	fb01 f303 	mul.w	r3, r1, r3
 8003c5a:	4413      	add	r3, r2
 8003c5c:	3344      	adds	r3, #68	; 0x44
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	441a      	add	r2, r3
 8003c64:	6879      	ldr	r1, [r7, #4]
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	202c      	movs	r0, #44	; 0x2c
 8003c6a:	fb00 f303 	mul.w	r3, r0, r3
 8003c6e:	440b      	add	r3, r1
 8003c70:	3344      	adds	r3, #68	; 0x44
 8003c72:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003c74:	687a      	ldr	r2, [r7, #4]
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	212c      	movs	r1, #44	; 0x2c
 8003c7a:	fb01 f303 	mul.w	r3, r1, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	3350      	adds	r3, #80	; 0x50
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	441a      	add	r2, r3
 8003c88:	6879      	ldr	r1, [r7, #4]
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	202c      	movs	r0, #44	; 0x2c
 8003c8e:	fb00 f303 	mul.w	r3, r0, r3
 8003c92:	440b      	add	r3, r1
 8003c94:	3350      	adds	r3, #80	; 0x50
 8003c96:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	015a      	lsls	r2, r3, #5
 8003c9c:	6a3b      	ldr	r3, [r7, #32]
 8003c9e:	4413      	add	r3, r2
 8003ca0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ca4:	691b      	ldr	r3, [r3, #16]
 8003ca6:	0cdb      	lsrs	r3, r3, #19
 8003ca8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003cac:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003cae:	687a      	ldr	r2, [r7, #4]
 8003cb0:	69bb      	ldr	r3, [r7, #24]
 8003cb2:	212c      	movs	r1, #44	; 0x2c
 8003cb4:	fb01 f303 	mul.w	r3, r1, r3
 8003cb8:	4413      	add	r3, r2
 8003cba:	3340      	adds	r3, #64	; 0x40
 8003cbc:	881b      	ldrh	r3, [r3, #0]
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d13c      	bne.n	8003d40 <HCD_RXQLVL_IRQHandler+0x19a>
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d039      	beq.n	8003d40 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	6a3b      	ldr	r3, [r7, #32]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ce2:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ce4:	68bb      	ldr	r3, [r7, #8]
 8003ce6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003cea:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	015a      	lsls	r2, r3, #5
 8003cf0:	6a3b      	ldr	r3, [r7, #32]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	68bb      	ldr	r3, [r7, #8]
 8003cfc:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	212c      	movs	r1, #44	; 0x2c
 8003d04:	fb01 f303 	mul.w	r3, r1, r3
 8003d08:	4413      	add	r3, r2
 8003d0a:	3354      	adds	r3, #84	; 0x54
 8003d0c:	781b      	ldrb	r3, [r3, #0]
 8003d0e:	f083 0301 	eor.w	r3, r3, #1
 8003d12:	b2d8      	uxtb	r0, r3
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	69bb      	ldr	r3, [r7, #24]
 8003d18:	212c      	movs	r1, #44	; 0x2c
 8003d1a:	fb01 f303 	mul.w	r3, r1, r3
 8003d1e:	4413      	add	r3, r2
 8003d20:	3354      	adds	r3, #84	; 0x54
 8003d22:	4602      	mov	r2, r0
 8003d24:	701a      	strb	r2, [r3, #0]
      break;
 8003d26:	e00b      	b.n	8003d40 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d28:	687a      	ldr	r2, [r7, #4]
 8003d2a:	69bb      	ldr	r3, [r7, #24]
 8003d2c:	212c      	movs	r1, #44	; 0x2c
 8003d2e:	fb01 f303 	mul.w	r3, r1, r3
 8003d32:	4413      	add	r3, r2
 8003d34:	3360      	adds	r3, #96	; 0x60
 8003d36:	2204      	movs	r2, #4
 8003d38:	701a      	strb	r2, [r3, #0]
      break;
 8003d3a:	e001      	b.n	8003d40 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003d3c:	bf00      	nop
 8003d3e:	e000      	b.n	8003d42 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003d40:	bf00      	nop
  }
}
 8003d42:	bf00      	nop
 8003d44:	3728      	adds	r7, #40	; 0x28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b086      	sub	sp, #24
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d58:	697b      	ldr	r3, [r7, #20]
 8003d5a:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003d66:	693b      	ldr	r3, [r7, #16]
 8003d68:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003d76:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	f003 0302 	and.w	r3, r3, #2
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d10b      	bne.n	8003d9a <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f003 0301 	and.w	r3, r3, #1
 8003d88:	2b01      	cmp	r3, #1
 8003d8a:	d102      	bne.n	8003d92 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003d8c:	6878      	ldr	r0, [r7, #4]
 8003d8e:	f009 fbd3 	bl	800d538 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003d92:	68bb      	ldr	r3, [r7, #8]
 8003d94:	f043 0302 	orr.w	r3, r3, #2
 8003d98:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	f003 0308 	and.w	r3, r3, #8
 8003da0:	2b08      	cmp	r3, #8
 8003da2:	d132      	bne.n	8003e0a <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	f043 0308 	orr.w	r3, r3, #8
 8003daa:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	f003 0304 	and.w	r3, r3, #4
 8003db2:	2b04      	cmp	r3, #4
 8003db4:	d126      	bne.n	8003e04 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	699b      	ldr	r3, [r3, #24]
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d113      	bne.n	8003de6 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003dc4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003dc8:	d106      	bne.n	8003dd8 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2102      	movs	r1, #2
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f003 f92f 	bl	8007034 <USB_InitFSLSPClkSel>
 8003dd6:	e011      	b.n	8003dfc <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	2101      	movs	r1, #1
 8003dde:	4618      	mov	r0, r3
 8003de0:	f003 f928 	bl	8007034 <USB_InitFSLSPClkSel>
 8003de4:	e00a      	b.n	8003dfc <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d106      	bne.n	8003dfc <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003dee:	693b      	ldr	r3, [r7, #16]
 8003df0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003df4:	461a      	mov	r2, r3
 8003df6:	f64e 2360 	movw	r3, #60000	; 0xea60
 8003dfa:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f009 fbc5 	bl	800d58c <HAL_HCD_PortEnabled_Callback>
 8003e02:	e002      	b.n	8003e0a <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f009 fbcf 	bl	800d5a8 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	f003 0320 	and.w	r3, r3, #32
 8003e10:	2b20      	cmp	r3, #32
 8003e12:	d103      	bne.n	8003e1c <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	f043 0320 	orr.w	r3, r3, #32
 8003e1a:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003e22:	461a      	mov	r2, r3
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	6013      	str	r3, [r2, #0]
}
 8003e28:	bf00      	nop
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b084      	sub	sp, #16
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d101      	bne.n	8003e42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e12b      	b.n	800409a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e48:	b2db      	uxtb	r3, r3
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d106      	bne.n	8003e5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f7fd fad4 	bl	8001404 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2224      	movs	r2, #36	; 0x24
 8003e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	681a      	ldr	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	f022 0201 	bic.w	r2, r2, #1
 8003e72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	681a      	ldr	r2, [r3, #0]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003e92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003e94:	f002 fc6e 	bl	8006774 <HAL_RCC_GetPCLK1Freq>
 8003e98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4a81      	ldr	r2, [pc, #516]	; (80040a4 <HAL_I2C_Init+0x274>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d807      	bhi.n	8003eb4 <HAL_I2C_Init+0x84>
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4a80      	ldr	r2, [pc, #512]	; (80040a8 <HAL_I2C_Init+0x278>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	bf94      	ite	ls
 8003eac:	2301      	movls	r3, #1
 8003eae:	2300      	movhi	r3, #0
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	e006      	b.n	8003ec2 <HAL_I2C_Init+0x92>
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	4a7d      	ldr	r2, [pc, #500]	; (80040ac <HAL_I2C_Init+0x27c>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	bf94      	ite	ls
 8003ebc:	2301      	movls	r3, #1
 8003ebe:	2300      	movhi	r3, #0
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d001      	beq.n	8003eca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	e0e7      	b.n	800409a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	4a78      	ldr	r2, [pc, #480]	; (80040b0 <HAL_I2C_Init+0x280>)
 8003ece:	fba2 2303 	umull	r2, r3, r2, r3
 8003ed2:	0c9b      	lsrs	r3, r3, #18
 8003ed4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	68ba      	ldr	r2, [r7, #8]
 8003ee6:	430a      	orrs	r2, r1
 8003ee8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	6a1b      	ldr	r3, [r3, #32]
 8003ef0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	4a6a      	ldr	r2, [pc, #424]	; (80040a4 <HAL_I2C_Init+0x274>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d802      	bhi.n	8003f04 <HAL_I2C_Init+0xd4>
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	3301      	adds	r3, #1
 8003f02:	e009      	b.n	8003f18 <HAL_I2C_Init+0xe8>
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003f0a:	fb02 f303 	mul.w	r3, r2, r3
 8003f0e:	4a69      	ldr	r2, [pc, #420]	; (80040b4 <HAL_I2C_Init+0x284>)
 8003f10:	fba2 2303 	umull	r2, r3, r2, r3
 8003f14:	099b      	lsrs	r3, r3, #6
 8003f16:	3301      	adds	r3, #1
 8003f18:	687a      	ldr	r2, [r7, #4]
 8003f1a:	6812      	ldr	r2, [r2, #0]
 8003f1c:	430b      	orrs	r3, r1
 8003f1e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	69db      	ldr	r3, [r3, #28]
 8003f26:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003f2a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	685b      	ldr	r3, [r3, #4]
 8003f32:	495c      	ldr	r1, [pc, #368]	; (80040a4 <HAL_I2C_Init+0x274>)
 8003f34:	428b      	cmp	r3, r1
 8003f36:	d819      	bhi.n	8003f6c <HAL_I2C_Init+0x13c>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	1e59      	subs	r1, r3, #1
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	005b      	lsls	r3, r3, #1
 8003f42:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f46:	1c59      	adds	r1, r3, #1
 8003f48:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003f4c:	400b      	ands	r3, r1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d00a      	beq.n	8003f68 <HAL_I2C_Init+0x138>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	1e59      	subs	r1, r3, #1
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f60:	3301      	adds	r3, #1
 8003f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f66:	e051      	b.n	800400c <HAL_I2C_Init+0x1dc>
 8003f68:	2304      	movs	r3, #4
 8003f6a:	e04f      	b.n	800400c <HAL_I2C_Init+0x1dc>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	689b      	ldr	r3, [r3, #8]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d111      	bne.n	8003f98 <HAL_I2C_Init+0x168>
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	1e58      	subs	r0, r3, #1
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6859      	ldr	r1, [r3, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	005b      	lsls	r3, r3, #1
 8003f80:	440b      	add	r3, r1
 8003f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8003f86:	3301      	adds	r3, #1
 8003f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	bf0c      	ite	eq
 8003f90:	2301      	moveq	r3, #1
 8003f92:	2300      	movne	r3, #0
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	e012      	b.n	8003fbe <HAL_I2C_Init+0x18e>
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	1e58      	subs	r0, r3, #1
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6859      	ldr	r1, [r3, #4]
 8003fa0:	460b      	mov	r3, r1
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	440b      	add	r3, r1
 8003fa6:	0099      	lsls	r1, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fae:	3301      	adds	r3, #1
 8003fb0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	bf0c      	ite	eq
 8003fb8:	2301      	moveq	r3, #1
 8003fba:	2300      	movne	r3, #0
 8003fbc:	b2db      	uxtb	r3, r3
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d001      	beq.n	8003fc6 <HAL_I2C_Init+0x196>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e022      	b.n	800400c <HAL_I2C_Init+0x1dc>
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10e      	bne.n	8003fec <HAL_I2C_Init+0x1bc>
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	1e58      	subs	r0, r3, #1
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6859      	ldr	r1, [r3, #4]
 8003fd6:	460b      	mov	r3, r1
 8003fd8:	005b      	lsls	r3, r3, #1
 8003fda:	440b      	add	r3, r1
 8003fdc:	fbb0 f3f3 	udiv	r3, r0, r3
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003fe6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003fea:	e00f      	b.n	800400c <HAL_I2C_Init+0x1dc>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	1e58      	subs	r0, r3, #1
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6859      	ldr	r1, [r3, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	440b      	add	r3, r1
 8003ffa:	0099      	lsls	r1, r3, #2
 8003ffc:	440b      	add	r3, r1
 8003ffe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004002:	3301      	adds	r3, #1
 8004004:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004008:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800400c:	6879      	ldr	r1, [r7, #4]
 800400e:	6809      	ldr	r1, [r1, #0]
 8004010:	4313      	orrs	r3, r2
 8004012:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	69da      	ldr	r2, [r3, #28]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6a1b      	ldr	r3, [r3, #32]
 8004026:	431a      	orrs	r2, r3
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	430a      	orrs	r2, r1
 800402e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800403a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6911      	ldr	r1, [r2, #16]
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	68d2      	ldr	r2, [r2, #12]
 8004046:	4311      	orrs	r1, r2
 8004048:	687a      	ldr	r2, [r7, #4]
 800404a:	6812      	ldr	r2, [r2, #0]
 800404c:	430b      	orrs	r3, r1
 800404e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68db      	ldr	r3, [r3, #12]
 8004056:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	695a      	ldr	r2, [r3, #20]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	699b      	ldr	r3, [r3, #24]
 8004062:	431a      	orrs	r2, r3
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	430a      	orrs	r2, r1
 800406a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2220      	movs	r2, #32
 8004086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	000186a0 	.word	0x000186a0
 80040a8:	001e847f 	.word	0x001e847f
 80040ac:	003d08ff 	.word	0x003d08ff
 80040b0:	431bde83 	.word	0x431bde83
 80040b4:	10624dd3 	.word	0x10624dd3

080040b8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	b088      	sub	sp, #32
 80040bc:	af02      	add	r7, sp, #8
 80040be:	60f8      	str	r0, [r7, #12]
 80040c0:	607a      	str	r2, [r7, #4]
 80040c2:	461a      	mov	r2, r3
 80040c4:	460b      	mov	r3, r1
 80040c6:	817b      	strh	r3, [r7, #10]
 80040c8:	4613      	mov	r3, r2
 80040ca:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040cc:	f7fd fbb6 	bl	800183c <HAL_GetTick>
 80040d0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040d8:	b2db      	uxtb	r3, r3
 80040da:	2b20      	cmp	r3, #32
 80040dc:	f040 80e0 	bne.w	80042a0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	9300      	str	r3, [sp, #0]
 80040e4:	2319      	movs	r3, #25
 80040e6:	2201      	movs	r2, #1
 80040e8:	4970      	ldr	r1, [pc, #448]	; (80042ac <HAL_I2C_Master_Transmit+0x1f4>)
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 fc58 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80040f6:	2302      	movs	r3, #2
 80040f8:	e0d3      	b.n	80042a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004100:	2b01      	cmp	r3, #1
 8004102:	d101      	bne.n	8004108 <HAL_I2C_Master_Transmit+0x50>
 8004104:	2302      	movs	r3, #2
 8004106:	e0cc      	b.n	80042a2 <HAL_I2C_Master_Transmit+0x1ea>
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2201      	movs	r2, #1
 800410c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b01      	cmp	r3, #1
 800411c:	d007      	beq.n	800412e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f042 0201 	orr.w	r2, r2, #1
 800412c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	681a      	ldr	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800413c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2221      	movs	r2, #33	; 0x21
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	2210      	movs	r2, #16
 800414a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	2200      	movs	r2, #0
 8004152:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	687a      	ldr	r2, [r7, #4]
 8004158:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	893a      	ldrh	r2, [r7, #8]
 800415e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004164:	b29a      	uxth	r2, r3
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	4a50      	ldr	r2, [pc, #320]	; (80042b0 <HAL_I2C_Master_Transmit+0x1f8>)
 800416e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004170:	8979      	ldrh	r1, [r7, #10]
 8004172:	697b      	ldr	r3, [r7, #20]
 8004174:	6a3a      	ldr	r2, [r7, #32]
 8004176:	68f8      	ldr	r0, [r7, #12]
 8004178:	f000 fac2 	bl	8004700 <I2C_MasterRequestWrite>
 800417c:	4603      	mov	r3, r0
 800417e:	2b00      	cmp	r3, #0
 8004180:	d001      	beq.n	8004186 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e08d      	b.n	80042a2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004186:	2300      	movs	r3, #0
 8004188:	613b      	str	r3, [r7, #16]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695b      	ldr	r3, [r3, #20]
 8004190:	613b      	str	r3, [r7, #16]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	613b      	str	r3, [r7, #16]
 800419a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800419c:	e066      	b.n	800426c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	6a39      	ldr	r1, [r7, #32]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 fcd2 	bl	8004b4c <I2C_WaitOnTXEFlagUntilTimeout>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d00d      	beq.n	80041ca <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b2:	2b04      	cmp	r3, #4
 80041b4:	d107      	bne.n	80041c6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041c4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041c6:	2301      	movs	r3, #1
 80041c8:	e06b      	b.n	80042a2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ce:	781a      	ldrb	r2, [r3, #0]
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	1c5a      	adds	r2, r3, #1
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041e4:	b29b      	uxth	r3, r3
 80041e6:	3b01      	subs	r3, #1
 80041e8:	b29a      	uxth	r2, r3
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041f2:	3b01      	subs	r3, #1
 80041f4:	b29a      	uxth	r2, r3
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	695b      	ldr	r3, [r3, #20]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b04      	cmp	r3, #4
 8004206:	d11b      	bne.n	8004240 <HAL_I2C_Master_Transmit+0x188>
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800420c:	2b00      	cmp	r3, #0
 800420e:	d017      	beq.n	8004240 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	781a      	ldrb	r2, [r3, #0]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	1c5a      	adds	r2, r3, #1
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422a:	b29b      	uxth	r3, r3
 800422c:	3b01      	subs	r3, #1
 800422e:	b29a      	uxth	r2, r3
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004238:	3b01      	subs	r3, #1
 800423a:	b29a      	uxth	r2, r3
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004240:	697a      	ldr	r2, [r7, #20]
 8004242:	6a39      	ldr	r1, [r7, #32]
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	f000 fcc2 	bl	8004bce <I2C_WaitOnBTFFlagUntilTimeout>
 800424a:	4603      	mov	r3, r0
 800424c:	2b00      	cmp	r3, #0
 800424e:	d00d      	beq.n	800426c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004254:	2b04      	cmp	r3, #4
 8004256:	d107      	bne.n	8004268 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004266:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e01a      	b.n	80042a2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004270:	2b00      	cmp	r3, #0
 8004272:	d194      	bne.n	800419e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681a      	ldr	r2, [r3, #0]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004282:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800429c:	2300      	movs	r3, #0
 800429e:	e000      	b.n	80042a2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80042a0:	2302      	movs	r3, #2
  }
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	00100002 	.word	0x00100002
 80042b0:	ffff0000 	.word	0xffff0000

080042b4 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042b4:	b580      	push	{r7, lr}
 80042b6:	b08c      	sub	sp, #48	; 0x30
 80042b8:	af02      	add	r7, sp, #8
 80042ba:	60f8      	str	r0, [r7, #12]
 80042bc:	607a      	str	r2, [r7, #4]
 80042be:	461a      	mov	r2, r3
 80042c0:	460b      	mov	r3, r1
 80042c2:	817b      	strh	r3, [r7, #10]
 80042c4:	4613      	mov	r3, r2
 80042c6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80042c8:	f7fd fab8 	bl	800183c <HAL_GetTick>
 80042cc:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b20      	cmp	r3, #32
 80042d8:	f040 820b 	bne.w	80046f2 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80042dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042de:	9300      	str	r3, [sp, #0]
 80042e0:	2319      	movs	r3, #25
 80042e2:	2201      	movs	r2, #1
 80042e4:	497c      	ldr	r1, [pc, #496]	; (80044d8 <HAL_I2C_Master_Receive+0x224>)
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f000 fb5a 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 80042ec:	4603      	mov	r3, r0
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d001      	beq.n	80042f6 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80042f2:	2302      	movs	r3, #2
 80042f4:	e1fe      	b.n	80046f4 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042fc:	2b01      	cmp	r3, #1
 80042fe:	d101      	bne.n	8004304 <HAL_I2C_Master_Receive+0x50>
 8004300:	2302      	movs	r3, #2
 8004302:	e1f7      	b.n	80046f4 <HAL_I2C_Master_Receive+0x440>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2201      	movs	r2, #1
 8004308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b01      	cmp	r3, #1
 8004318:	d007      	beq.n	800432a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f042 0201 	orr.w	r2, r2, #1
 8004328:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681a      	ldr	r2, [r3, #0]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004338:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	2222      	movs	r2, #34	; 0x22
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2210      	movs	r2, #16
 8004346:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	2200      	movs	r2, #0
 800434e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	893a      	ldrh	r2, [r7, #8]
 800435a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004360:	b29a      	uxth	r2, r3
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	4a5c      	ldr	r2, [pc, #368]	; (80044dc <HAL_I2C_Master_Receive+0x228>)
 800436a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800436c:	8979      	ldrh	r1, [r7, #10]
 800436e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004370:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f000 fa46 	bl	8004804 <I2C_MasterRequestRead>
 8004378:	4603      	mov	r3, r0
 800437a:	2b00      	cmp	r3, #0
 800437c:	d001      	beq.n	8004382 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e1b8      	b.n	80046f4 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004386:	2b00      	cmp	r3, #0
 8004388:	d113      	bne.n	80043b2 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438a:	2300      	movs	r3, #0
 800438c:	623b      	str	r3, [r7, #32]
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	623b      	str	r3, [r7, #32]
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	623b      	str	r3, [r7, #32]
 800439e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ae:	601a      	str	r2, [r3, #0]
 80043b0:	e18c      	b.n	80046cc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043b6:	2b01      	cmp	r3, #1
 80043b8:	d11b      	bne.n	80043f2 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	681a      	ldr	r2, [r3, #0]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043c8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ca:	2300      	movs	r3, #0
 80043cc:	61fb      	str	r3, [r7, #28]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	61fb      	str	r3, [r7, #28]
 80043de:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043ee:	601a      	str	r2, [r3, #0]
 80043f0:	e16c      	b.n	80046cc <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d11b      	bne.n	8004432 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004408:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004418:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800441a:	2300      	movs	r3, #0
 800441c:	61bb      	str	r3, [r7, #24]
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	695b      	ldr	r3, [r3, #20]
 8004424:	61bb      	str	r3, [r7, #24]
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	699b      	ldr	r3, [r3, #24]
 800442c:	61bb      	str	r3, [r7, #24]
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	e14c      	b.n	80046cc <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004440:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004442:	2300      	movs	r3, #0
 8004444:	617b      	str	r3, [r7, #20]
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	695b      	ldr	r3, [r3, #20]
 800444c:	617b      	str	r3, [r7, #20]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	699b      	ldr	r3, [r3, #24]
 8004454:	617b      	str	r3, [r7, #20]
 8004456:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004458:	e138      	b.n	80046cc <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800445e:	2b03      	cmp	r3, #3
 8004460:	f200 80f1 	bhi.w	8004646 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004468:	2b01      	cmp	r3, #1
 800446a:	d123      	bne.n	80044b4 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800446c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004470:	68f8      	ldr	r0, [r7, #12]
 8004472:	f000 fbed 	bl	8004c50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d001      	beq.n	8004480 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800447c:	2301      	movs	r3, #1
 800447e:	e139      	b.n	80046f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	691a      	ldr	r2, [r3, #16]
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800449c:	3b01      	subs	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044a8:	b29b      	uxth	r3, r3
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80044b2:	e10b      	b.n	80046cc <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044b8:	2b02      	cmp	r3, #2
 80044ba:	d14e      	bne.n	800455a <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044be:	9300      	str	r3, [sp, #0]
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	2200      	movs	r2, #0
 80044c4:	4906      	ldr	r1, [pc, #24]	; (80044e0 <HAL_I2C_Master_Receive+0x22c>)
 80044c6:	68f8      	ldr	r0, [r7, #12]
 80044c8:	f000 fa6a 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d008      	beq.n	80044e4 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e10e      	b.n	80046f4 <HAL_I2C_Master_Receive+0x440>
 80044d6:	bf00      	nop
 80044d8:	00100002 	.word	0x00100002
 80044dc:	ffff0000 	.word	0xffff0000
 80044e0:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691a      	ldr	r2, [r3, #16]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	b2d2      	uxtb	r2, r2
 8004500:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004506:	1c5a      	adds	r2, r3, #1
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004510:	3b01      	subs	r3, #1
 8004512:	b29a      	uxth	r2, r3
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800451c:	b29b      	uxth	r3, r3
 800451e:	3b01      	subs	r3, #1
 8004520:	b29a      	uxth	r2, r3
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	691a      	ldr	r2, [r3, #16]
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004530:	b2d2      	uxtb	r2, r2
 8004532:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004538:	1c5a      	adds	r2, r3, #1
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004542:	3b01      	subs	r3, #1
 8004544:	b29a      	uxth	r2, r3
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800454e:	b29b      	uxth	r3, r3
 8004550:	3b01      	subs	r3, #1
 8004552:	b29a      	uxth	r2, r3
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004558:	e0b8      	b.n	80046cc <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	9300      	str	r3, [sp, #0]
 800455e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004560:	2200      	movs	r2, #0
 8004562:	4966      	ldr	r1, [pc, #408]	; (80046fc <HAL_I2C_Master_Receive+0x448>)
 8004564:	68f8      	ldr	r0, [r7, #12]
 8004566:	f000 fa1b 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 800456a:	4603      	mov	r3, r0
 800456c:	2b00      	cmp	r3, #0
 800456e:	d001      	beq.n	8004574 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004570:	2301      	movs	r3, #1
 8004572:	e0bf      	b.n	80046f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004582:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	691a      	ldr	r2, [r3, #16]
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458e:	b2d2      	uxtb	r2, r2
 8004590:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004596:	1c5a      	adds	r2, r3, #1
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045a0:	3b01      	subs	r3, #1
 80045a2:	b29a      	uxth	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ac:	b29b      	uxth	r3, r3
 80045ae:	3b01      	subs	r3, #1
 80045b0:	b29a      	uxth	r2, r3
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b8:	9300      	str	r3, [sp, #0]
 80045ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045bc:	2200      	movs	r2, #0
 80045be:	494f      	ldr	r1, [pc, #316]	; (80046fc <HAL_I2C_Master_Receive+0x448>)
 80045c0:	68f8      	ldr	r0, [r7, #12]
 80045c2:	f000 f9ed 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d001      	beq.n	80045d0 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e091      	b.n	80046f4 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	681a      	ldr	r2, [r3, #0]
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045de:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	691a      	ldr	r2, [r3, #16]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	b2d2      	uxtb	r2, r2
 80045ec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	1c5a      	adds	r2, r3, #1
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80045fc:	3b01      	subs	r3, #1
 80045fe:	b29a      	uxth	r2, r3
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004608:	b29b      	uxth	r3, r3
 800460a:	3b01      	subs	r3, #1
 800460c:	b29a      	uxth	r2, r3
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	691a      	ldr	r2, [r3, #16]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461c:	b2d2      	uxtb	r2, r2
 800461e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	1c5a      	adds	r2, r3, #1
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800462e:	3b01      	subs	r3, #1
 8004630:	b29a      	uxth	r2, r3
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800463a:	b29b      	uxth	r3, r3
 800463c:	3b01      	subs	r3, #1
 800463e:	b29a      	uxth	r2, r3
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004644:	e042      	b.n	80046cc <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004648:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 fb00 	bl	8004c50 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	e04c      	b.n	80046f4 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691a      	ldr	r2, [r3, #16]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	b2d2      	uxtb	r2, r2
 8004666:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800466c:	1c5a      	adds	r2, r3, #1
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004676:	3b01      	subs	r3, #1
 8004678:	b29a      	uxth	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004682:	b29b      	uxth	r3, r3
 8004684:	3b01      	subs	r3, #1
 8004686:	b29a      	uxth	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	f003 0304 	and.w	r3, r3, #4
 8004696:	2b04      	cmp	r3, #4
 8004698:	d118      	bne.n	80046cc <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	691a      	ldr	r2, [r3, #16]
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	b2d2      	uxtb	r2, r2
 80046a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ac:	1c5a      	adds	r2, r3, #1
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046b6:	3b01      	subs	r3, #1
 80046b8:	b29a      	uxth	r2, r3
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046c2:	b29b      	uxth	r3, r3
 80046c4:	3b01      	subs	r3, #1
 80046c6:	b29a      	uxth	r2, r3
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	f47f aec2 	bne.w	800445a <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2220      	movs	r2, #32
 80046da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	2200      	movs	r2, #0
 80046e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80046ee:	2300      	movs	r3, #0
 80046f0:	e000      	b.n	80046f4 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80046f2:	2302      	movs	r3, #2
  }
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3728      	adds	r7, #40	; 0x28
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}
 80046fc:	00010004 	.word	0x00010004

08004700 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b088      	sub	sp, #32
 8004704:	af02      	add	r7, sp, #8
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	607a      	str	r2, [r7, #4]
 800470a:	603b      	str	r3, [r7, #0]
 800470c:	460b      	mov	r3, r1
 800470e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004714:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b08      	cmp	r3, #8
 800471a:	d006      	beq.n	800472a <I2C_MasterRequestWrite+0x2a>
 800471c:	697b      	ldr	r3, [r7, #20]
 800471e:	2b01      	cmp	r3, #1
 8004720:	d003      	beq.n	800472a <I2C_MasterRequestWrite+0x2a>
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004728:	d108      	bne.n	800473c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	e00b      	b.n	8004754 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004740:	2b12      	cmp	r3, #18
 8004742:	d107      	bne.n	8004754 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004752:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	9300      	str	r3, [sp, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2200      	movs	r2, #0
 800475c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004760:	68f8      	ldr	r0, [r7, #12]
 8004762:	f000 f91d 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 8004766:	4603      	mov	r3, r0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d00d      	beq.n	8004788 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800477a:	d103      	bne.n	8004784 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004782:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004784:	2303      	movs	r3, #3
 8004786:	e035      	b.n	80047f4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	691b      	ldr	r3, [r3, #16]
 800478c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004790:	d108      	bne.n	80047a4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004792:	897b      	ldrh	r3, [r7, #10]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	461a      	mov	r2, r3
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80047a0:	611a      	str	r2, [r3, #16]
 80047a2:	e01b      	b.n	80047dc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047a4:	897b      	ldrh	r3, [r7, #10]
 80047a6:	11db      	asrs	r3, r3, #7
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	f003 0306 	and.w	r3, r3, #6
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	f063 030f 	orn	r3, r3, #15
 80047b4:	b2da      	uxtb	r2, r3
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	490e      	ldr	r1, [pc, #56]	; (80047fc <I2C_MasterRequestWrite+0xfc>)
 80047c2:	68f8      	ldr	r0, [r7, #12]
 80047c4:	f000 f943 	bl	8004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047c8:	4603      	mov	r3, r0
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d001      	beq.n	80047d2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80047ce:	2301      	movs	r3, #1
 80047d0:	e010      	b.n	80047f4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80047d2:	897b      	ldrh	r3, [r7, #10]
 80047d4:	b2da      	uxtb	r2, r3
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	687a      	ldr	r2, [r7, #4]
 80047e0:	4907      	ldr	r1, [pc, #28]	; (8004800 <I2C_MasterRequestWrite+0x100>)
 80047e2:	68f8      	ldr	r0, [r7, #12]
 80047e4:	f000 f933 	bl	8004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80047e8:	4603      	mov	r3, r0
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d001      	beq.n	80047f2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e000      	b.n	80047f4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80047f2:	2300      	movs	r3, #0
}
 80047f4:	4618      	mov	r0, r3
 80047f6:	3718      	adds	r7, #24
 80047f8:	46bd      	mov	sp, r7
 80047fa:	bd80      	pop	{r7, pc}
 80047fc:	00010008 	.word	0x00010008
 8004800:	00010002 	.word	0x00010002

08004804 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b088      	sub	sp, #32
 8004808:	af02      	add	r7, sp, #8
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	607a      	str	r2, [r7, #4]
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	460b      	mov	r3, r1
 8004812:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004818:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	681a      	ldr	r2, [r3, #0]
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004828:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	2b08      	cmp	r3, #8
 800482e:	d006      	beq.n	800483e <I2C_MasterRequestRead+0x3a>
 8004830:	697b      	ldr	r3, [r7, #20]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d003      	beq.n	800483e <I2C_MasterRequestRead+0x3a>
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800483c:	d108      	bne.n	8004850 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800484c:	601a      	str	r2, [r3, #0]
 800484e:	e00b      	b.n	8004868 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004854:	2b11      	cmp	r3, #17
 8004856:	d107      	bne.n	8004868 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	681a      	ldr	r2, [r3, #0]
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004866:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	9300      	str	r3, [sp, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f893 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d00d      	beq.n	800489c <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800488a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800488e:	d103      	bne.n	8004898 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004896:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e079      	b.n	8004990 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	691b      	ldr	r3, [r3, #16]
 80048a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80048a4:	d108      	bne.n	80048b8 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048a6:	897b      	ldrh	r3, [r7, #10]
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	f043 0301 	orr.w	r3, r3, #1
 80048ae:	b2da      	uxtb	r2, r3
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	611a      	str	r2, [r3, #16]
 80048b6:	e05f      	b.n	8004978 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80048b8:	897b      	ldrh	r3, [r7, #10]
 80048ba:	11db      	asrs	r3, r3, #7
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	f003 0306 	and.w	r3, r3, #6
 80048c2:	b2db      	uxtb	r3, r3
 80048c4:	f063 030f 	orn	r3, r3, #15
 80048c8:	b2da      	uxtb	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	4930      	ldr	r1, [pc, #192]	; (8004998 <I2C_MasterRequestRead+0x194>)
 80048d6:	68f8      	ldr	r0, [r7, #12]
 80048d8:	f000 f8b9 	bl	8004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048dc:	4603      	mov	r3, r0
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d001      	beq.n	80048e6 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e054      	b.n	8004990 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80048e6:	897b      	ldrh	r3, [r7, #10]
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	4929      	ldr	r1, [pc, #164]	; (800499c <I2C_MasterRequestRead+0x198>)
 80048f6:	68f8      	ldr	r0, [r7, #12]
 80048f8:	f000 f8a9 	bl	8004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d001      	beq.n	8004906 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
 8004904:	e044      	b.n	8004990 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004906:	2300      	movs	r3, #0
 8004908:	613b      	str	r3, [r7, #16]
 800490a:	68fb      	ldr	r3, [r7, #12]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	613b      	str	r3, [r7, #16]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	699b      	ldr	r3, [r3, #24]
 8004918:	613b      	str	r3, [r7, #16]
 800491a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800492a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 f831 	bl	80049a0 <I2C_WaitOnFlagUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00d      	beq.n	8004960 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004952:	d103      	bne.n	800495c <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	f44f 7200 	mov.w	r2, #512	; 0x200
 800495a:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 800495c:	2303      	movs	r3, #3
 800495e:	e017      	b.n	8004990 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004960:	897b      	ldrh	r3, [r7, #10]
 8004962:	11db      	asrs	r3, r3, #7
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f003 0306 	and.w	r3, r3, #6
 800496a:	b2db      	uxtb	r3, r3
 800496c:	f063 030e 	orn	r3, r3, #14
 8004970:	b2da      	uxtb	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	687a      	ldr	r2, [r7, #4]
 800497c:	4907      	ldr	r1, [pc, #28]	; (800499c <I2C_MasterRequestRead+0x198>)
 800497e:	68f8      	ldr	r0, [r7, #12]
 8004980:	f000 f865 	bl	8004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800498a:	2301      	movs	r3, #1
 800498c:	e000      	b.n	8004990 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3718      	adds	r7, #24
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}
 8004998:	00010008 	.word	0x00010008
 800499c:	00010002 	.word	0x00010002

080049a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b084      	sub	sp, #16
 80049a4:	af00      	add	r7, sp, #0
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	4613      	mov	r3, r2
 80049ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049b0:	e025      	b.n	80049fe <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049b8:	d021      	beq.n	80049fe <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049ba:	f7fc ff3f 	bl	800183c <HAL_GetTick>
 80049be:	4602      	mov	r2, r0
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	1ad3      	subs	r3, r2, r3
 80049c4:	683a      	ldr	r2, [r7, #0]
 80049c6:	429a      	cmp	r2, r3
 80049c8:	d302      	bcc.n	80049d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d116      	bne.n	80049fe <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2220      	movs	r2, #32
 80049da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ea:	f043 0220 	orr.w	r2, r3, #32
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	2200      	movs	r2, #0
 80049f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e023      	b.n	8004a46 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	0c1b      	lsrs	r3, r3, #16
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	2b01      	cmp	r3, #1
 8004a06:	d10d      	bne.n	8004a24 <I2C_WaitOnFlagUntilTimeout+0x84>
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	43da      	mvns	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	4013      	ands	r3, r2
 8004a14:	b29b      	uxth	r3, r3
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	bf0c      	ite	eq
 8004a1a:	2301      	moveq	r3, #1
 8004a1c:	2300      	movne	r3, #0
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	461a      	mov	r2, r3
 8004a22:	e00c      	b.n	8004a3e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	43da      	mvns	r2, r3
 8004a2c:	68bb      	ldr	r3, [r7, #8]
 8004a2e:	4013      	ands	r3, r2
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	bf0c      	ite	eq
 8004a36:	2301      	moveq	r3, #1
 8004a38:	2300      	movne	r3, #0
 8004a3a:	b2db      	uxtb	r3, r3
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	79fb      	ldrb	r3, [r7, #7]
 8004a40:	429a      	cmp	r2, r3
 8004a42:	d0b6      	beq.n	80049b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004a44:	2300      	movs	r3, #0
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	3710      	adds	r7, #16
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bd80      	pop	{r7, pc}

08004a4e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	60f8      	str	r0, [r7, #12]
 8004a56:	60b9      	str	r1, [r7, #8]
 8004a58:	607a      	str	r2, [r7, #4]
 8004a5a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004a5c:	e051      	b.n	8004b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a6c:	d123      	bne.n	8004ab6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a7c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004a86:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2220      	movs	r2, #32
 8004a92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa2:	f043 0204 	orr.w	r2, r3, #4
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e046      	b.n	8004b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004abc:	d021      	beq.n	8004b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004abe:	f7fc febd 	bl	800183c <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	687a      	ldr	r2, [r7, #4]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d302      	bcc.n	8004ad4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d116      	bne.n	8004b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aee:	f043 0220 	orr.w	r2, r3, #32
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e020      	b.n	8004b44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	0c1b      	lsrs	r3, r3, #16
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d10c      	bne.n	8004b26 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	43da      	mvns	r2, r3
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	4013      	ands	r3, r2
 8004b18:	b29b      	uxth	r3, r3
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	bf14      	ite	ne
 8004b1e:	2301      	movne	r3, #1
 8004b20:	2300      	moveq	r3, #0
 8004b22:	b2db      	uxtb	r3, r3
 8004b24:	e00b      	b.n	8004b3e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	43da      	mvns	r2, r3
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	4013      	ands	r3, r2
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	bf14      	ite	ne
 8004b38:	2301      	movne	r3, #1
 8004b3a:	2300      	moveq	r3, #0
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d18d      	bne.n	8004a5e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3710      	adds	r7, #16
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004b58:	e02d      	b.n	8004bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004b5a:	68f8      	ldr	r0, [r7, #12]
 8004b5c:	f000 f8ce 	bl	8004cfc <I2C_IsAcknowledgeFailed>
 8004b60:	4603      	mov	r3, r0
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d001      	beq.n	8004b6a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e02d      	b.n	8004bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b70:	d021      	beq.n	8004bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b72:	f7fc fe63 	bl	800183c <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	429a      	cmp	r2, r3
 8004b80:	d302      	bcc.n	8004b88 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d116      	bne.n	8004bb6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	f043 0220 	orr.w	r2, r3, #32
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e007      	b.n	8004bc6 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	695b      	ldr	r3, [r3, #20]
 8004bbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bc0:	2b80      	cmp	r3, #128	; 0x80
 8004bc2:	d1ca      	bne.n	8004b5a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004bc4:	2300      	movs	r3, #0
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3710      	adds	r7, #16
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b084      	sub	sp, #16
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	60f8      	str	r0, [r7, #12]
 8004bd6:	60b9      	str	r1, [r7, #8]
 8004bd8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004bda:	e02d      	b.n	8004c38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004bdc:	68f8      	ldr	r0, [r7, #12]
 8004bde:	f000 f88d 	bl	8004cfc <I2C_IsAcknowledgeFailed>
 8004be2:	4603      	mov	r3, r0
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	e02d      	b.n	8004c48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bf2:	d021      	beq.n	8004c38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf4:	f7fc fe22 	bl	800183c <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	68ba      	ldr	r2, [r7, #8]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d302      	bcc.n	8004c0a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d116      	bne.n	8004c38 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2220      	movs	r2, #32
 8004c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c24:	f043 0220 	orr.w	r2, r3, #32
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2200      	movs	r2, #0
 8004c30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c34:	2301      	movs	r3, #1
 8004c36:	e007      	b.n	8004c48 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	695b      	ldr	r3, [r3, #20]
 8004c3e:	f003 0304 	and.w	r3, r3, #4
 8004c42:	2b04      	cmp	r3, #4
 8004c44:	d1ca      	bne.n	8004bdc <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004c46:	2300      	movs	r3, #0
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	60f8      	str	r0, [r7, #12]
 8004c58:	60b9      	str	r1, [r7, #8]
 8004c5a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004c5c:	e042      	b.n	8004ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	695b      	ldr	r3, [r3, #20]
 8004c64:	f003 0310 	and.w	r3, r3, #16
 8004c68:	2b10      	cmp	r3, #16
 8004c6a:	d119      	bne.n	8004ca0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f06f 0210 	mvn.w	r2, #16
 8004c74:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	2200      	movs	r2, #0
 8004c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	2220      	movs	r2, #32
 8004c80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	2200      	movs	r2, #0
 8004c98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e029      	b.n	8004cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ca0:	f7fc fdcc 	bl	800183c <HAL_GetTick>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	1ad3      	subs	r3, r2, r3
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d302      	bcc.n	8004cb6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d116      	bne.n	8004ce4 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd0:	f043 0220 	orr.w	r2, r3, #32
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e007      	b.n	8004cf4 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	d1b5      	bne.n	8004c5e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004cf2:	2300      	movs	r3, #0
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	bd80      	pop	{r7, pc}

08004cfc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	695b      	ldr	r3, [r3, #20]
 8004d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d12:	d11b      	bne.n	8004d4c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004d1c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2200      	movs	r2, #0
 8004d22:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2220      	movs	r2, #32
 8004d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d38:	f043 0204 	orr.w	r2, r3, #4
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004d48:	2301      	movs	r3, #1
 8004d4a:	e000      	b.n	8004d4e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	370c      	adds	r7, #12
 8004d52:	46bd      	mov	sp, r7
 8004d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d58:	4770      	bx	lr
	...

08004d5c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b088      	sub	sp, #32
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d101      	bne.n	8004d6e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e128      	b.n	8004fc0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d74:	b2db      	uxtb	r3, r3
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d109      	bne.n	8004d8e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a90      	ldr	r2, [pc, #576]	; (8004fc8 <HAL_I2S_Init+0x26c>)
 8004d86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004d88:	6878      	ldr	r0, [r7, #4]
 8004d8a:	f7fc fb83 	bl	8001494 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2202      	movs	r2, #2
 8004d92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69db      	ldr	r3, [r3, #28]
 8004d9c:	687a      	ldr	r2, [r7, #4]
 8004d9e:	6812      	ldr	r2, [r2, #0]
 8004da0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004da4:	f023 030f 	bic.w	r3, r3, #15
 8004da8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	2202      	movs	r2, #2
 8004db0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	695b      	ldr	r3, [r3, #20]
 8004db6:	2b02      	cmp	r3, #2
 8004db8:	d060      	beq.n	8004e7c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d102      	bne.n	8004dc8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004dc2:	2310      	movs	r3, #16
 8004dc4:	617b      	str	r3, [r7, #20]
 8004dc6:	e001      	b.n	8004dcc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004dc8:	2320      	movs	r3, #32
 8004dca:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	689b      	ldr	r3, [r3, #8]
 8004dd0:	2b20      	cmp	r3, #32
 8004dd2:	d802      	bhi.n	8004dda <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	005b      	lsls	r3, r3, #1
 8004dd8:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004dda:	2001      	movs	r0, #1
 8004ddc:	f001 fdec 	bl	80069b8 <HAL_RCCEx_GetPeriphCLKFreq>
 8004de0:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dea:	d125      	bne.n	8004e38 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	68db      	ldr	r3, [r3, #12]
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d010      	beq.n	8004e16 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	fbb2 f2f3 	udiv	r2, r2, r3
 8004dfe:	4613      	mov	r3, r2
 8004e00:	009b      	lsls	r3, r3, #2
 8004e02:	4413      	add	r3, r2
 8004e04:	005b      	lsls	r3, r3, #1
 8004e06:	461a      	mov	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e10:	3305      	adds	r3, #5
 8004e12:	613b      	str	r3, [r7, #16]
 8004e14:	e01f      	b.n	8004e56 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e16:	697b      	ldr	r3, [r7, #20]
 8004e18:	00db      	lsls	r3, r3, #3
 8004e1a:	68fa      	ldr	r2, [r7, #12]
 8004e1c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e20:	4613      	mov	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	4413      	add	r3, r2
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	461a      	mov	r2, r3
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e32:	3305      	adds	r3, #5
 8004e34:	613b      	str	r3, [r7, #16]
 8004e36:	e00e      	b.n	8004e56 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e40:	4613      	mov	r3, r2
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	005b      	lsls	r3, r3, #1
 8004e48:	461a      	mov	r2, r3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	695b      	ldr	r3, [r3, #20]
 8004e4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e52:	3305      	adds	r3, #5
 8004e54:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004e56:	693b      	ldr	r3, [r7, #16]
 8004e58:	4a5c      	ldr	r2, [pc, #368]	; (8004fcc <HAL_I2S_Init+0x270>)
 8004e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e5e:	08db      	lsrs	r3, r3, #3
 8004e60:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	f003 0301 	and.w	r3, r3, #1
 8004e68:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004e6a:	693a      	ldr	r2, [r7, #16]
 8004e6c:	69bb      	ldr	r3, [r7, #24]
 8004e6e:	1ad3      	subs	r3, r2, r3
 8004e70:	085b      	lsrs	r3, r3, #1
 8004e72:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	021b      	lsls	r3, r3, #8
 8004e78:	61bb      	str	r3, [r7, #24]
 8004e7a:	e003      	b.n	8004e84 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004e7c:	2302      	movs	r3, #2
 8004e7e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004e80:	2300      	movs	r3, #0
 8004e82:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004e84:	69fb      	ldr	r3, [r7, #28]
 8004e86:	2b01      	cmp	r3, #1
 8004e88:	d902      	bls.n	8004e90 <HAL_I2S_Init+0x134>
 8004e8a:	69fb      	ldr	r3, [r7, #28]
 8004e8c:	2bff      	cmp	r3, #255	; 0xff
 8004e8e:	d907      	bls.n	8004ea0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e94:	f043 0210 	orr.w	r2, r3, #16
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e08f      	b.n	8004fc0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	691a      	ldr	r2, [r3, #16]
 8004ea4:	69bb      	ldr	r3, [r7, #24]
 8004ea6:	ea42 0103 	orr.w	r1, r2, r3
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	69fa      	ldr	r2, [r7, #28]
 8004eb0:	430a      	orrs	r2, r1
 8004eb2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	69db      	ldr	r3, [r3, #28]
 8004eba:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004ebe:	f023 030f 	bic.w	r3, r3, #15
 8004ec2:	687a      	ldr	r2, [r7, #4]
 8004ec4:	6851      	ldr	r1, [r2, #4]
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6892      	ldr	r2, [r2, #8]
 8004eca:	4311      	orrs	r1, r2
 8004ecc:	687a      	ldr	r2, [r7, #4]
 8004ece:	68d2      	ldr	r2, [r2, #12]
 8004ed0:	4311      	orrs	r1, r2
 8004ed2:	687a      	ldr	r2, [r7, #4]
 8004ed4:	6992      	ldr	r2, [r2, #24]
 8004ed6:	430a      	orrs	r2, r1
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ee2:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	d161      	bne.n	8004fb0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	4a38      	ldr	r2, [pc, #224]	; (8004fd0 <HAL_I2S_Init+0x274>)
 8004ef0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a37      	ldr	r2, [pc, #220]	; (8004fd4 <HAL_I2S_Init+0x278>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d101      	bne.n	8004f00 <HAL_I2S_Init+0x1a4>
 8004efc:	4b36      	ldr	r3, [pc, #216]	; (8004fd8 <HAL_I2S_Init+0x27c>)
 8004efe:	e001      	b.n	8004f04 <HAL_I2S_Init+0x1a8>
 8004f00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f04:	69db      	ldr	r3, [r3, #28]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	6812      	ldr	r2, [r2, #0]
 8004f0a:	4932      	ldr	r1, [pc, #200]	; (8004fd4 <HAL_I2S_Init+0x278>)
 8004f0c:	428a      	cmp	r2, r1
 8004f0e:	d101      	bne.n	8004f14 <HAL_I2S_Init+0x1b8>
 8004f10:	4a31      	ldr	r2, [pc, #196]	; (8004fd8 <HAL_I2S_Init+0x27c>)
 8004f12:	e001      	b.n	8004f18 <HAL_I2S_Init+0x1bc>
 8004f14:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004f18:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004f1c:	f023 030f 	bic.w	r3, r3, #15
 8004f20:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a2b      	ldr	r2, [pc, #172]	; (8004fd4 <HAL_I2S_Init+0x278>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d101      	bne.n	8004f30 <HAL_I2S_Init+0x1d4>
 8004f2c:	4b2a      	ldr	r3, [pc, #168]	; (8004fd8 <HAL_I2S_Init+0x27c>)
 8004f2e:	e001      	b.n	8004f34 <HAL_I2S_Init+0x1d8>
 8004f30:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f34:	2202      	movs	r2, #2
 8004f36:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a25      	ldr	r2, [pc, #148]	; (8004fd4 <HAL_I2S_Init+0x278>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d101      	bne.n	8004f46 <HAL_I2S_Init+0x1ea>
 8004f42:	4b25      	ldr	r3, [pc, #148]	; (8004fd8 <HAL_I2S_Init+0x27c>)
 8004f44:	e001      	b.n	8004f4a <HAL_I2S_Init+0x1ee>
 8004f46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f4a:	69db      	ldr	r3, [r3, #28]
 8004f4c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004f56:	d003      	beq.n	8004f60 <HAL_I2S_Init+0x204>
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d103      	bne.n	8004f68 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004f60:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f64:	613b      	str	r3, [r7, #16]
 8004f66:	e001      	b.n	8004f6c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004f76:	4313      	orrs	r3, r2
 8004f78:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	68db      	ldr	r3, [r3, #12]
 8004f7e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004f80:	4313      	orrs	r3, r2
 8004f82:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	699b      	ldr	r3, [r3, #24]
 8004f88:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	b29a      	uxth	r2, r3
 8004f8e:	897b      	ldrh	r3, [r7, #10]
 8004f90:	4313      	orrs	r3, r2
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004f98:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a0d      	ldr	r2, [pc, #52]	; (8004fd4 <HAL_I2S_Init+0x278>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d101      	bne.n	8004fa8 <HAL_I2S_Init+0x24c>
 8004fa4:	4b0c      	ldr	r3, [pc, #48]	; (8004fd8 <HAL_I2S_Init+0x27c>)
 8004fa6:	e001      	b.n	8004fac <HAL_I2S_Init+0x250>
 8004fa8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fac:	897a      	ldrh	r2, [r7, #10]
 8004fae:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	2201      	movs	r2, #1
 8004fba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3720      	adds	r7, #32
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	08005859 	.word	0x08005859
 8004fcc:	cccccccd 	.word	0xcccccccd
 8004fd0:	080059e1 	.word	0x080059e1
 8004fd4:	40003800 	.word	0x40003800
 8004fd8:	40003400 	.word	0x40003400

08004fdc <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8004fdc:	b580      	push	{r7, lr}
 8004fde:	b086      	sub	sp, #24
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	60f8      	str	r0, [r7, #12]
 8004fe4:	60b9      	str	r1, [r7, #8]
 8004fe6:	4613      	mov	r3, r2
 8004fe8:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d002      	beq.n	8004ff6 <HAL_I2S_Transmit_DMA+0x1a>
 8004ff0:	88fb      	ldrh	r3, [r7, #6]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e08e      	b.n	8005118 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005000:	b2db      	uxtb	r3, r3
 8005002:	2b01      	cmp	r3, #1
 8005004:	d101      	bne.n	800500a <HAL_I2S_Transmit_DMA+0x2e>
 8005006:	2302      	movs	r3, #2
 8005008:	e086      	b.n	8005118 <HAL_I2S_Transmit_DMA+0x13c>
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	2201      	movs	r2, #1
 800500e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005018:	b2db      	uxtb	r3, r3
 800501a:	2b01      	cmp	r3, #1
 800501c:	d005      	beq.n	800502a <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	2200      	movs	r2, #0
 8005022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8005026:	2302      	movs	r3, #2
 8005028:	e076      	b.n	8005118 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2203      	movs	r2, #3
 800502e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	2200      	movs	r2, #0
 8005036:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	68ba      	ldr	r2, [r7, #8]
 800503c:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	69db      	ldr	r3, [r3, #28]
 8005044:	f003 0307 	and.w	r3, r3, #7
 8005048:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b03      	cmp	r3, #3
 800504e:	d002      	beq.n	8005056 <HAL_I2S_Transmit_DMA+0x7a>
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	2b05      	cmp	r3, #5
 8005054:	d10a      	bne.n	800506c <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8005056:	88fb      	ldrh	r3, [r7, #6]
 8005058:	005b      	lsls	r3, r3, #1
 800505a:	b29a      	uxth	r2, r3
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8005060:	88fb      	ldrh	r3, [r7, #6]
 8005062:	005b      	lsls	r3, r3, #1
 8005064:	b29a      	uxth	r2, r3
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	855a      	strh	r2, [r3, #42]	; 0x2a
 800506a:	e005      	b.n	8005078 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	88fa      	ldrh	r2, [r7, #6]
 8005070:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	88fa      	ldrh	r2, [r7, #6]
 8005076:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507c:	4a28      	ldr	r2, [pc, #160]	; (8005120 <HAL_I2S_Transmit_DMA+0x144>)
 800507e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005084:	4a27      	ldr	r2, [pc, #156]	; (8005124 <HAL_I2S_Transmit_DMA+0x148>)
 8005086:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800508c:	4a26      	ldr	r2, [pc, #152]	; (8005128 <HAL_I2S_Transmit_DMA+0x14c>)
 800508e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8005098:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80050a0:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050a6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 80050a8:	f7fc fdb8 	bl	8001c1c <HAL_DMA_Start_IT>
 80050ac:	4603      	mov	r3, r0
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d00f      	beq.n	80050d2 <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b6:	f043 0208 	orr.w	r2, r3, #8
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2201      	movs	r2, #1
 80050c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 80050ce:	2301      	movs	r3, #1
 80050d0:	e022      	b.n	8005118 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	69db      	ldr	r3, [r3, #28]
 80050d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d107      	bne.n	80050f0 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	69da      	ldr	r2, [r3, #28]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80050ee:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f003 0302 	and.w	r3, r3, #2
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d107      	bne.n	800510e <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	685a      	ldr	r2, [r3, #4]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f042 0202 	orr.w	r2, r2, #2
 800510c:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	08005737 	.word	0x08005737
 8005124:	080056f5 	.word	0x080056f5
 8005128:	08005753 	.word	0x08005753

0800512c <HAL_I2S_DMAPause>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAPause(I2S_HandleTypeDef *hi2s)
{
 800512c:	b480      	push	{r7}
 800512e:	b083      	sub	sp, #12
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800513a:	b2db      	uxtb	r3, r3
 800513c:	2b01      	cmp	r3, #1
 800513e:	d101      	bne.n	8005144 <HAL_I2S_DMAPause+0x18>
 8005140:	2302      	movs	r3, #2
 8005142:	e04a      	b.n	80051da <HAL_I2S_DMAPause+0xae>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005152:	b2db      	uxtb	r3, r3
 8005154:	2b03      	cmp	r3, #3
 8005156:	d108      	bne.n	800516a <HAL_I2S_DMAPause+0x3e>
  {
    /* Disable the I2S DMA Tx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	f022 0202 	bic.w	r2, r2, #2
 8005166:	605a      	str	r2, [r3, #4]
 8005168:	e032      	b.n	80051d0 <HAL_I2S_DMAPause+0xa4>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005170:	b2db      	uxtb	r3, r3
 8005172:	2b04      	cmp	r3, #4
 8005174:	d108      	bne.n	8005188 <HAL_I2S_DMAPause+0x5c>
  {
    /* Disable the I2S DMA Rx request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f022 0201 	bic.w	r2, r2, #1
 8005184:	605a      	str	r2, [r3, #4]
 8005186:	e023      	b.n	80051d0 <HAL_I2S_DMAPause+0xa4>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800518e:	b2db      	uxtb	r3, r3
 8005190:	2b05      	cmp	r3, #5
 8005192:	d11d      	bne.n	80051d0 <HAL_I2S_DMAPause+0xa4>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	685a      	ldr	r2, [r3, #4]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f022 0203 	bic.w	r2, r2, #3
 80051a2:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	4a0f      	ldr	r2, [pc, #60]	; (80051e8 <HAL_I2S_DMAPause+0xbc>)
 80051aa:	4293      	cmp	r3, r2
 80051ac:	d101      	bne.n	80051b2 <HAL_I2S_DMAPause+0x86>
 80051ae:	4b0f      	ldr	r3, [pc, #60]	; (80051ec <HAL_I2S_DMAPause+0xc0>)
 80051b0:	e001      	b.n	80051b6 <HAL_I2S_DMAPause+0x8a>
 80051b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051b6:	685a      	ldr	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	490a      	ldr	r1, [pc, #40]	; (80051e8 <HAL_I2S_DMAPause+0xbc>)
 80051be:	428b      	cmp	r3, r1
 80051c0:	d101      	bne.n	80051c6 <HAL_I2S_DMAPause+0x9a>
 80051c2:	4b0a      	ldr	r3, [pc, #40]	; (80051ec <HAL_I2S_DMAPause+0xc0>)
 80051c4:	e001      	b.n	80051ca <HAL_I2S_DMAPause+0x9e>
 80051c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051ca:	f022 0203 	bic.w	r2, r2, #3
 80051ce:	605a      	str	r2, [r3, #4]
  {
    /* nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	2200      	movs	r2, #0
 80051d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80051d8:	2300      	movs	r3, #0
}
 80051da:	4618      	mov	r0, r3
 80051dc:	370c      	adds	r7, #12
 80051de:	46bd      	mov	sp, r7
 80051e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e4:	4770      	bx	lr
 80051e6:	bf00      	nop
 80051e8:	40003800 	.word	0x40003800
 80051ec:	40003400 	.word	0x40003400

080051f0 <HAL_I2S_DMAResume>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAResume(I2S_HandleTypeDef *hi2s)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b083      	sub	sp, #12
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hi2s);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051fe:	b2db      	uxtb	r3, r3
 8005200:	2b01      	cmp	r3, #1
 8005202:	d101      	bne.n	8005208 <HAL_I2S_DMAResume+0x18>
 8005204:	2302      	movs	r3, #2
 8005206:	e07d      	b.n	8005304 <HAL_I2S_DMAResume+0x114>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2201      	movs	r2, #1
 800520c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b03      	cmp	r3, #3
 800521a:	d108      	bne.n	800522e <HAL_I2S_DMAResume+0x3e>
  {
    /* Enable the I2S DMA Tx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685a      	ldr	r2, [r3, #4]
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0202 	orr.w	r2, r2, #2
 800522a:	605a      	str	r2, [r3, #4]
 800522c:	e056      	b.n	80052dc <HAL_I2S_DMAResume+0xec>
  }
  else if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b04      	cmp	r3, #4
 8005238:	d108      	bne.n	800524c <HAL_I2S_DMAResume+0x5c>
  {
    /* Enable the I2S DMA Rx request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	685a      	ldr	r2, [r3, #4]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f042 0201 	orr.w	r2, r2, #1
 8005248:	605a      	str	r2, [r3, #4]
 800524a:	e047      	b.n	80052dc <HAL_I2S_DMAResume+0xec>
  }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  else if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005252:	b2db      	uxtb	r3, r3
 8005254:	2b05      	cmp	r3, #5
 8005256:	d141      	bne.n	80052dc <HAL_I2S_DMAResume+0xec>
  {
    /* Pause the audio file playing by disabling the I2S DMA request */
    SET_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	685a      	ldr	r2, [r3, #4]
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f042 0203 	orr.w	r2, r2, #3
 8005266:	605a      	str	r2, [r3, #4]
    SET_BIT(I2SxEXT(hi2s->Instance)->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	4a28      	ldr	r2, [pc, #160]	; (8005310 <HAL_I2S_DMAResume+0x120>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d101      	bne.n	8005276 <HAL_I2S_DMAResume+0x86>
 8005272:	4b28      	ldr	r3, [pc, #160]	; (8005314 <HAL_I2S_DMAResume+0x124>)
 8005274:	e001      	b.n	800527a <HAL_I2S_DMAResume+0x8a>
 8005276:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4923      	ldr	r1, [pc, #140]	; (8005310 <HAL_I2S_DMAResume+0x120>)
 8005282:	428b      	cmp	r3, r1
 8005284:	d101      	bne.n	800528a <HAL_I2S_DMAResume+0x9a>
 8005286:	4b23      	ldr	r3, [pc, #140]	; (8005314 <HAL_I2S_DMAResume+0x124>)
 8005288:	e001      	b.n	800528e <HAL_I2S_DMAResume+0x9e>
 800528a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800528e:	f042 0203 	orr.w	r2, r2, #3
 8005292:	605a      	str	r2, [r3, #4]

    /* If the I2Sext peripheral is still not enabled, enable it */
    if ((I2SxEXT(hi2s->Instance)->I2SCFGR & SPI_I2SCFGR_I2SE) == 0U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a1d      	ldr	r2, [pc, #116]	; (8005310 <HAL_I2S_DMAResume+0x120>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d101      	bne.n	80052a2 <HAL_I2S_DMAResume+0xb2>
 800529e:	4b1d      	ldr	r3, [pc, #116]	; (8005314 <HAL_I2S_DMAResume+0x124>)
 80052a0:	e001      	b.n	80052a6 <HAL_I2S_DMAResume+0xb6>
 80052a2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052a6:	69db      	ldr	r3, [r3, #28]
 80052a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d115      	bne.n	80052dc <HAL_I2S_DMAResume+0xec>
    {
      /* Enable I2Sext peripheral */
      __HAL_I2SEXT_ENABLE(hi2s);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	4a16      	ldr	r2, [pc, #88]	; (8005310 <HAL_I2S_DMAResume+0x120>)
 80052b6:	4293      	cmp	r3, r2
 80052b8:	d101      	bne.n	80052be <HAL_I2S_DMAResume+0xce>
 80052ba:	4b16      	ldr	r3, [pc, #88]	; (8005314 <HAL_I2S_DMAResume+0x124>)
 80052bc:	e001      	b.n	80052c2 <HAL_I2S_DMAResume+0xd2>
 80052be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052c2:	69da      	ldr	r2, [r3, #28]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	4911      	ldr	r1, [pc, #68]	; (8005310 <HAL_I2S_DMAResume+0x120>)
 80052ca:	428b      	cmp	r3, r1
 80052cc:	d101      	bne.n	80052d2 <HAL_I2S_DMAResume+0xe2>
 80052ce:	4b11      	ldr	r3, [pc, #68]	; (8005314 <HAL_I2S_DMAResume+0x124>)
 80052d0:	e001      	b.n	80052d6 <HAL_I2S_DMAResume+0xe6>
 80052d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052da:	61da      	str	r2, [r3, #28]
  {
    /* nothing to do */
  }

  /* If the I2S peripheral is still not enabled, enable it */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	69db      	ldr	r3, [r3, #28]
 80052e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d107      	bne.n	80052fa <HAL_I2S_DMAResume+0x10a>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	69da      	ldr	r2, [r3, #28]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052f8:	61da      	str	r2, [r3, #28]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2s);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005302:	2300      	movs	r3, #0
}
 8005304:	4618      	mov	r0, r3
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	40003800 	.word	0x40003800
 8005314:	40003400 	.word	0x40003400

08005318 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b088      	sub	sp, #32
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint32_t tickstart;
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005320:	2300      	movs	r3, #0
 8005322:	77fb      	strb	r3, [r7, #31]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800532c:	d004      	beq.n	8005338 <HAL_I2S_DMAStop+0x20>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	2b00      	cmp	r3, #0
 8005334:	f040 80d1 	bne.w	80054da <HAL_I2S_DMAStop+0x1c2>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00f      	beq.n	8005360 <HAL_I2S_DMAStop+0x48>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005344:	4618      	mov	r0, r3
 8005346:	f7fc fcc1 	bl	8001ccc <HAL_DMA_Abort>
 800534a:	4603      	mov	r3, r0
 800534c:	2b00      	cmp	r3, #0
 800534e:	d007      	beq.n	8005360 <HAL_I2S_DMAStop+0x48>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005354:	f043 0208 	orr.w	r2, r3, #8
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 800535c:	2301      	movs	r3, #1
 800535e:	77fb      	strb	r3, [r7, #31]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 8005360:	2364      	movs	r3, #100	; 0x64
 8005362:	2201      	movs	r2, #1
 8005364:	2102      	movs	r1, #2
 8005366:	6878      	ldr	r0, [r7, #4]
 8005368:	f000 fb00 	bl	800596c <I2S_WaitFlagStateUntilTimeout>
 800536c:	4603      	mov	r3, r0
 800536e:	2b00      	cmp	r3, #0
 8005370:	d00b      	beq.n	800538a <HAL_I2S_DMAStop+0x72>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005376:	f043 0201 	orr.w	r2, r3, #1
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2201      	movs	r2, #1
 8005382:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 8005386:	2301      	movs	r3, #1
 8005388:	77fb      	strb	r3, [r7, #31]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800538a:	2364      	movs	r3, #100	; 0x64
 800538c:	2200      	movs	r2, #0
 800538e:	2180      	movs	r1, #128	; 0x80
 8005390:	6878      	ldr	r0, [r7, #4]
 8005392:	f000 faeb 	bl	800596c <I2S_WaitFlagStateUntilTimeout>
 8005396:	4603      	mov	r3, r0
 8005398:	2b00      	cmp	r3, #0
 800539a:	d00b      	beq.n	80053b4 <HAL_I2S_DMAStop+0x9c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053a0:	f043 0201 	orr.w	r2, r3, #1
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	645a      	str	r2, [r3, #68]	; 0x44
      hi2s->State = HAL_I2S_STATE_READY;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	2201      	movs	r2, #1
 80053ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode   = HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	77fb      	strb	r3, [r7, #31]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	69da      	ldr	r2, [r3, #28]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c2:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80053c4:	2300      	movs	r3, #0
 80053c6:	617b      	str	r3, [r7, #20]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	617b      	str	r3, [r7, #20]
 80053d0:	697b      	ldr	r3, [r7, #20]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685a      	ldr	r2, [r3, #4]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f022 0202 	bic.w	r2, r2, #2
 80053e0:	605a      	str	r2, [r3, #4]

#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053e8:	b2db      	uxtb	r3, r3
 80053ea:	2b05      	cmp	r3, #5
 80053ec:	f040 8165 	bne.w	80056ba <HAL_I2S_DMAStop+0x3a2>
    {
      /* Abort the I2S DMA rx Stream/Channel */
      if (hi2s->hdmarx != NULL)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d00f      	beq.n	8005418 <HAL_I2S_DMAStop+0x100>
      {
        /* Disable the I2S DMA rx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053fc:	4618      	mov	r0, r3
 80053fe:	f7fc fc65 	bl	8001ccc <HAL_DMA_Abort>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	d007      	beq.n	8005418 <HAL_I2S_DMAStop+0x100>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800540c:	f043 0208 	orr.w	r2, r3, #8
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	77fb      	strb	r3, [r7, #31]
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a8a      	ldr	r2, [pc, #552]	; (8005648 <HAL_I2S_DMAStop+0x330>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d101      	bne.n	8005426 <HAL_I2S_DMAStop+0x10e>
 8005422:	4b8a      	ldr	r3, [pc, #552]	; (800564c <HAL_I2S_DMAStop+0x334>)
 8005424:	e001      	b.n	800542a <HAL_I2S_DMAStop+0x112>
 8005426:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800542a:	69da      	ldr	r2, [r3, #28]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4985      	ldr	r1, [pc, #532]	; (8005648 <HAL_I2S_DMAStop+0x330>)
 8005432:	428b      	cmp	r3, r1
 8005434:	d101      	bne.n	800543a <HAL_I2S_DMAStop+0x122>
 8005436:	4b85      	ldr	r3, [pc, #532]	; (800564c <HAL_I2S_DMAStop+0x334>)
 8005438:	e001      	b.n	800543e <HAL_I2S_DMAStop+0x126>
 800543a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800543e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005442:	61da      	str	r2, [r3, #28]

      /* Clear OVR flag */
      __HAL_I2SEXT_CLEAR_OVRFLAG(hi2s);
 8005444:	2300      	movs	r3, #0
 8005446:	613b      	str	r3, [r7, #16]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a7e      	ldr	r2, [pc, #504]	; (8005648 <HAL_I2S_DMAStop+0x330>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d101      	bne.n	8005456 <HAL_I2S_DMAStop+0x13e>
 8005452:	4b7e      	ldr	r3, [pc, #504]	; (800564c <HAL_I2S_DMAStop+0x334>)
 8005454:	e001      	b.n	800545a <HAL_I2S_DMAStop+0x142>
 8005456:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800545a:	68db      	ldr	r3, [r3, #12]
 800545c:	613b      	str	r3, [r7, #16]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a79      	ldr	r2, [pc, #484]	; (8005648 <HAL_I2S_DMAStop+0x330>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d101      	bne.n	800546c <HAL_I2S_DMAStop+0x154>
 8005468:	4b78      	ldr	r3, [pc, #480]	; (800564c <HAL_I2S_DMAStop+0x334>)
 800546a:	e001      	b.n	8005470 <HAL_I2S_DMAStop+0x158>
 800546c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	613b      	str	r3, [r7, #16]
 8005474:	693b      	ldr	r3, [r7, #16]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_RXDMAEN);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a73      	ldr	r2, [pc, #460]	; (8005648 <HAL_I2S_DMAStop+0x330>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d101      	bne.n	8005484 <HAL_I2S_DMAStop+0x16c>
 8005480:	4b72      	ldr	r3, [pc, #456]	; (800564c <HAL_I2S_DMAStop+0x334>)
 8005482:	e001      	b.n	8005488 <HAL_I2S_DMAStop+0x170>
 8005484:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005488:	685a      	ldr	r2, [r3, #4]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	496e      	ldr	r1, [pc, #440]	; (8005648 <HAL_I2S_DMAStop+0x330>)
 8005490:	428b      	cmp	r3, r1
 8005492:	d101      	bne.n	8005498 <HAL_I2S_DMAStop+0x180>
 8005494:	4b6d      	ldr	r3, [pc, #436]	; (800564c <HAL_I2S_DMAStop+0x334>)
 8005496:	e001      	b.n	800549c <HAL_I2S_DMAStop+0x184>
 8005498:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800549c:	f022 0201 	bic.w	r2, r2, #1
 80054a0:	605a      	str	r2, [r3, #4]

      if (hi2s->Init.Mode == I2S_MODE_SLAVE_TX)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d10c      	bne.n	80054c4 <HAL_I2S_DMAStop+0x1ac>
      {
        /* Set the error code */
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ae:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	645a      	str	r2, [r3, #68]	; 0x44

        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2201      	movs	r2, #1
 80054ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        errorcode = HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	77fb      	strb	r3, [r7, #31]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80054c2:	e0fa      	b.n	80056ba <HAL_I2S_DMAStop+0x3a2>
      }
      else
      {
        /* Read DR to Flush RX Data */
        READ_REG(I2SxEXT(hi2s->Instance)->DR);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	4a5f      	ldr	r2, [pc, #380]	; (8005648 <HAL_I2S_DMAStop+0x330>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d101      	bne.n	80054d2 <HAL_I2S_DMAStop+0x1ba>
 80054ce:	4b5f      	ldr	r3, [pc, #380]	; (800564c <HAL_I2S_DMAStop+0x334>)
 80054d0:	e001      	b.n	80054d6 <HAL_I2S_DMAStop+0x1be>
 80054d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054d6:	68db      	ldr	r3, [r3, #12]
    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 80054d8:	e0ef      	b.n	80056ba <HAL_I2S_DMAStop+0x3a2>
      }
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */
  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80054e2:	d005      	beq.n	80054f0 <HAL_I2S_DMAStop+0x1d8>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80054ec:	f040 80e5 	bne.w	80056ba <HAL_I2S_DMAStop+0x3a2>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d00f      	beq.n	8005518 <HAL_I2S_DMAStop+0x200>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054fc:	4618      	mov	r0, r3
 80054fe:	f7fc fbe5 	bl	8001ccc <HAL_DMA_Abort>
 8005502:	4603      	mov	r3, r0
 8005504:	2b00      	cmp	r3, #0
 8005506:	d007      	beq.n	8005518 <HAL_I2S_DMAStop+0x200>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800550c:	f043 0208 	orr.w	r2, r3, #8
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	645a      	str	r2, [r3, #68]	; 0x44
        errorcode = HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	77fb      	strb	r3, [r7, #31]
      }
    }
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

    if (hi2s->State == HAL_I2S_STATE_BUSY_TX_RX)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800551e:	b2db      	uxtb	r3, r3
 8005520:	2b05      	cmp	r3, #5
 8005522:	f040 809a 	bne.w	800565a <HAL_I2S_DMAStop+0x342>
    {
      /* Abort the I2S DMA tx Stream/Channel */
      if (hi2s->hdmatx != NULL)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800552a:	2b00      	cmp	r3, #0
 800552c:	d00f      	beq.n	800554e <HAL_I2S_DMAStop+0x236>
      {
        /* Disable the I2S DMA tx Stream/Channel */
        if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005532:	4618      	mov	r0, r3
 8005534:	f7fc fbca 	bl	8001ccc <HAL_DMA_Abort>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d007      	beq.n	800554e <HAL_I2S_DMAStop+0x236>
        {
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005542:	f043 0208 	orr.w	r2, r3, #8
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	645a      	str	r2, [r3, #68]	; 0x44
          errorcode = HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	77fb      	strb	r3, [r7, #31]
        }
      }

      tickstart = HAL_GetTick();
 800554e:	f7fc f975 	bl	800183c <HAL_GetTick>
 8005552:	61b8      	str	r0, [r7, #24]

      /* Wait until TXE flag is set */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 8005554:	e012      	b.n	800557c <HAL_I2S_DMAStop+0x264>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 8005556:	f7fc f971 	bl	800183c <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	2b64      	cmp	r3, #100	; 0x64
 8005562:	d90b      	bls.n	800557c <HAL_I2S_DMAStop+0x264>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005568:	f043 0201 	orr.w	r2, r3, #1
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_TXE) != SET)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a31      	ldr	r2, [pc, #196]	; (8005648 <HAL_I2S_DMAStop+0x330>)
 8005582:	4293      	cmp	r3, r2
 8005584:	d101      	bne.n	800558a <HAL_I2S_DMAStop+0x272>
 8005586:	4b31      	ldr	r3, [pc, #196]	; (800564c <HAL_I2S_DMAStop+0x334>)
 8005588:	e001      	b.n	800558e <HAL_I2S_DMAStop+0x276>
 800558a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800558e:	689b      	ldr	r3, [r3, #8]
 8005590:	f003 0302 	and.w	r3, r3, #2
 8005594:	2b02      	cmp	r3, #2
 8005596:	d1de      	bne.n	8005556 <HAL_I2S_DMAStop+0x23e>
        }
      }

      /* Wait until BSY flag is Reset */
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 8005598:	e012      	b.n	80055c0 <HAL_I2S_DMAStop+0x2a8>
      {
        if (((HAL_GetTick() - tickstart) > I2S_TIMEOUT_FLAG))
 800559a:	f7fc f94f 	bl	800183c <HAL_GetTick>
 800559e:	4602      	mov	r2, r0
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	1ad3      	subs	r3, r2, r3
 80055a4:	2b64      	cmp	r3, #100	; 0x64
 80055a6:	d90b      	bls.n	80055c0 <HAL_I2S_DMAStop+0x2a8>
        {
          /* Set the error code */
          SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055ac:	f043 0201 	orr.w	r2, r3, #1
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	645a      	str	r2, [r3, #68]	; 0x44

          /* Set the I2S State ready */
          hi2s->State = HAL_I2S_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          errorcode   = HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	77fb      	strb	r3, [r7, #31]
      while (__HAL_I2SEXT_GET_FLAG(hi2s, I2S_FLAG_BSY) != RESET)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a20      	ldr	r2, [pc, #128]	; (8005648 <HAL_I2S_DMAStop+0x330>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d101      	bne.n	80055ce <HAL_I2S_DMAStop+0x2b6>
 80055ca:	4b20      	ldr	r3, [pc, #128]	; (800564c <HAL_I2S_DMAStop+0x334>)
 80055cc:	e001      	b.n	80055d2 <HAL_I2S_DMAStop+0x2ba>
 80055ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055d2:	689b      	ldr	r3, [r3, #8]
 80055d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80055d8:	2b80      	cmp	r3, #128	; 0x80
 80055da:	d0de      	beq.n	800559a <HAL_I2S_DMAStop+0x282>
        }
      }

      /* Disable I2Sext peripheral */
      __HAL_I2SEXT_DISABLE(hi2s);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4a19      	ldr	r2, [pc, #100]	; (8005648 <HAL_I2S_DMAStop+0x330>)
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d101      	bne.n	80055ea <HAL_I2S_DMAStop+0x2d2>
 80055e6:	4b19      	ldr	r3, [pc, #100]	; (800564c <HAL_I2S_DMAStop+0x334>)
 80055e8:	e001      	b.n	80055ee <HAL_I2S_DMAStop+0x2d6>
 80055ea:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055ee:	69da      	ldr	r2, [r3, #28]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	4914      	ldr	r1, [pc, #80]	; (8005648 <HAL_I2S_DMAStop+0x330>)
 80055f6:	428b      	cmp	r3, r1
 80055f8:	d101      	bne.n	80055fe <HAL_I2S_DMAStop+0x2e6>
 80055fa:	4b14      	ldr	r3, [pc, #80]	; (800564c <HAL_I2S_DMAStop+0x334>)
 80055fc:	e001      	b.n	8005602 <HAL_I2S_DMAStop+0x2ea>
 80055fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005602:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005606:	61da      	str	r2, [r3, #28]

      /* Clear UDR flag */
      __HAL_I2SEXT_CLEAR_UDRFLAG(hi2s);
 8005608:	2300      	movs	r3, #0
 800560a:	60fb      	str	r3, [r7, #12]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	4a0d      	ldr	r2, [pc, #52]	; (8005648 <HAL_I2S_DMAStop+0x330>)
 8005612:	4293      	cmp	r3, r2
 8005614:	d101      	bne.n	800561a <HAL_I2S_DMAStop+0x302>
 8005616:	4b0d      	ldr	r3, [pc, #52]	; (800564c <HAL_I2S_DMAStop+0x334>)
 8005618:	e001      	b.n	800561e <HAL_I2S_DMAStop+0x306>
 800561a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	60fb      	str	r3, [r7, #12]
 8005622:	68fb      	ldr	r3, [r7, #12]

      /* Disable the I2SxEXT DMA request */
      CLEAR_BIT(I2SxEXT(hi2s->Instance)->CR2, SPI_CR2_TXDMAEN);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4a07      	ldr	r2, [pc, #28]	; (8005648 <HAL_I2S_DMAStop+0x330>)
 800562a:	4293      	cmp	r3, r2
 800562c:	d101      	bne.n	8005632 <HAL_I2S_DMAStop+0x31a>
 800562e:	4b07      	ldr	r3, [pc, #28]	; (800564c <HAL_I2S_DMAStop+0x334>)
 8005630:	e001      	b.n	8005636 <HAL_I2S_DMAStop+0x31e>
 8005632:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005636:	685a      	ldr	r2, [r3, #4]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4902      	ldr	r1, [pc, #8]	; (8005648 <HAL_I2S_DMAStop+0x330>)
 800563e:	428b      	cmp	r3, r1
 8005640:	d106      	bne.n	8005650 <HAL_I2S_DMAStop+0x338>
 8005642:	4b02      	ldr	r3, [pc, #8]	; (800564c <HAL_I2S_DMAStop+0x334>)
 8005644:	e006      	b.n	8005654 <HAL_I2S_DMAStop+0x33c>
 8005646:	bf00      	nop
 8005648:	40003800 	.word	0x40003800
 800564c:	40003400 	.word	0x40003400
 8005650:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005654:	f022 0202 	bic.w	r2, r2, #2
 8005658:	605a      	str	r2, [r3, #4]
    }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	69da      	ldr	r2, [r3, #28]
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005668:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800566a:	2300      	movs	r3, #0
 800566c:	60bb      	str	r3, [r7, #8]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	60bb      	str	r3, [r7, #8]
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	689b      	ldr	r3, [r3, #8]
 800567c:	60bb      	str	r3, [r7, #8]
 800567e:	68bb      	ldr	r3, [r7, #8]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f022 0201 	bic.w	r2, r2, #1
 800568e:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005698:	d10c      	bne.n	80056b4 <HAL_I2S_DMAStop+0x39c>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800569e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	645a      	str	r2, [r3, #68]	; 0x44

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2201      	movs	r2, #1
 80056aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      errorcode = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	77fb      	strb	r3, [r7, #31]
 80056b2:	e002      	b.n	80056ba <HAL_I2S_DMAStop+0x3a2>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2201      	movs	r2, #1
 80056be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return errorcode;
 80056c2:	7ffb      	ldrb	r3, [r7, #31]
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3720      	adds	r7, #32
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80056d4:	bf00      	nop
 80056d6:	370c      	adds	r7, #12
 80056d8:	46bd      	mov	sp, r7
 80056da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056de:	4770      	bx	lr

080056e0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80056e0:	b480      	push	{r7}
 80056e2:	b083      	sub	sp, #12
 80056e4:	af00      	add	r7, sp, #0
 80056e6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80056e8:	bf00      	nop
 80056ea:	370c      	adds	r7, #12
 80056ec:	46bd      	mov	sp, r7
 80056ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f2:	4770      	bx	lr

080056f4 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b084      	sub	sp, #16
 80056f8:	af00      	add	r7, sp, #0
 80056fa:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005700:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	69db      	ldr	r3, [r3, #28]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d10e      	bne.n	8005728 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	685a      	ldr	r2, [r3, #4]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f022 0202 	bic.w	r2, r2, #2
 8005718:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f7fb fa0d 	bl	8000b48 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800572e:	bf00      	nop
 8005730:	3710      	adds	r7, #16
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b084      	sub	sp, #16
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005742:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8005744:	68f8      	ldr	r0, [r7, #12]
 8005746:	f7fb fa11 	bl	8000b6c <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800574a:	bf00      	nop
 800574c:	3710      	adds	r7, #16
 800574e:	46bd      	mov	sp, r7
 8005750:	bd80      	pop	{r7, pc}

08005752 <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8005752:	b580      	push	{r7, lr}
 8005754:	b084      	sub	sp, #16
 8005756:	af00      	add	r7, sp, #0
 8005758:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575e:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f022 0203 	bic.w	r2, r2, #3
 800576e:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	2200      	movs	r2, #0
 8005774:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	2200      	movs	r2, #0
 800577a:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2201      	movs	r2, #1
 8005780:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005788:	f043 0208 	orr.w	r2, r3, #8
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f7ff ffa5 	bl	80056e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8005796:	bf00      	nop
 8005798:	3710      	adds	r7, #16
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}

0800579e <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800579e:	b580      	push	{r7, lr}
 80057a0:	b082      	sub	sp, #8
 80057a2:	af00      	add	r7, sp, #0
 80057a4:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	881a      	ldrh	r2, [r3, #0]
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b6:	1c9a      	adds	r2, r3, #2
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	3b01      	subs	r3, #1
 80057c4:	b29a      	uxth	r2, r3
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057ce:	b29b      	uxth	r3, r3
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d10e      	bne.n	80057f2 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80057e2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80057ec:	6878      	ldr	r0, [r7, #4]
 80057ee:	f7fb f9ab 	bl	8000b48 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80057f2:	bf00      	nop
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b082      	sub	sp, #8
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	68da      	ldr	r2, [r3, #12]
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800580c:	b292      	uxth	r2, r2
 800580e:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005814:	1c9a      	adds	r2, r3, #2
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800581e:	b29b      	uxth	r3, r3
 8005820:	3b01      	subs	r3, #1
 8005822:	b29a      	uxth	r2, r3
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800582c:	b29b      	uxth	r3, r3
 800582e:	2b00      	cmp	r3, #0
 8005830:	d10e      	bne.n	8005850 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	685a      	ldr	r2, [r3, #4]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005840:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	2201      	movs	r2, #1
 8005846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800584a:	6878      	ldr	r0, [r7, #4]
 800584c:	f7ff ff3e 	bl	80056cc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005850:	bf00      	nop
 8005852:	3708      	adds	r7, #8
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b04      	cmp	r3, #4
 8005872:	d13a      	bne.n	80058ea <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f003 0301 	and.w	r3, r3, #1
 800587a:	2b01      	cmp	r3, #1
 800587c:	d109      	bne.n	8005892 <I2S_IRQHandler+0x3a>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005888:	2b40      	cmp	r3, #64	; 0x40
 800588a:	d102      	bne.n	8005892 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff ffb4 	bl	80057fa <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005898:	2b40      	cmp	r3, #64	; 0x40
 800589a:	d126      	bne.n	80058ea <I2S_IRQHandler+0x92>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	f003 0320 	and.w	r3, r3, #32
 80058a6:	2b20      	cmp	r3, #32
 80058a8:	d11f      	bne.n	80058ea <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	685a      	ldr	r2, [r3, #4]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80058b8:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80058ba:	2300      	movs	r3, #0
 80058bc:	613b      	str	r3, [r7, #16]
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	613b      	str	r3, [r7, #16]
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	689b      	ldr	r3, [r3, #8]
 80058cc:	613b      	str	r3, [r7, #16]
 80058ce:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2201      	movs	r2, #1
 80058d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058dc:	f043 0202 	orr.w	r2, r3, #2
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80058e4:	6878      	ldr	r0, [r7, #4]
 80058e6:	f7ff fefb 	bl	80056e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	2b03      	cmp	r3, #3
 80058f4:	d136      	bne.n	8005964 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80058f6:	697b      	ldr	r3, [r7, #20]
 80058f8:	f003 0302 	and.w	r3, r3, #2
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d109      	bne.n	8005914 <I2S_IRQHandler+0xbc>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685b      	ldr	r3, [r3, #4]
 8005906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800590a:	2b80      	cmp	r3, #128	; 0x80
 800590c:	d102      	bne.n	8005914 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800590e:	6878      	ldr	r0, [r7, #4]
 8005910:	f7ff ff45 	bl	800579e <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f003 0308 	and.w	r3, r3, #8
 800591a:	2b08      	cmp	r3, #8
 800591c:	d122      	bne.n	8005964 <I2S_IRQHandler+0x10c>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	685b      	ldr	r3, [r3, #4]
 8005924:	f003 0320 	and.w	r3, r3, #32
 8005928:	2b20      	cmp	r3, #32
 800592a:	d11b      	bne.n	8005964 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	685a      	ldr	r2, [r3, #4]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800593a:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800593c:	2300      	movs	r3, #0
 800593e:	60fb      	str	r3, [r7, #12]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	60fb      	str	r3, [r7, #12]
 8005948:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	2201      	movs	r2, #1
 800594e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005956:	f043 0204 	orr.w	r2, r3, #4
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7ff febe 	bl	80056e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005964:	bf00      	nop
 8005966:	3718      	adds	r7, #24
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b086      	sub	sp, #24
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	603b      	str	r3, [r7, #0]
 8005978:	4613      	mov	r3, r2
 800597a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800597c:	f7fb ff5e 	bl	800183c <HAL_GetTick>
 8005980:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 8005982:	e018      	b.n	80059b6 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800598a:	d014      	beq.n	80059b6 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800598c:	f7fb ff56 	bl	800183c <HAL_GetTick>
 8005990:	4602      	mov	r2, r0
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	1ad3      	subs	r3, r2, r3
 8005996:	683a      	ldr	r2, [r7, #0]
 8005998:	429a      	cmp	r2, r3
 800599a:	d902      	bls.n	80059a2 <I2S_WaitFlagStateUntilTimeout+0x36>
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d109      	bne.n	80059b6 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e00f      	b.n	80059d6 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	68bb      	ldr	r3, [r7, #8]
 80059be:	4013      	ands	r3, r2
 80059c0:	68ba      	ldr	r2, [r7, #8]
 80059c2:	429a      	cmp	r2, r3
 80059c4:	bf0c      	ite	eq
 80059c6:	2301      	moveq	r3, #1
 80059c8:	2300      	movne	r3, #0
 80059ca:	b2db      	uxtb	r3, r3
 80059cc:	461a      	mov	r2, r3
 80059ce:	79fb      	ldrb	r3, [r7, #7]
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d1d7      	bne.n	8005984 <I2S_WaitFlagStateUntilTimeout+0x18>
      }
    }
  }
  return HAL_OK;
 80059d4:	2300      	movs	r3, #0
}
 80059d6:	4618      	mov	r0, r3
 80059d8:	3718      	adds	r7, #24
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}
	...

080059e0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	b088      	sub	sp, #32
 80059e4:	af00      	add	r7, sp, #0
 80059e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	689b      	ldr	r3, [r3, #8]
 80059ee:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4a92      	ldr	r2, [pc, #584]	; (8005c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80059f6:	4293      	cmp	r3, r2
 80059f8:	d101      	bne.n	80059fe <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80059fa:	4b92      	ldr	r3, [pc, #584]	; (8005c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80059fc:	e001      	b.n	8005a02 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80059fe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a02:	689b      	ldr	r3, [r3, #8]
 8005a04:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	685b      	ldr	r3, [r3, #4]
 8005a0c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4a8b      	ldr	r2, [pc, #556]	; (8005c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a14:	4293      	cmp	r3, r2
 8005a16:	d101      	bne.n	8005a1c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005a18:	4b8a      	ldr	r3, [pc, #552]	; (8005c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a1a:	e001      	b.n	8005a20 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005a1c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a20:	685b      	ldr	r3, [r3, #4]
 8005a22:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	685b      	ldr	r3, [r3, #4]
 8005a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a2c:	d004      	beq.n	8005a38 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	f040 8099 	bne.w	8005b6a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	f003 0302 	and.w	r3, r3, #2
 8005a3e:	2b02      	cmp	r3, #2
 8005a40:	d107      	bne.n	8005a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d002      	beq.n	8005a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 f925 	bl	8005c9c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005a52:	69bb      	ldr	r3, [r7, #24]
 8005a54:	f003 0301 	and.w	r3, r3, #1
 8005a58:	2b01      	cmp	r3, #1
 8005a5a:	d107      	bne.n	8005a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d002      	beq.n	8005a6c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 f9c8 	bl	8005dfc <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a72:	2b40      	cmp	r3, #64	; 0x40
 8005a74:	d13a      	bne.n	8005aec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	f003 0320 	and.w	r3, r3, #32
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d035      	beq.n	8005aec <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a6e      	ldr	r2, [pc, #440]	; (8005c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d101      	bne.n	8005a8e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005a8a:	4b6e      	ldr	r3, [pc, #440]	; (8005c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005a8c:	e001      	b.n	8005a92 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005a8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005a92:	685a      	ldr	r2, [r3, #4]
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4969      	ldr	r1, [pc, #420]	; (8005c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005a9a:	428b      	cmp	r3, r1
 8005a9c:	d101      	bne.n	8005aa2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005a9e:	4b69      	ldr	r3, [pc, #420]	; (8005c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005aa0:	e001      	b.n	8005aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005aa2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005aa6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005aaa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	685a      	ldr	r2, [r3, #4]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005aba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005abc:	2300      	movs	r3, #0
 8005abe:	60fb      	str	r3, [r7, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	68db      	ldr	r3, [r3, #12]
 8005ac6:	60fb      	str	r3, [r7, #12]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	60fb      	str	r3, [r7, #12]
 8005ad0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ade:	f043 0202 	orr.w	r2, r3, #2
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7ff fdfa 	bl	80056e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	f003 0308 	and.w	r3, r3, #8
 8005af2:	2b08      	cmp	r3, #8
 8005af4:	f040 80c3 	bne.w	8005c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f003 0320 	and.w	r3, r3, #32
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 80bd 	beq.w	8005c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	685a      	ldr	r2, [r3, #4]
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005b12:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a49      	ldr	r2, [pc, #292]	; (8005c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d101      	bne.n	8005b22 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005b1e:	4b49      	ldr	r3, [pc, #292]	; (8005c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b20:	e001      	b.n	8005b26 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005b22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	4944      	ldr	r1, [pc, #272]	; (8005c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005b2e:	428b      	cmp	r3, r1
 8005b30:	d101      	bne.n	8005b36 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005b32:	4b44      	ldr	r3, [pc, #272]	; (8005c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005b34:	e001      	b.n	8005b3a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005b36:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005b3a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b3e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005b40:	2300      	movs	r3, #0
 8005b42:	60bb      	str	r3, [r7, #8]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	60bb      	str	r3, [r7, #8]
 8005b4c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	2201      	movs	r2, #1
 8005b52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b5a:	f043 0204 	orr.w	r2, r3, #4
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b62:	6878      	ldr	r0, [r7, #4]
 8005b64:	f7ff fdbc 	bl	80056e0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b68:	e089      	b.n	8005c7e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	f003 0302 	and.w	r3, r3, #2
 8005b70:	2b02      	cmp	r3, #2
 8005b72:	d107      	bne.n	8005b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005b74:	693b      	ldr	r3, [r7, #16]
 8005b76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d002      	beq.n	8005b84 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005b7e:	6878      	ldr	r0, [r7, #4]
 8005b80:	f000 f8be 	bl	8005d00 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005b84:	69fb      	ldr	r3, [r7, #28]
 8005b86:	f003 0301 	and.w	r3, r3, #1
 8005b8a:	2b01      	cmp	r3, #1
 8005b8c:	d107      	bne.n	8005b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d002      	beq.n	8005b9e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f000 f8fd 	bl	8005d98 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005b9e:	69fb      	ldr	r3, [r7, #28]
 8005ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba4:	2b40      	cmp	r3, #64	; 0x40
 8005ba6:	d12f      	bne.n	8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005ba8:	697b      	ldr	r3, [r7, #20]
 8005baa:	f003 0320 	and.w	r3, r3, #32
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d02a      	beq.n	8005c08 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	685a      	ldr	r2, [r3, #4]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005bc0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4a1e      	ldr	r2, [pc, #120]	; (8005c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d101      	bne.n	8005bd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005bcc:	4b1d      	ldr	r3, [pc, #116]	; (8005c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005bce:	e001      	b.n	8005bd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005bd0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bd4:	685a      	ldr	r2, [r3, #4]
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	4919      	ldr	r1, [pc, #100]	; (8005c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005bdc:	428b      	cmp	r3, r1
 8005bde:	d101      	bne.n	8005be4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005be0:	4b18      	ldr	r3, [pc, #96]	; (8005c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005be2:	e001      	b.n	8005be8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005be4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005be8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005bec:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bfa:	f043 0202 	orr.w	r2, r3, #2
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7ff fd6c 	bl	80056e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	f003 0308 	and.w	r3, r3, #8
 8005c0e:	2b08      	cmp	r3, #8
 8005c10:	d136      	bne.n	8005c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005c12:	693b      	ldr	r3, [r7, #16]
 8005c14:	f003 0320 	and.w	r3, r3, #32
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d031      	beq.n	8005c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a07      	ldr	r2, [pc, #28]	; (8005c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d101      	bne.n	8005c2a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005c26:	4b07      	ldr	r3, [pc, #28]	; (8005c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c28:	e001      	b.n	8005c2e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005c2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4902      	ldr	r1, [pc, #8]	; (8005c40 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005c36:	428b      	cmp	r3, r1
 8005c38:	d106      	bne.n	8005c48 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005c3a:	4b02      	ldr	r3, [pc, #8]	; (8005c44 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005c3c:	e006      	b.n	8005c4c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8005c3e:	bf00      	nop
 8005c40:	40003800 	.word	0x40003800
 8005c44:	40003400 	.word	0x40003400
 8005c48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c4c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005c50:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	685a      	ldr	r2, [r3, #4]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c60:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2201      	movs	r2, #1
 8005c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c6e:	f043 0204 	orr.w	r2, r3, #4
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7ff fd32 	bl	80056e0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005c7c:	e000      	b.n	8005c80 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005c7e:	bf00      	nop
}
 8005c80:	bf00      	nop
 8005c82:	3720      	adds	r7, #32
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}

08005c88 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005c88:	b480      	push	{r7}
 8005c8a:	b083      	sub	sp, #12
 8005c8c:	af00      	add	r7, sp, #0
 8005c8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005c90:	bf00      	nop
 8005c92:	370c      	adds	r7, #12
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b082      	sub	sp, #8
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ca8:	1c99      	adds	r1, r3, #2
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	6251      	str	r1, [r2, #36]	; 0x24
 8005cae:	881a      	ldrh	r2, [r3, #0]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d113      	bne.n	8005cf6 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	685a      	ldr	r2, [r3, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005cdc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ce2:	b29b      	uxth	r3, r3
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d106      	bne.n	8005cf6 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff ffc9 	bl	8005c88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005cf6:	bf00      	nop
 8005cf8:	3708      	adds	r7, #8
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	bd80      	pop	{r7, pc}
	...

08005d00 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b082      	sub	sp, #8
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	1c99      	adds	r1, r3, #2
 8005d0e:	687a      	ldr	r2, [r7, #4]
 8005d10:	6251      	str	r1, [r2, #36]	; 0x24
 8005d12:	8819      	ldrh	r1, [r3, #0]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a1d      	ldr	r2, [pc, #116]	; (8005d90 <I2SEx_TxISR_I2SExt+0x90>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d101      	bne.n	8005d22 <I2SEx_TxISR_I2SExt+0x22>
 8005d1e:	4b1d      	ldr	r3, [pc, #116]	; (8005d94 <I2SEx_TxISR_I2SExt+0x94>)
 8005d20:	e001      	b.n	8005d26 <I2SEx_TxISR_I2SExt+0x26>
 8005d22:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d26:	460a      	mov	r2, r1
 8005d28:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d2e:	b29b      	uxth	r3, r3
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3c:	b29b      	uxth	r3, r3
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d121      	bne.n	8005d86 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a12      	ldr	r2, [pc, #72]	; (8005d90 <I2SEx_TxISR_I2SExt+0x90>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d101      	bne.n	8005d50 <I2SEx_TxISR_I2SExt+0x50>
 8005d4c:	4b11      	ldr	r3, [pc, #68]	; (8005d94 <I2SEx_TxISR_I2SExt+0x94>)
 8005d4e:	e001      	b.n	8005d54 <I2SEx_TxISR_I2SExt+0x54>
 8005d50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d54:	685a      	ldr	r2, [r3, #4]
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	490d      	ldr	r1, [pc, #52]	; (8005d90 <I2SEx_TxISR_I2SExt+0x90>)
 8005d5c:	428b      	cmp	r3, r1
 8005d5e:	d101      	bne.n	8005d64 <I2SEx_TxISR_I2SExt+0x64>
 8005d60:	4b0c      	ldr	r3, [pc, #48]	; (8005d94 <I2SEx_TxISR_I2SExt+0x94>)
 8005d62:	e001      	b.n	8005d68 <I2SEx_TxISR_I2SExt+0x68>
 8005d64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d6c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d106      	bne.n	8005d86 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7ff ff81 	bl	8005c88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005d86:	bf00      	nop
 8005d88:	3708      	adds	r7, #8
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	bd80      	pop	{r7, pc}
 8005d8e:	bf00      	nop
 8005d90:	40003800 	.word	0x40003800
 8005d94:	40003400 	.word	0x40003400

08005d98 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	68d8      	ldr	r0, [r3, #12]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005daa:	1c99      	adds	r1, r3, #2
 8005dac:	687a      	ldr	r2, [r7, #4]
 8005dae:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005db0:	b282      	uxth	r2, r0
 8005db2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005db8:	b29b      	uxth	r3, r3
 8005dba:	3b01      	subs	r3, #1
 8005dbc:	b29a      	uxth	r2, r3
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005dc6:	b29b      	uxth	r3, r3
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d113      	bne.n	8005df4 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	685a      	ldr	r2, [r3, #4]
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005dda:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d106      	bne.n	8005df4 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f7ff ff4a 	bl	8005c88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005df4:	bf00      	nop
 8005df6:	3708      	adds	r7, #8
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bd80      	pop	{r7, pc}

08005dfc <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005dfc:	b580      	push	{r7, lr}
 8005dfe:	b082      	sub	sp, #8
 8005e00:	af00      	add	r7, sp, #0
 8005e02:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4a20      	ldr	r2, [pc, #128]	; (8005e8c <I2SEx_RxISR_I2SExt+0x90>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d101      	bne.n	8005e12 <I2SEx_RxISR_I2SExt+0x16>
 8005e0e:	4b20      	ldr	r3, [pc, #128]	; (8005e90 <I2SEx_RxISR_I2SExt+0x94>)
 8005e10:	e001      	b.n	8005e16 <I2SEx_RxISR_I2SExt+0x1a>
 8005e12:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e16:	68d8      	ldr	r0, [r3, #12]
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e1c:	1c99      	adds	r1, r3, #2
 8005e1e:	687a      	ldr	r2, [r7, #4]
 8005e20:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005e22:	b282      	uxth	r2, r0
 8005e24:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d121      	bne.n	8005e82 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	4a12      	ldr	r2, [pc, #72]	; (8005e8c <I2SEx_RxISR_I2SExt+0x90>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d101      	bne.n	8005e4c <I2SEx_RxISR_I2SExt+0x50>
 8005e48:	4b11      	ldr	r3, [pc, #68]	; (8005e90 <I2SEx_RxISR_I2SExt+0x94>)
 8005e4a:	e001      	b.n	8005e50 <I2SEx_RxISR_I2SExt+0x54>
 8005e4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e50:	685a      	ldr	r2, [r3, #4]
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	490d      	ldr	r1, [pc, #52]	; (8005e8c <I2SEx_RxISR_I2SExt+0x90>)
 8005e58:	428b      	cmp	r3, r1
 8005e5a:	d101      	bne.n	8005e60 <I2SEx_RxISR_I2SExt+0x64>
 8005e5c:	4b0c      	ldr	r3, [pc, #48]	; (8005e90 <I2SEx_RxISR_I2SExt+0x94>)
 8005e5e:	e001      	b.n	8005e64 <I2SEx_RxISR_I2SExt+0x68>
 8005e60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e64:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e68:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d106      	bne.n	8005e82 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff ff03 	bl	8005c88 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e82:	bf00      	nop
 8005e84:	3708      	adds	r7, #8
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	40003800 	.word	0x40003800
 8005e90:	40003400 	.word	0x40003400

08005e94 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b086      	sub	sp, #24
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d101      	bne.n	8005ea6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ea2:	2301      	movs	r3, #1
 8005ea4:	e267      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d075      	beq.n	8005f9e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005eb2:	4b88      	ldr	r3, [pc, #544]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005eb4:	689b      	ldr	r3, [r3, #8]
 8005eb6:	f003 030c 	and.w	r3, r3, #12
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d00c      	beq.n	8005ed8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ebe:	4b85      	ldr	r3, [pc, #532]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005ec0:	689b      	ldr	r3, [r3, #8]
 8005ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ec6:	2b08      	cmp	r3, #8
 8005ec8:	d112      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005eca:	4b82      	ldr	r3, [pc, #520]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005ed2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005ed6:	d10b      	bne.n	8005ef0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005ed8:	4b7e      	ldr	r3, [pc, #504]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d05b      	beq.n	8005f9c <HAL_RCC_OscConfig+0x108>
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	685b      	ldr	r3, [r3, #4]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d157      	bne.n	8005f9c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e242      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	685b      	ldr	r3, [r3, #4]
 8005ef4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ef8:	d106      	bne.n	8005f08 <HAL_RCC_OscConfig+0x74>
 8005efa:	4b76      	ldr	r3, [pc, #472]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a75      	ldr	r2, [pc, #468]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f04:	6013      	str	r3, [r2, #0]
 8005f06:	e01d      	b.n	8005f44 <HAL_RCC_OscConfig+0xb0>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005f10:	d10c      	bne.n	8005f2c <HAL_RCC_OscConfig+0x98>
 8005f12:	4b70      	ldr	r3, [pc, #448]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	4a6f      	ldr	r2, [pc, #444]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	4b6d      	ldr	r3, [pc, #436]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a6c      	ldr	r2, [pc, #432]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f28:	6013      	str	r3, [r2, #0]
 8005f2a:	e00b      	b.n	8005f44 <HAL_RCC_OscConfig+0xb0>
 8005f2c:	4b69      	ldr	r3, [pc, #420]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	4a68      	ldr	r2, [pc, #416]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	4b66      	ldr	r3, [pc, #408]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a65      	ldr	r2, [pc, #404]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d013      	beq.n	8005f74 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f4c:	f7fb fc76 	bl	800183c <HAL_GetTick>
 8005f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f52:	e008      	b.n	8005f66 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f54:	f7fb fc72 	bl	800183c <HAL_GetTick>
 8005f58:	4602      	mov	r2, r0
 8005f5a:	693b      	ldr	r3, [r7, #16]
 8005f5c:	1ad3      	subs	r3, r2, r3
 8005f5e:	2b64      	cmp	r3, #100	; 0x64
 8005f60:	d901      	bls.n	8005f66 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e207      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f66:	4b5b      	ldr	r3, [pc, #364]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d0f0      	beq.n	8005f54 <HAL_RCC_OscConfig+0xc0>
 8005f72:	e014      	b.n	8005f9e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f74:	f7fb fc62 	bl	800183c <HAL_GetTick>
 8005f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f7a:	e008      	b.n	8005f8e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005f7c:	f7fb fc5e 	bl	800183c <HAL_GetTick>
 8005f80:	4602      	mov	r2, r0
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	1ad3      	subs	r3, r2, r3
 8005f86:	2b64      	cmp	r3, #100	; 0x64
 8005f88:	d901      	bls.n	8005f8e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e1f3      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005f8e:	4b51      	ldr	r3, [pc, #324]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005f90:	681b      	ldr	r3, [r3, #0]
 8005f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d1f0      	bne.n	8005f7c <HAL_RCC_OscConfig+0xe8>
 8005f9a:	e000      	b.n	8005f9e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 0302 	and.w	r3, r3, #2
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d063      	beq.n	8006072 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005faa:	4b4a      	ldr	r3, [pc, #296]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005fac:	689b      	ldr	r3, [r3, #8]
 8005fae:	f003 030c 	and.w	r3, r3, #12
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d00b      	beq.n	8005fce <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fb6:	4b47      	ldr	r3, [pc, #284]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005fb8:	689b      	ldr	r3, [r3, #8]
 8005fba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d11c      	bne.n	8005ffc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005fc2:	4b44      	ldr	r3, [pc, #272]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005fc4:	685b      	ldr	r3, [r3, #4]
 8005fc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d116      	bne.n	8005ffc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005fce:	4b41      	ldr	r3, [pc, #260]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f003 0302 	and.w	r3, r3, #2
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d005      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x152>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	68db      	ldr	r3, [r3, #12]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d001      	beq.n	8005fe6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	e1c7      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005fe6:	4b3b      	ldr	r3, [pc, #236]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	00db      	lsls	r3, r3, #3
 8005ff4:	4937      	ldr	r1, [pc, #220]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8005ff6:	4313      	orrs	r3, r2
 8005ff8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005ffa:	e03a      	b.n	8006072 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d020      	beq.n	8006046 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006004:	4b34      	ldr	r3, [pc, #208]	; (80060d8 <HAL_RCC_OscConfig+0x244>)
 8006006:	2201      	movs	r2, #1
 8006008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800600a:	f7fb fc17 	bl	800183c <HAL_GetTick>
 800600e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006010:	e008      	b.n	8006024 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006012:	f7fb fc13 	bl	800183c <HAL_GetTick>
 8006016:	4602      	mov	r2, r0
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	1ad3      	subs	r3, r2, r3
 800601c:	2b02      	cmp	r3, #2
 800601e:	d901      	bls.n	8006024 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006020:	2303      	movs	r3, #3
 8006022:	e1a8      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006024:	4b2b      	ldr	r3, [pc, #172]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f003 0302 	and.w	r3, r3, #2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d0f0      	beq.n	8006012 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006030:	4b28      	ldr	r3, [pc, #160]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	691b      	ldr	r3, [r3, #16]
 800603c:	00db      	lsls	r3, r3, #3
 800603e:	4925      	ldr	r1, [pc, #148]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8006040:	4313      	orrs	r3, r2
 8006042:	600b      	str	r3, [r1, #0]
 8006044:	e015      	b.n	8006072 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006046:	4b24      	ldr	r3, [pc, #144]	; (80060d8 <HAL_RCC_OscConfig+0x244>)
 8006048:	2200      	movs	r2, #0
 800604a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800604c:	f7fb fbf6 	bl	800183c <HAL_GetTick>
 8006050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006052:	e008      	b.n	8006066 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006054:	f7fb fbf2 	bl	800183c <HAL_GetTick>
 8006058:	4602      	mov	r2, r0
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	1ad3      	subs	r3, r2, r3
 800605e:	2b02      	cmp	r3, #2
 8006060:	d901      	bls.n	8006066 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e187      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006066:	4b1b      	ldr	r3, [pc, #108]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f003 0302 	and.w	r3, r3, #2
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1f0      	bne.n	8006054 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f003 0308 	and.w	r3, r3, #8
 800607a:	2b00      	cmp	r3, #0
 800607c:	d036      	beq.n	80060ec <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	695b      	ldr	r3, [r3, #20]
 8006082:	2b00      	cmp	r3, #0
 8006084:	d016      	beq.n	80060b4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006086:	4b15      	ldr	r3, [pc, #84]	; (80060dc <HAL_RCC_OscConfig+0x248>)
 8006088:	2201      	movs	r2, #1
 800608a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800608c:	f7fb fbd6 	bl	800183c <HAL_GetTick>
 8006090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006092:	e008      	b.n	80060a6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006094:	f7fb fbd2 	bl	800183c <HAL_GetTick>
 8006098:	4602      	mov	r2, r0
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	1ad3      	subs	r3, r2, r3
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d901      	bls.n	80060a6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80060a2:	2303      	movs	r3, #3
 80060a4:	e167      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80060a6:	4b0b      	ldr	r3, [pc, #44]	; (80060d4 <HAL_RCC_OscConfig+0x240>)
 80060a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d0f0      	beq.n	8006094 <HAL_RCC_OscConfig+0x200>
 80060b2:	e01b      	b.n	80060ec <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80060b4:	4b09      	ldr	r3, [pc, #36]	; (80060dc <HAL_RCC_OscConfig+0x248>)
 80060b6:	2200      	movs	r2, #0
 80060b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80060ba:	f7fb fbbf 	bl	800183c <HAL_GetTick>
 80060be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060c0:	e00e      	b.n	80060e0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80060c2:	f7fb fbbb 	bl	800183c <HAL_GetTick>
 80060c6:	4602      	mov	r2, r0
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	1ad3      	subs	r3, r2, r3
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	d907      	bls.n	80060e0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80060d0:	2303      	movs	r3, #3
 80060d2:	e150      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
 80060d4:	40023800 	.word	0x40023800
 80060d8:	42470000 	.word	0x42470000
 80060dc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80060e0:	4b88      	ldr	r3, [pc, #544]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 80060e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80060e4:	f003 0302 	and.w	r3, r3, #2
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d1ea      	bne.n	80060c2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f003 0304 	and.w	r3, r3, #4
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	f000 8097 	beq.w	8006228 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060fa:	2300      	movs	r3, #0
 80060fc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060fe:	4b81      	ldr	r3, [pc, #516]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006102:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d10f      	bne.n	800612a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800610a:	2300      	movs	r3, #0
 800610c:	60bb      	str	r3, [r7, #8]
 800610e:	4b7d      	ldr	r3, [pc, #500]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006112:	4a7c      	ldr	r2, [pc, #496]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006114:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006118:	6413      	str	r3, [r2, #64]	; 0x40
 800611a:	4b7a      	ldr	r3, [pc, #488]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006122:	60bb      	str	r3, [r7, #8]
 8006124:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006126:	2301      	movs	r3, #1
 8006128:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800612a:	4b77      	ldr	r3, [pc, #476]	; (8006308 <HAL_RCC_OscConfig+0x474>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006132:	2b00      	cmp	r3, #0
 8006134:	d118      	bne.n	8006168 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006136:	4b74      	ldr	r3, [pc, #464]	; (8006308 <HAL_RCC_OscConfig+0x474>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	4a73      	ldr	r2, [pc, #460]	; (8006308 <HAL_RCC_OscConfig+0x474>)
 800613c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006140:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006142:	f7fb fb7b 	bl	800183c <HAL_GetTick>
 8006146:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006148:	e008      	b.n	800615c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800614a:	f7fb fb77 	bl	800183c <HAL_GetTick>
 800614e:	4602      	mov	r2, r0
 8006150:	693b      	ldr	r3, [r7, #16]
 8006152:	1ad3      	subs	r3, r2, r3
 8006154:	2b02      	cmp	r3, #2
 8006156:	d901      	bls.n	800615c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006158:	2303      	movs	r3, #3
 800615a:	e10c      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800615c:	4b6a      	ldr	r3, [pc, #424]	; (8006308 <HAL_RCC_OscConfig+0x474>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0f0      	beq.n	800614a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	2b01      	cmp	r3, #1
 800616e:	d106      	bne.n	800617e <HAL_RCC_OscConfig+0x2ea>
 8006170:	4b64      	ldr	r3, [pc, #400]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006174:	4a63      	ldr	r2, [pc, #396]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006176:	f043 0301 	orr.w	r3, r3, #1
 800617a:	6713      	str	r3, [r2, #112]	; 0x70
 800617c:	e01c      	b.n	80061b8 <HAL_RCC_OscConfig+0x324>
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	2b05      	cmp	r3, #5
 8006184:	d10c      	bne.n	80061a0 <HAL_RCC_OscConfig+0x30c>
 8006186:	4b5f      	ldr	r3, [pc, #380]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618a:	4a5e      	ldr	r2, [pc, #376]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 800618c:	f043 0304 	orr.w	r3, r3, #4
 8006190:	6713      	str	r3, [r2, #112]	; 0x70
 8006192:	4b5c      	ldr	r3, [pc, #368]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006196:	4a5b      	ldr	r2, [pc, #364]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006198:	f043 0301 	orr.w	r3, r3, #1
 800619c:	6713      	str	r3, [r2, #112]	; 0x70
 800619e:	e00b      	b.n	80061b8 <HAL_RCC_OscConfig+0x324>
 80061a0:	4b58      	ldr	r3, [pc, #352]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 80061a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a4:	4a57      	ldr	r2, [pc, #348]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 80061a6:	f023 0301 	bic.w	r3, r3, #1
 80061aa:	6713      	str	r3, [r2, #112]	; 0x70
 80061ac:	4b55      	ldr	r3, [pc, #340]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 80061ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b0:	4a54      	ldr	r2, [pc, #336]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 80061b2:	f023 0304 	bic.w	r3, r3, #4
 80061b6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	689b      	ldr	r3, [r3, #8]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d015      	beq.n	80061ec <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061c0:	f7fb fb3c 	bl	800183c <HAL_GetTick>
 80061c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061c6:	e00a      	b.n	80061de <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061c8:	f7fb fb38 	bl	800183c <HAL_GetTick>
 80061cc:	4602      	mov	r2, r0
 80061ce:	693b      	ldr	r3, [r7, #16]
 80061d0:	1ad3      	subs	r3, r2, r3
 80061d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80061d6:	4293      	cmp	r3, r2
 80061d8:	d901      	bls.n	80061de <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80061da:	2303      	movs	r3, #3
 80061dc:	e0cb      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061de:	4b49      	ldr	r3, [pc, #292]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 80061e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e2:	f003 0302 	and.w	r3, r3, #2
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d0ee      	beq.n	80061c8 <HAL_RCC_OscConfig+0x334>
 80061ea:	e014      	b.n	8006216 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80061ec:	f7fb fb26 	bl	800183c <HAL_GetTick>
 80061f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80061f2:	e00a      	b.n	800620a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061f4:	f7fb fb22 	bl	800183c <HAL_GetTick>
 80061f8:	4602      	mov	r2, r0
 80061fa:	693b      	ldr	r3, [r7, #16]
 80061fc:	1ad3      	subs	r3, r2, r3
 80061fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006202:	4293      	cmp	r3, r2
 8006204:	d901      	bls.n	800620a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e0b5      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800620a:	4b3e      	ldr	r3, [pc, #248]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 800620c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620e:	f003 0302 	and.w	r3, r3, #2
 8006212:	2b00      	cmp	r3, #0
 8006214:	d1ee      	bne.n	80061f4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006216:	7dfb      	ldrb	r3, [r7, #23]
 8006218:	2b01      	cmp	r3, #1
 800621a:	d105      	bne.n	8006228 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800621c:	4b39      	ldr	r3, [pc, #228]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 800621e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006220:	4a38      	ldr	r2, [pc, #224]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006222:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006226:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	2b00      	cmp	r3, #0
 800622e:	f000 80a1 	beq.w	8006374 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006232:	4b34      	ldr	r3, [pc, #208]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006234:	689b      	ldr	r3, [r3, #8]
 8006236:	f003 030c 	and.w	r3, r3, #12
 800623a:	2b08      	cmp	r3, #8
 800623c:	d05c      	beq.n	80062f8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	2b02      	cmp	r3, #2
 8006244:	d141      	bne.n	80062ca <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006246:	4b31      	ldr	r3, [pc, #196]	; (800630c <HAL_RCC_OscConfig+0x478>)
 8006248:	2200      	movs	r2, #0
 800624a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800624c:	f7fb faf6 	bl	800183c <HAL_GetTick>
 8006250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006252:	e008      	b.n	8006266 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006254:	f7fb faf2 	bl	800183c <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	2b02      	cmp	r3, #2
 8006260:	d901      	bls.n	8006266 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006262:	2303      	movs	r3, #3
 8006264:	e087      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006266:	4b27      	ldr	r3, [pc, #156]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1f0      	bne.n	8006254 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	69da      	ldr	r2, [r3, #28]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6a1b      	ldr	r3, [r3, #32]
 800627a:	431a      	orrs	r2, r3
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	019b      	lsls	r3, r3, #6
 8006282:	431a      	orrs	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006288:	085b      	lsrs	r3, r3, #1
 800628a:	3b01      	subs	r3, #1
 800628c:	041b      	lsls	r3, r3, #16
 800628e:	431a      	orrs	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006294:	061b      	lsls	r3, r3, #24
 8006296:	491b      	ldr	r1, [pc, #108]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 8006298:	4313      	orrs	r3, r2
 800629a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800629c:	4b1b      	ldr	r3, [pc, #108]	; (800630c <HAL_RCC_OscConfig+0x478>)
 800629e:	2201      	movs	r2, #1
 80062a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062a2:	f7fb facb 	bl	800183c <HAL_GetTick>
 80062a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062a8:	e008      	b.n	80062bc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062aa:	f7fb fac7 	bl	800183c <HAL_GetTick>
 80062ae:	4602      	mov	r2, r0
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	1ad3      	subs	r3, r2, r3
 80062b4:	2b02      	cmp	r3, #2
 80062b6:	d901      	bls.n	80062bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e05c      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80062bc:	4b11      	ldr	r3, [pc, #68]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062c4:	2b00      	cmp	r3, #0
 80062c6:	d0f0      	beq.n	80062aa <HAL_RCC_OscConfig+0x416>
 80062c8:	e054      	b.n	8006374 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80062ca:	4b10      	ldr	r3, [pc, #64]	; (800630c <HAL_RCC_OscConfig+0x478>)
 80062cc:	2200      	movs	r2, #0
 80062ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80062d0:	f7fb fab4 	bl	800183c <HAL_GetTick>
 80062d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062d6:	e008      	b.n	80062ea <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80062d8:	f7fb fab0 	bl	800183c <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	693b      	ldr	r3, [r7, #16]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b02      	cmp	r3, #2
 80062e4:	d901      	bls.n	80062ea <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80062e6:	2303      	movs	r3, #3
 80062e8:	e045      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80062ea:	4b06      	ldr	r3, [pc, #24]	; (8006304 <HAL_RCC_OscConfig+0x470>)
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1f0      	bne.n	80062d8 <HAL_RCC_OscConfig+0x444>
 80062f6:	e03d      	b.n	8006374 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	699b      	ldr	r3, [r3, #24]
 80062fc:	2b01      	cmp	r3, #1
 80062fe:	d107      	bne.n	8006310 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006300:	2301      	movs	r3, #1
 8006302:	e038      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
 8006304:	40023800 	.word	0x40023800
 8006308:	40007000 	.word	0x40007000
 800630c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006310:	4b1b      	ldr	r3, [pc, #108]	; (8006380 <HAL_RCC_OscConfig+0x4ec>)
 8006312:	685b      	ldr	r3, [r3, #4]
 8006314:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	699b      	ldr	r3, [r3, #24]
 800631a:	2b01      	cmp	r3, #1
 800631c:	d028      	beq.n	8006370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006328:	429a      	cmp	r2, r3
 800632a:	d121      	bne.n	8006370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006336:	429a      	cmp	r2, r3
 8006338:	d11a      	bne.n	8006370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800633a:	68fa      	ldr	r2, [r7, #12]
 800633c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006340:	4013      	ands	r3, r2
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006346:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006348:	4293      	cmp	r3, r2
 800634a:	d111      	bne.n	8006370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006356:	085b      	lsrs	r3, r3, #1
 8006358:	3b01      	subs	r3, #1
 800635a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800635c:	429a      	cmp	r2, r3
 800635e:	d107      	bne.n	8006370 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800636a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800636c:	429a      	cmp	r2, r3
 800636e:	d001      	beq.n	8006374 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006370:	2301      	movs	r3, #1
 8006372:	e000      	b.n	8006376 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006374:	2300      	movs	r3, #0
}
 8006376:	4618      	mov	r0, r3
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	40023800 	.word	0x40023800

08006384 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e0cc      	b.n	8006532 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006398:	4b68      	ldr	r3, [pc, #416]	; (800653c <HAL_RCC_ClockConfig+0x1b8>)
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0307 	and.w	r3, r3, #7
 80063a0:	683a      	ldr	r2, [r7, #0]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d90c      	bls.n	80063c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063a6:	4b65      	ldr	r3, [pc, #404]	; (800653c <HAL_RCC_ClockConfig+0x1b8>)
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	b2d2      	uxtb	r2, r2
 80063ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80063ae:	4b63      	ldr	r3, [pc, #396]	; (800653c <HAL_RCC_ClockConfig+0x1b8>)
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	f003 0307 	and.w	r3, r3, #7
 80063b6:	683a      	ldr	r2, [r7, #0]
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d001      	beq.n	80063c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	e0b8      	b.n	8006532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f003 0302 	and.w	r3, r3, #2
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d020      	beq.n	800640e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d005      	beq.n	80063e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80063d8:	4b59      	ldr	r3, [pc, #356]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	4a58      	ldr	r2, [pc, #352]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 80063de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80063e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 0308 	and.w	r3, r3, #8
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d005      	beq.n	80063fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80063f0:	4b53      	ldr	r3, [pc, #332]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	4a52      	ldr	r2, [pc, #328]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 80063f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80063fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063fc:	4b50      	ldr	r3, [pc, #320]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 80063fe:	689b      	ldr	r3, [r3, #8]
 8006400:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	689b      	ldr	r3, [r3, #8]
 8006408:	494d      	ldr	r1, [pc, #308]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 800640a:	4313      	orrs	r3, r2
 800640c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0301 	and.w	r3, r3, #1
 8006416:	2b00      	cmp	r3, #0
 8006418:	d044      	beq.n	80064a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	685b      	ldr	r3, [r3, #4]
 800641e:	2b01      	cmp	r3, #1
 8006420:	d107      	bne.n	8006432 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006422:	4b47      	ldr	r3, [pc, #284]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800642a:	2b00      	cmp	r3, #0
 800642c:	d119      	bne.n	8006462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800642e:	2301      	movs	r3, #1
 8006430:	e07f      	b.n	8006532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	685b      	ldr	r3, [r3, #4]
 8006436:	2b02      	cmp	r3, #2
 8006438:	d003      	beq.n	8006442 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800643e:	2b03      	cmp	r3, #3
 8006440:	d107      	bne.n	8006452 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006442:	4b3f      	ldr	r3, [pc, #252]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d109      	bne.n	8006462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e06f      	b.n	8006532 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006452:	4b3b      	ldr	r3, [pc, #236]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	f003 0302 	and.w	r3, r3, #2
 800645a:	2b00      	cmp	r3, #0
 800645c:	d101      	bne.n	8006462 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	e067      	b.n	8006532 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006462:	4b37      	ldr	r3, [pc, #220]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 8006464:	689b      	ldr	r3, [r3, #8]
 8006466:	f023 0203 	bic.w	r2, r3, #3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	4934      	ldr	r1, [pc, #208]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 8006470:	4313      	orrs	r3, r2
 8006472:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006474:	f7fb f9e2 	bl	800183c <HAL_GetTick>
 8006478:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800647a:	e00a      	b.n	8006492 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800647c:	f7fb f9de 	bl	800183c <HAL_GetTick>
 8006480:	4602      	mov	r2, r0
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	1ad3      	subs	r3, r2, r3
 8006486:	f241 3288 	movw	r2, #5000	; 0x1388
 800648a:	4293      	cmp	r3, r2
 800648c:	d901      	bls.n	8006492 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800648e:	2303      	movs	r3, #3
 8006490:	e04f      	b.n	8006532 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006492:	4b2b      	ldr	r3, [pc, #172]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 8006494:	689b      	ldr	r3, [r3, #8]
 8006496:	f003 020c 	and.w	r2, r3, #12
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	009b      	lsls	r3, r3, #2
 80064a0:	429a      	cmp	r2, r3
 80064a2:	d1eb      	bne.n	800647c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80064a4:	4b25      	ldr	r3, [pc, #148]	; (800653c <HAL_RCC_ClockConfig+0x1b8>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f003 0307 	and.w	r3, r3, #7
 80064ac:	683a      	ldr	r2, [r7, #0]
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d20c      	bcs.n	80064cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064b2:	4b22      	ldr	r3, [pc, #136]	; (800653c <HAL_RCC_ClockConfig+0x1b8>)
 80064b4:	683a      	ldr	r2, [r7, #0]
 80064b6:	b2d2      	uxtb	r2, r2
 80064b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80064ba:	4b20      	ldr	r3, [pc, #128]	; (800653c <HAL_RCC_ClockConfig+0x1b8>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0307 	and.w	r3, r3, #7
 80064c2:	683a      	ldr	r2, [r7, #0]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d001      	beq.n	80064cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80064c8:	2301      	movs	r3, #1
 80064ca:	e032      	b.n	8006532 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f003 0304 	and.w	r3, r3, #4
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d008      	beq.n	80064ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80064d8:	4b19      	ldr	r3, [pc, #100]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 80064da:	689b      	ldr	r3, [r3, #8]
 80064dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	4916      	ldr	r1, [pc, #88]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 80064e6:	4313      	orrs	r3, r2
 80064e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f003 0308 	and.w	r3, r3, #8
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d009      	beq.n	800650a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80064f6:	4b12      	ldr	r3, [pc, #72]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 80064f8:	689b      	ldr	r3, [r3, #8]
 80064fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	691b      	ldr	r3, [r3, #16]
 8006502:	00db      	lsls	r3, r3, #3
 8006504:	490e      	ldr	r1, [pc, #56]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 8006506:	4313      	orrs	r3, r2
 8006508:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800650a:	f000 f821 	bl	8006550 <HAL_RCC_GetSysClockFreq>
 800650e:	4602      	mov	r2, r0
 8006510:	4b0b      	ldr	r3, [pc, #44]	; (8006540 <HAL_RCC_ClockConfig+0x1bc>)
 8006512:	689b      	ldr	r3, [r3, #8]
 8006514:	091b      	lsrs	r3, r3, #4
 8006516:	f003 030f 	and.w	r3, r3, #15
 800651a:	490a      	ldr	r1, [pc, #40]	; (8006544 <HAL_RCC_ClockConfig+0x1c0>)
 800651c:	5ccb      	ldrb	r3, [r1, r3]
 800651e:	fa22 f303 	lsr.w	r3, r2, r3
 8006522:	4a09      	ldr	r2, [pc, #36]	; (8006548 <HAL_RCC_ClockConfig+0x1c4>)
 8006524:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006526:	4b09      	ldr	r3, [pc, #36]	; (800654c <HAL_RCC_ClockConfig+0x1c8>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4618      	mov	r0, r3
 800652c:	f7fb f942 	bl	80017b4 <HAL_InitTick>

  return HAL_OK;
 8006530:	2300      	movs	r3, #0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3710      	adds	r7, #16
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}
 800653a:	bf00      	nop
 800653c:	40023c00 	.word	0x40023c00
 8006540:	40023800 	.word	0x40023800
 8006544:	0800dd5c 	.word	0x0800dd5c
 8006548:	20000000 	.word	0x20000000
 800654c:	20000004 	.word	0x20000004

08006550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006550:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006554:	b094      	sub	sp, #80	; 0x50
 8006556:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	647b      	str	r3, [r7, #68]	; 0x44
 800655c:	2300      	movs	r3, #0
 800655e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006560:	2300      	movs	r3, #0
 8006562:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006564:	2300      	movs	r3, #0
 8006566:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006568:	4b79      	ldr	r3, [pc, #484]	; (8006750 <HAL_RCC_GetSysClockFreq+0x200>)
 800656a:	689b      	ldr	r3, [r3, #8]
 800656c:	f003 030c 	and.w	r3, r3, #12
 8006570:	2b08      	cmp	r3, #8
 8006572:	d00d      	beq.n	8006590 <HAL_RCC_GetSysClockFreq+0x40>
 8006574:	2b08      	cmp	r3, #8
 8006576:	f200 80e1 	bhi.w	800673c <HAL_RCC_GetSysClockFreq+0x1ec>
 800657a:	2b00      	cmp	r3, #0
 800657c:	d002      	beq.n	8006584 <HAL_RCC_GetSysClockFreq+0x34>
 800657e:	2b04      	cmp	r3, #4
 8006580:	d003      	beq.n	800658a <HAL_RCC_GetSysClockFreq+0x3a>
 8006582:	e0db      	b.n	800673c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006584:	4b73      	ldr	r3, [pc, #460]	; (8006754 <HAL_RCC_GetSysClockFreq+0x204>)
 8006586:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006588:	e0db      	b.n	8006742 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800658a:	4b73      	ldr	r3, [pc, #460]	; (8006758 <HAL_RCC_GetSysClockFreq+0x208>)
 800658c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800658e:	e0d8      	b.n	8006742 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006590:	4b6f      	ldr	r3, [pc, #444]	; (8006750 <HAL_RCC_GetSysClockFreq+0x200>)
 8006592:	685b      	ldr	r3, [r3, #4]
 8006594:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006598:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800659a:	4b6d      	ldr	r3, [pc, #436]	; (8006750 <HAL_RCC_GetSysClockFreq+0x200>)
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d063      	beq.n	800666e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80065a6:	4b6a      	ldr	r3, [pc, #424]	; (8006750 <HAL_RCC_GetSysClockFreq+0x200>)
 80065a8:	685b      	ldr	r3, [r3, #4]
 80065aa:	099b      	lsrs	r3, r3, #6
 80065ac:	2200      	movs	r2, #0
 80065ae:	63bb      	str	r3, [r7, #56]	; 0x38
 80065b0:	63fa      	str	r2, [r7, #60]	; 0x3c
 80065b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80065b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b8:	633b      	str	r3, [r7, #48]	; 0x30
 80065ba:	2300      	movs	r3, #0
 80065bc:	637b      	str	r3, [r7, #52]	; 0x34
 80065be:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80065c2:	4622      	mov	r2, r4
 80065c4:	462b      	mov	r3, r5
 80065c6:	f04f 0000 	mov.w	r0, #0
 80065ca:	f04f 0100 	mov.w	r1, #0
 80065ce:	0159      	lsls	r1, r3, #5
 80065d0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80065d4:	0150      	lsls	r0, r2, #5
 80065d6:	4602      	mov	r2, r0
 80065d8:	460b      	mov	r3, r1
 80065da:	4621      	mov	r1, r4
 80065dc:	1a51      	subs	r1, r2, r1
 80065de:	6139      	str	r1, [r7, #16]
 80065e0:	4629      	mov	r1, r5
 80065e2:	eb63 0301 	sbc.w	r3, r3, r1
 80065e6:	617b      	str	r3, [r7, #20]
 80065e8:	f04f 0200 	mov.w	r2, #0
 80065ec:	f04f 0300 	mov.w	r3, #0
 80065f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80065f4:	4659      	mov	r1, fp
 80065f6:	018b      	lsls	r3, r1, #6
 80065f8:	4651      	mov	r1, sl
 80065fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80065fe:	4651      	mov	r1, sl
 8006600:	018a      	lsls	r2, r1, #6
 8006602:	4651      	mov	r1, sl
 8006604:	ebb2 0801 	subs.w	r8, r2, r1
 8006608:	4659      	mov	r1, fp
 800660a:	eb63 0901 	sbc.w	r9, r3, r1
 800660e:	f04f 0200 	mov.w	r2, #0
 8006612:	f04f 0300 	mov.w	r3, #0
 8006616:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800661a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800661e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006622:	4690      	mov	r8, r2
 8006624:	4699      	mov	r9, r3
 8006626:	4623      	mov	r3, r4
 8006628:	eb18 0303 	adds.w	r3, r8, r3
 800662c:	60bb      	str	r3, [r7, #8]
 800662e:	462b      	mov	r3, r5
 8006630:	eb49 0303 	adc.w	r3, r9, r3
 8006634:	60fb      	str	r3, [r7, #12]
 8006636:	f04f 0200 	mov.w	r2, #0
 800663a:	f04f 0300 	mov.w	r3, #0
 800663e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006642:	4629      	mov	r1, r5
 8006644:	024b      	lsls	r3, r1, #9
 8006646:	4621      	mov	r1, r4
 8006648:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800664c:	4621      	mov	r1, r4
 800664e:	024a      	lsls	r2, r1, #9
 8006650:	4610      	mov	r0, r2
 8006652:	4619      	mov	r1, r3
 8006654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006656:	2200      	movs	r2, #0
 8006658:	62bb      	str	r3, [r7, #40]	; 0x28
 800665a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800665c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006660:	f7f9 fdb2 	bl	80001c8 <__aeabi_uldivmod>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4613      	mov	r3, r2
 800666a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800666c:	e058      	b.n	8006720 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800666e:	4b38      	ldr	r3, [pc, #224]	; (8006750 <HAL_RCC_GetSysClockFreq+0x200>)
 8006670:	685b      	ldr	r3, [r3, #4]
 8006672:	099b      	lsrs	r3, r3, #6
 8006674:	2200      	movs	r2, #0
 8006676:	4618      	mov	r0, r3
 8006678:	4611      	mov	r1, r2
 800667a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800667e:	623b      	str	r3, [r7, #32]
 8006680:	2300      	movs	r3, #0
 8006682:	627b      	str	r3, [r7, #36]	; 0x24
 8006684:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006688:	4642      	mov	r2, r8
 800668a:	464b      	mov	r3, r9
 800668c:	f04f 0000 	mov.w	r0, #0
 8006690:	f04f 0100 	mov.w	r1, #0
 8006694:	0159      	lsls	r1, r3, #5
 8006696:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800669a:	0150      	lsls	r0, r2, #5
 800669c:	4602      	mov	r2, r0
 800669e:	460b      	mov	r3, r1
 80066a0:	4641      	mov	r1, r8
 80066a2:	ebb2 0a01 	subs.w	sl, r2, r1
 80066a6:	4649      	mov	r1, r9
 80066a8:	eb63 0b01 	sbc.w	fp, r3, r1
 80066ac:	f04f 0200 	mov.w	r2, #0
 80066b0:	f04f 0300 	mov.w	r3, #0
 80066b4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80066b8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80066bc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80066c0:	ebb2 040a 	subs.w	r4, r2, sl
 80066c4:	eb63 050b 	sbc.w	r5, r3, fp
 80066c8:	f04f 0200 	mov.w	r2, #0
 80066cc:	f04f 0300 	mov.w	r3, #0
 80066d0:	00eb      	lsls	r3, r5, #3
 80066d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066d6:	00e2      	lsls	r2, r4, #3
 80066d8:	4614      	mov	r4, r2
 80066da:	461d      	mov	r5, r3
 80066dc:	4643      	mov	r3, r8
 80066de:	18e3      	adds	r3, r4, r3
 80066e0:	603b      	str	r3, [r7, #0]
 80066e2:	464b      	mov	r3, r9
 80066e4:	eb45 0303 	adc.w	r3, r5, r3
 80066e8:	607b      	str	r3, [r7, #4]
 80066ea:	f04f 0200 	mov.w	r2, #0
 80066ee:	f04f 0300 	mov.w	r3, #0
 80066f2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80066f6:	4629      	mov	r1, r5
 80066f8:	028b      	lsls	r3, r1, #10
 80066fa:	4621      	mov	r1, r4
 80066fc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006700:	4621      	mov	r1, r4
 8006702:	028a      	lsls	r2, r1, #10
 8006704:	4610      	mov	r0, r2
 8006706:	4619      	mov	r1, r3
 8006708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800670a:	2200      	movs	r2, #0
 800670c:	61bb      	str	r3, [r7, #24]
 800670e:	61fa      	str	r2, [r7, #28]
 8006710:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006714:	f7f9 fd58 	bl	80001c8 <__aeabi_uldivmod>
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	4613      	mov	r3, r2
 800671e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006720:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <HAL_RCC_GetSysClockFreq+0x200>)
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	0c1b      	lsrs	r3, r3, #16
 8006726:	f003 0303 	and.w	r3, r3, #3
 800672a:	3301      	adds	r3, #1
 800672c:	005b      	lsls	r3, r3, #1
 800672e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006730:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006732:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006734:	fbb2 f3f3 	udiv	r3, r2, r3
 8006738:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800673a:	e002      	b.n	8006742 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800673c:	4b05      	ldr	r3, [pc, #20]	; (8006754 <HAL_RCC_GetSysClockFreq+0x204>)
 800673e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006740:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006744:	4618      	mov	r0, r3
 8006746:	3750      	adds	r7, #80	; 0x50
 8006748:	46bd      	mov	sp, r7
 800674a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800674e:	bf00      	nop
 8006750:	40023800 	.word	0x40023800
 8006754:	00f42400 	.word	0x00f42400
 8006758:	007a1200 	.word	0x007a1200

0800675c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006760:	4b03      	ldr	r3, [pc, #12]	; (8006770 <HAL_RCC_GetHCLKFreq+0x14>)
 8006762:	681b      	ldr	r3, [r3, #0]
}
 8006764:	4618      	mov	r0, r3
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	20000000 	.word	0x20000000

08006774 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006778:	f7ff fff0 	bl	800675c <HAL_RCC_GetHCLKFreq>
 800677c:	4602      	mov	r2, r0
 800677e:	4b05      	ldr	r3, [pc, #20]	; (8006794 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	0a9b      	lsrs	r3, r3, #10
 8006784:	f003 0307 	and.w	r3, r3, #7
 8006788:	4903      	ldr	r1, [pc, #12]	; (8006798 <HAL_RCC_GetPCLK1Freq+0x24>)
 800678a:	5ccb      	ldrb	r3, [r1, r3]
 800678c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006790:	4618      	mov	r0, r3
 8006792:	bd80      	pop	{r7, pc}
 8006794:	40023800 	.word	0x40023800
 8006798:	0800dd6c 	.word	0x0800dd6c

0800679c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b086      	sub	sp, #24
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80067a4:	2300      	movs	r3, #0
 80067a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80067a8:	2300      	movs	r3, #0
 80067aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f003 0301 	and.w	r3, r3, #1
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d105      	bne.n	80067c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d035      	beq.n	8006830 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80067c4:	4b62      	ldr	r3, [pc, #392]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80067c6:	2200      	movs	r2, #0
 80067c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067ca:	f7fb f837 	bl	800183c <HAL_GetTick>
 80067ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067d0:	e008      	b.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80067d2:	f7fb f833 	bl	800183c <HAL_GetTick>
 80067d6:	4602      	mov	r2, r0
 80067d8:	697b      	ldr	r3, [r7, #20]
 80067da:	1ad3      	subs	r3, r2, r3
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d901      	bls.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80067e0:	2303      	movs	r3, #3
 80067e2:	e0b0      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80067e4:	4b5b      	ldr	r3, [pc, #364]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1f0      	bne.n	80067d2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	019a      	lsls	r2, r3, #6
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	071b      	lsls	r3, r3, #28
 80067fc:	4955      	ldr	r1, [pc, #340]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80067fe:	4313      	orrs	r3, r2
 8006800:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006804:	4b52      	ldr	r3, [pc, #328]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006806:	2201      	movs	r2, #1
 8006808:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800680a:	f7fb f817 	bl	800183c <HAL_GetTick>
 800680e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006810:	e008      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006812:	f7fb f813 	bl	800183c <HAL_GetTick>
 8006816:	4602      	mov	r2, r0
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	1ad3      	subs	r3, r2, r3
 800681c:	2b02      	cmp	r3, #2
 800681e:	d901      	bls.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006820:	2303      	movs	r3, #3
 8006822:	e090      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006824:	4b4b      	ldr	r3, [pc, #300]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800682c:	2b00      	cmp	r3, #0
 800682e:	d0f0      	beq.n	8006812 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f003 0302 	and.w	r3, r3, #2
 8006838:	2b00      	cmp	r3, #0
 800683a:	f000 8083 	beq.w	8006944 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800683e:	2300      	movs	r3, #0
 8006840:	60fb      	str	r3, [r7, #12]
 8006842:	4b44      	ldr	r3, [pc, #272]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006846:	4a43      	ldr	r2, [pc, #268]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006848:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800684c:	6413      	str	r3, [r2, #64]	; 0x40
 800684e:	4b41      	ldr	r3, [pc, #260]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006856:	60fb      	str	r3, [r7, #12]
 8006858:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800685a:	4b3f      	ldr	r3, [pc, #252]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a3e      	ldr	r2, [pc, #248]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006864:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006866:	f7fa ffe9 	bl	800183c <HAL_GetTick>
 800686a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800686c:	e008      	b.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800686e:	f7fa ffe5 	bl	800183c <HAL_GetTick>
 8006872:	4602      	mov	r2, r0
 8006874:	697b      	ldr	r3, [r7, #20]
 8006876:	1ad3      	subs	r3, r2, r3
 8006878:	2b02      	cmp	r3, #2
 800687a:	d901      	bls.n	8006880 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800687c:	2303      	movs	r3, #3
 800687e:	e062      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006880:	4b35      	ldr	r3, [pc, #212]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006888:	2b00      	cmp	r3, #0
 800688a:	d0f0      	beq.n	800686e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800688c:	4b31      	ldr	r3, [pc, #196]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800688e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006890:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006894:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006896:	693b      	ldr	r3, [r7, #16]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d02f      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x160>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	68db      	ldr	r3, [r3, #12]
 80068a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068a4:	693a      	ldr	r2, [r7, #16]
 80068a6:	429a      	cmp	r2, r3
 80068a8:	d028      	beq.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80068aa:	4b2a      	ldr	r3, [pc, #168]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80068b4:	4b29      	ldr	r3, [pc, #164]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80068b6:	2201      	movs	r2, #1
 80068b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80068ba:	4b28      	ldr	r3, [pc, #160]	; (800695c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80068bc:	2200      	movs	r2, #0
 80068be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80068c0:	4a24      	ldr	r2, [pc, #144]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80068c6:	4b23      	ldr	r3, [pc, #140]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068ca:	f003 0301 	and.w	r3, r3, #1
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d114      	bne.n	80068fc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80068d2:	f7fa ffb3 	bl	800183c <HAL_GetTick>
 80068d6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068d8:	e00a      	b.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80068da:	f7fa ffaf 	bl	800183c <HAL_GetTick>
 80068de:	4602      	mov	r2, r0
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	1ad3      	subs	r3, r2, r3
 80068e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d901      	bls.n	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80068ec:	2303      	movs	r3, #3
 80068ee:	e02a      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80068f0:	4b18      	ldr	r3, [pc, #96]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80068f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80068f4:	f003 0302 	and.w	r3, r3, #2
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d0ee      	beq.n	80068da <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006904:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006908:	d10d      	bne.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800690a:	4b12      	ldr	r3, [pc, #72]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800690c:	689b      	ldr	r3, [r3, #8]
 800690e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	68db      	ldr	r3, [r3, #12]
 8006916:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800691a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800691e:	490d      	ldr	r1, [pc, #52]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006920:	4313      	orrs	r3, r2
 8006922:	608b      	str	r3, [r1, #8]
 8006924:	e005      	b.n	8006932 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006926:	4b0b      	ldr	r3, [pc, #44]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	4a0a      	ldr	r2, [pc, #40]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800692c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006930:	6093      	str	r3, [r2, #8]
 8006932:	4b08      	ldr	r3, [pc, #32]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006934:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800693e:	4905      	ldr	r1, [pc, #20]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006940:	4313      	orrs	r3, r2
 8006942:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}
 800694e:	bf00      	nop
 8006950:	42470068 	.word	0x42470068
 8006954:	40023800 	.word	0x40023800
 8006958:	40007000 	.word	0x40007000
 800695c:	42470e40 	.word	0x42470e40

08006960 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @param  PeriphClkInit pointer to an RCC_PeriphCLKInitTypeDef structure that
  * will be configured.
  * @retval None
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006960:	b480      	push	{r7}
 8006962:	b085      	sub	sp, #20
 8006964:	af00      	add	r7, sp, #0
 8006966:	6078      	str	r0, [r7, #4]
  uint32_t tempreg;

  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2203      	movs	r2, #3
 800696c:	601a      	str	r2, [r3, #0]

  /* Get the PLLI2S Clock configuration --------------------------------------*/
  PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
 800696e:	4b11      	ldr	r3, [pc, #68]	; (80069b4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006970:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006974:	099b      	lsrs	r3, r3, #6
 8006976:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	605a      	str	r2, [r3, #4]
  PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800697e:	4b0d      	ldr	r3, [pc, #52]	; (80069b4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006984:	0f1b      	lsrs	r3, r3, #28
 8006986:	f003 0207 	and.w	r2, r3, #7
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	609a      	str	r2, [r3, #8]
#if defined(STM32F411xE)
  PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
#endif /* STM32F411xE */
  /* Get the RTC Clock configuration -----------------------------------------*/
  tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
 800698e:	4b09      	ldr	r3, [pc, #36]	; (80069b4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 8006990:	689b      	ldr	r3, [r3, #8]
 8006992:	f403 13f8 	and.w	r3, r3, #2031616	; 0x1f0000
 8006996:	60fb      	str	r3, [r7, #12]
  PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
 8006998:	4b06      	ldr	r3, [pc, #24]	; (80069b4 <HAL_RCCEx_GetPeriphCLKConfig+0x54>)
 800699a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699c:	f403 7240 	and.w	r2, r3, #768	; 0x300
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	431a      	orrs	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	60da      	str	r2, [r3, #12]
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
}
 80069a8:	bf00      	nop
 80069aa:	3714      	adds	r7, #20
 80069ac:	46bd      	mov	sp, r7
 80069ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b2:	4770      	bx	lr
 80069b4:	40023800 	.word	0x40023800

080069b8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80069b8:	b480      	push	{r7}
 80069ba:	b087      	sub	sp, #28
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80069c4:	2300      	movs	r3, #0
 80069c6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80069cc:	2300      	movs	r3, #0
 80069ce:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2b01      	cmp	r3, #1
 80069d4:	d13e      	bne.n	8006a54 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80069d6:	4b23      	ldr	r3, [pc, #140]	; (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80069de:	60fb      	str	r3, [r7, #12]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d005      	beq.n	80069f2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	2b01      	cmp	r3, #1
 80069ea:	d12f      	bne.n	8006a4c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80069ec:	4b1e      	ldr	r3, [pc, #120]	; (8006a68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80069ee:	617b      	str	r3, [r7, #20]
          break;
 80069f0:	e02f      	b.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80069f2:	4b1c      	ldr	r3, [pc, #112]	; (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80069f4:	685b      	ldr	r3, [r3, #4]
 80069f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80069fe:	d108      	bne.n	8006a12 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a00:	4b18      	ldr	r3, [pc, #96]	; (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006a02:	685b      	ldr	r3, [r3, #4]
 8006a04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a08:	4a18      	ldr	r2, [pc, #96]	; (8006a6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a0e:	613b      	str	r3, [r7, #16]
 8006a10:	e007      	b.n	8006a22 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006a12:	4b14      	ldr	r3, [pc, #80]	; (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006a1a:	4a15      	ldr	r2, [pc, #84]	; (8006a70 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8006a1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a20:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006a22:	4b10      	ldr	r3, [pc, #64]	; (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006a24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a28:	099b      	lsrs	r3, r3, #6
 8006a2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	fb02 f303 	mul.w	r3, r2, r3
 8006a34:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006a36:	4b0b      	ldr	r3, [pc, #44]	; (8006a64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006a38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006a3c:	0f1b      	lsrs	r3, r3, #28
 8006a3e:	f003 0307 	and.w	r3, r3, #7
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a48:	617b      	str	r3, [r7, #20]
          break;
 8006a4a:	e002      	b.n	8006a52 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	617b      	str	r3, [r7, #20]
          break;
 8006a50:	bf00      	nop
        }
      }
      break;
 8006a52:	bf00      	nop
    }
  }
  return frequency;
 8006a54:	697b      	ldr	r3, [r7, #20]
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	371c      	adds	r7, #28
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a60:	4770      	bx	lr
 8006a62:	bf00      	nop
 8006a64:	40023800 	.word	0x40023800
 8006a68:	00bb8000 	.word	0x00bb8000
 8006a6c:	007a1200 	.word	0x007a1200
 8006a70:	00f42400 	.word	0x00f42400

08006a74 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a74:	b084      	sub	sp, #16
 8006a76:	b580      	push	{r7, lr}
 8006a78:	b084      	sub	sp, #16
 8006a7a:	af00      	add	r7, sp, #0
 8006a7c:	6078      	str	r0, [r7, #4]
 8006a7e:	f107 001c 	add.w	r0, r7, #28
 8006a82:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d122      	bne.n	8006ad2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a90:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68db      	ldr	r3, [r3, #12]
 8006a9c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aa4:	687a      	ldr	r2, [r7, #4]
 8006aa6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	68db      	ldr	r3, [r3, #12]
 8006aac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006ab4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d105      	bne.n	8006ac6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ac6:	6878      	ldr	r0, [r7, #4]
 8006ac8:	f000 f9c0 	bl	8006e4c <USB_CoreReset>
 8006acc:	4603      	mov	r3, r0
 8006ace:	73fb      	strb	r3, [r7, #15]
 8006ad0:	e01a      	b.n	8006b08 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 f9b4 	bl	8006e4c <USB_CoreReset>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d106      	bne.n	8006afc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006af2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	639a      	str	r2, [r3, #56]	; 0x38
 8006afa:	e005      	b.n	8006b08 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b0a:	2b01      	cmp	r3, #1
 8006b0c:	d10b      	bne.n	8006b26 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	689b      	ldr	r3, [r3, #8]
 8006b12:	f043 0206 	orr.w	r2, r3, #6
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f043 0220 	orr.w	r2, r3, #32
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	3710      	adds	r7, #16
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006b32:	b004      	add	sp, #16
 8006b34:	4770      	bx	lr

08006b36 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	689b      	ldr	r3, [r3, #8]
 8006b42:	f043 0201 	orr.w	r2, r3, #1
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b4a:	2300      	movs	r3, #0
}
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	689b      	ldr	r3, [r3, #8]
 8006b64:	f023 0201 	bic.w	r2, r3, #1
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006b6c:	2300      	movs	r3, #0
}
 8006b6e:	4618      	mov	r0, r3
 8006b70:	370c      	adds	r7, #12
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006b7a:	b580      	push	{r7, lr}
 8006b7c:	b084      	sub	sp, #16
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	460b      	mov	r3, r1
 8006b84:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006b86:	2300      	movs	r3, #0
 8006b88:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68db      	ldr	r3, [r3, #12]
 8006b8e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006b96:	78fb      	ldrb	r3, [r7, #3]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d115      	bne.n	8006bc8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006ba8:	2001      	movs	r0, #1
 8006baa:	f7fa fe53 	bl	8001854 <HAL_Delay>
      ms++;
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 f93a 	bl	8006e2e <USB_GetMode>
 8006bba:	4603      	mov	r3, r0
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d01e      	beq.n	8006bfe <USB_SetCurrentMode+0x84>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2b31      	cmp	r3, #49	; 0x31
 8006bc4:	d9f0      	bls.n	8006ba8 <USB_SetCurrentMode+0x2e>
 8006bc6:	e01a      	b.n	8006bfe <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006bc8:	78fb      	ldrb	r3, [r7, #3]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d115      	bne.n	8006bfa <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	68db      	ldr	r3, [r3, #12]
 8006bd2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006bda:	2001      	movs	r0, #1
 8006bdc:	f7fa fe3a 	bl	8001854 <HAL_Delay>
      ms++;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	3301      	adds	r3, #1
 8006be4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 f921 	bl	8006e2e <USB_GetMode>
 8006bec:	4603      	mov	r3, r0
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d005      	beq.n	8006bfe <USB_SetCurrentMode+0x84>
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	2b31      	cmp	r3, #49	; 0x31
 8006bf6:	d9f0      	bls.n	8006bda <USB_SetCurrentMode+0x60>
 8006bf8:	e001      	b.n	8006bfe <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006bfa:	2301      	movs	r3, #1
 8006bfc:	e005      	b.n	8006c0a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2b32      	cmp	r3, #50	; 0x32
 8006c02:	d101      	bne.n	8006c08 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e000      	b.n	8006c0a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006c08:	2300      	movs	r3, #0
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3710      	adds	r7, #16
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}
	...

08006c14 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
 8006c1c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	3301      	adds	r3, #1
 8006c26:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	4a13      	ldr	r2, [pc, #76]	; (8006c78 <USB_FlushTxFifo+0x64>)
 8006c2c:	4293      	cmp	r3, r2
 8006c2e:	d901      	bls.n	8006c34 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006c30:	2303      	movs	r3, #3
 8006c32:	e01b      	b.n	8006c6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	691b      	ldr	r3, [r3, #16]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	daf2      	bge.n	8006c22 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006c40:	683b      	ldr	r3, [r7, #0]
 8006c42:	019b      	lsls	r3, r3, #6
 8006c44:	f043 0220 	orr.w	r2, r3, #32
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	3301      	adds	r3, #1
 8006c50:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	4a08      	ldr	r2, [pc, #32]	; (8006c78 <USB_FlushTxFifo+0x64>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d901      	bls.n	8006c5e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006c5a:	2303      	movs	r3, #3
 8006c5c:	e006      	b.n	8006c6c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	691b      	ldr	r3, [r3, #16]
 8006c62:	f003 0320 	and.w	r3, r3, #32
 8006c66:	2b20      	cmp	r3, #32
 8006c68:	d0f0      	beq.n	8006c4c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006c6a:	2300      	movs	r3, #0
}
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	3714      	adds	r7, #20
 8006c70:	46bd      	mov	sp, r7
 8006c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c76:	4770      	bx	lr
 8006c78:	00030d40 	.word	0x00030d40

08006c7c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b085      	sub	sp, #20
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006c84:	2300      	movs	r3, #0
 8006c86:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	3301      	adds	r3, #1
 8006c8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	4a11      	ldr	r2, [pc, #68]	; (8006cd8 <USB_FlushRxFifo+0x5c>)
 8006c92:	4293      	cmp	r3, r2
 8006c94:	d901      	bls.n	8006c9a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e018      	b.n	8006ccc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	691b      	ldr	r3, [r3, #16]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	daf2      	bge.n	8006c88 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2210      	movs	r2, #16
 8006caa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	3301      	adds	r3, #1
 8006cb0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	4a08      	ldr	r2, [pc, #32]	; (8006cd8 <USB_FlushRxFifo+0x5c>)
 8006cb6:	4293      	cmp	r3, r2
 8006cb8:	d901      	bls.n	8006cbe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006cba:	2303      	movs	r3, #3
 8006cbc:	e006      	b.n	8006ccc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	691b      	ldr	r3, [r3, #16]
 8006cc2:	f003 0310 	and.w	r3, r3, #16
 8006cc6:	2b10      	cmp	r3, #16
 8006cc8:	d0f0      	beq.n	8006cac <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006cca:	2300      	movs	r3, #0
}
 8006ccc:	4618      	mov	r0, r3
 8006cce:	3714      	adds	r7, #20
 8006cd0:	46bd      	mov	sp, r7
 8006cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd6:	4770      	bx	lr
 8006cd8:	00030d40 	.word	0x00030d40

08006cdc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b089      	sub	sp, #36	; 0x24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	4611      	mov	r1, r2
 8006ce8:	461a      	mov	r2, r3
 8006cea:	460b      	mov	r3, r1
 8006cec:	71fb      	strb	r3, [r7, #7]
 8006cee:	4613      	mov	r3, r2
 8006cf0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006cfa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d123      	bne.n	8006d4a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006d02:	88bb      	ldrh	r3, [r7, #4]
 8006d04:	3303      	adds	r3, #3
 8006d06:	089b      	lsrs	r3, r3, #2
 8006d08:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	61bb      	str	r3, [r7, #24]
 8006d0e:	e018      	b.n	8006d42 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006d10:	79fb      	ldrb	r3, [r7, #7]
 8006d12:	031a      	lsls	r2, r3, #12
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	4413      	add	r3, r2
 8006d18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d1c:	461a      	mov	r2, r3
 8006d1e:	69fb      	ldr	r3, [r7, #28]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006d24:	69fb      	ldr	r3, [r7, #28]
 8006d26:	3301      	adds	r3, #1
 8006d28:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d2a:	69fb      	ldr	r3, [r7, #28]
 8006d2c:	3301      	adds	r3, #1
 8006d2e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	3301      	adds	r3, #1
 8006d34:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006d36:	69fb      	ldr	r3, [r7, #28]
 8006d38:	3301      	adds	r3, #1
 8006d3a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006d3c:	69bb      	ldr	r3, [r7, #24]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	61bb      	str	r3, [r7, #24]
 8006d42:	69ba      	ldr	r2, [r7, #24]
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	429a      	cmp	r2, r3
 8006d48:	d3e2      	bcc.n	8006d10 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006d4a:	2300      	movs	r3, #0
}
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	3724      	adds	r7, #36	; 0x24
 8006d50:	46bd      	mov	sp, r7
 8006d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d56:	4770      	bx	lr

08006d58 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006d58:	b480      	push	{r7}
 8006d5a:	b08b      	sub	sp, #44	; 0x2c
 8006d5c:	af00      	add	r7, sp, #0
 8006d5e:	60f8      	str	r0, [r7, #12]
 8006d60:	60b9      	str	r1, [r7, #8]
 8006d62:	4613      	mov	r3, r2
 8006d64:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006d6e:	88fb      	ldrh	r3, [r7, #6]
 8006d70:	089b      	lsrs	r3, r3, #2
 8006d72:	b29b      	uxth	r3, r3
 8006d74:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006d76:	88fb      	ldrh	r3, [r7, #6]
 8006d78:	f003 0303 	and.w	r3, r3, #3
 8006d7c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006d7e:	2300      	movs	r3, #0
 8006d80:	623b      	str	r3, [r7, #32]
 8006d82:	e014      	b.n	8006dae <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006d84:	69bb      	ldr	r3, [r7, #24]
 8006d86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d8e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d92:	3301      	adds	r3, #1
 8006d94:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d98:	3301      	adds	r3, #1
 8006d9a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9e:	3301      	adds	r3, #1
 8006da0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006da2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006da4:	3301      	adds	r3, #1
 8006da6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006da8:	6a3b      	ldr	r3, [r7, #32]
 8006daa:	3301      	adds	r3, #1
 8006dac:	623b      	str	r3, [r7, #32]
 8006dae:	6a3a      	ldr	r2, [r7, #32]
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d3e6      	bcc.n	8006d84 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006db6:	8bfb      	ldrh	r3, [r7, #30]
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d01e      	beq.n	8006dfa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006dc0:	69bb      	ldr	r3, [r7, #24]
 8006dc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006dc6:	461a      	mov	r2, r3
 8006dc8:	f107 0310 	add.w	r3, r7, #16
 8006dcc:	6812      	ldr	r2, [r2, #0]
 8006dce:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	6a3b      	ldr	r3, [r7, #32]
 8006dd4:	b2db      	uxtb	r3, r3
 8006dd6:	00db      	lsls	r3, r3, #3
 8006dd8:	fa22 f303 	lsr.w	r3, r2, r3
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	701a      	strb	r2, [r3, #0]
      i++;
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	3301      	adds	r3, #1
 8006de6:	623b      	str	r3, [r7, #32]
      pDest++;
 8006de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dea:	3301      	adds	r3, #1
 8006dec:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006dee:	8bfb      	ldrh	r3, [r7, #30]
 8006df0:	3b01      	subs	r3, #1
 8006df2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006df4:	8bfb      	ldrh	r3, [r7, #30]
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d1ea      	bne.n	8006dd0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	372c      	adds	r7, #44	; 0x2c
 8006e00:	46bd      	mov	sp, r7
 8006e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e06:	4770      	bx	lr

08006e08 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006e08:	b480      	push	{r7}
 8006e0a:	b085      	sub	sp, #20
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	695b      	ldr	r3, [r3, #20]
 8006e14:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	68fa      	ldr	r2, [r7, #12]
 8006e1c:	4013      	ands	r3, r2
 8006e1e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006e20:	68fb      	ldr	r3, [r7, #12]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b083      	sub	sp, #12
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	695b      	ldr	r3, [r3, #20]
 8006e3a:	f003 0301 	and.w	r3, r3, #1
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	370c      	adds	r7, #12
 8006e42:	46bd      	mov	sp, r7
 8006e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e48:	4770      	bx	lr
	...

08006e4c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4a13      	ldr	r2, [pc, #76]	; (8006eb0 <USB_CoreReset+0x64>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d901      	bls.n	8006e6a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e01b      	b.n	8006ea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	691b      	ldr	r3, [r3, #16]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	daf2      	bge.n	8006e58 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e72:	2300      	movs	r3, #0
 8006e74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	f043 0201 	orr.w	r2, r3, #1
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3301      	adds	r3, #1
 8006e86:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	4a09      	ldr	r2, [pc, #36]	; (8006eb0 <USB_CoreReset+0x64>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d901      	bls.n	8006e94 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e006      	b.n	8006ea2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	691b      	ldr	r3, [r3, #16]
 8006e98:	f003 0301 	and.w	r3, r3, #1
 8006e9c:	2b01      	cmp	r3, #1
 8006e9e:	d0f0      	beq.n	8006e82 <USB_CoreReset+0x36>

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	3714      	adds	r7, #20
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	00030d40 	.word	0x00030d40

08006eb4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006eb4:	b084      	sub	sp, #16
 8006eb6:	b580      	push	{r7, lr}
 8006eb8:	b086      	sub	sp, #24
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006ec2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ede:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006eea:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ef6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f06:	2b00      	cmp	r3, #0
 8006f08:	d018      	beq.n	8006f3c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8006f0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d10a      	bne.n	8006f26 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	68fa      	ldr	r2, [r7, #12]
 8006f1a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f1e:	f043 0304 	orr.w	r3, r3, #4
 8006f22:	6013      	str	r3, [r2, #0]
 8006f24:	e014      	b.n	8006f50 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68fa      	ldr	r2, [r7, #12]
 8006f30:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f34:	f023 0304 	bic.w	r3, r3, #4
 8006f38:	6013      	str	r3, [r2, #0]
 8006f3a:	e009      	b.n	8006f50 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	68fa      	ldr	r2, [r7, #12]
 8006f46:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006f4a:	f023 0304 	bic.w	r3, r3, #4
 8006f4e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006f50:	2110      	movs	r1, #16
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f7ff fe5e 	bl	8006c14 <USB_FlushTxFifo>
 8006f58:	4603      	mov	r3, r0
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d001      	beq.n	8006f62 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006f62:	6878      	ldr	r0, [r7, #4]
 8006f64:	f7ff fe8a 	bl	8006c7c <USB_FlushRxFifo>
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d001      	beq.n	8006f72 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006f6e:	2301      	movs	r3, #1
 8006f70:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f72:	2300      	movs	r3, #0
 8006f74:	613b      	str	r3, [r7, #16]
 8006f76:	e015      	b.n	8006fa4 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	015a      	lsls	r2, r3, #5
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	4413      	add	r3, r2
 8006f80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f84:	461a      	mov	r2, r3
 8006f86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006f8a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006f8c:	693b      	ldr	r3, [r7, #16]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f98:	461a      	mov	r2, r3
 8006f9a:	2300      	movs	r3, #0
 8006f9c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006f9e:	693b      	ldr	r3, [r7, #16]
 8006fa0:	3301      	adds	r3, #1
 8006fa2:	613b      	str	r3, [r7, #16]
 8006fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fa6:	693a      	ldr	r2, [r7, #16]
 8006fa8:	429a      	cmp	r2, r3
 8006faa:	d3e5      	bcc.n	8006f78 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006fb8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d00b      	beq.n	8006fde <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006fcc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a13      	ldr	r2, [pc, #76]	; (8007020 <USB_HostInit+0x16c>)
 8006fd2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	4a13      	ldr	r2, [pc, #76]	; (8007024 <USB_HostInit+0x170>)
 8006fd8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006fdc:	e009      	b.n	8006ff2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	2280      	movs	r2, #128	; 0x80
 8006fe2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	4a10      	ldr	r2, [pc, #64]	; (8007028 <USB_HostInit+0x174>)
 8006fe8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a0f      	ldr	r2, [pc, #60]	; (800702c <USB_HostInit+0x178>)
 8006fee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d105      	bne.n	8007004 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	699b      	ldr	r3, [r3, #24]
 8006ffc:	f043 0210 	orr.w	r2, r3, #16
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	699a      	ldr	r2, [r3, #24]
 8007008:	4b09      	ldr	r3, [pc, #36]	; (8007030 <USB_HostInit+0x17c>)
 800700a:	4313      	orrs	r3, r2
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8007010:	7dfb      	ldrb	r3, [r7, #23]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3718      	adds	r7, #24
 8007016:	46bd      	mov	sp, r7
 8007018:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800701c:	b004      	add	sp, #16
 800701e:	4770      	bx	lr
 8007020:	01000200 	.word	0x01000200
 8007024:	00e00300 	.word	0x00e00300
 8007028:	00600080 	.word	0x00600080
 800702c:	004000e0 	.word	0x004000e0
 8007030:	a3200008 	.word	0xa3200008

08007034 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007034:	b480      	push	{r7}
 8007036:	b085      	sub	sp, #20
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
 800703c:	460b      	mov	r3, r1
 800703e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	68fa      	ldr	r2, [r7, #12]
 800704e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8007052:	f023 0303 	bic.w	r3, r3, #3
 8007056:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800705e:	681a      	ldr	r2, [r3, #0]
 8007060:	78fb      	ldrb	r3, [r7, #3]
 8007062:	f003 0303 	and.w	r3, r3, #3
 8007066:	68f9      	ldr	r1, [r7, #12]
 8007068:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800706c:	4313      	orrs	r3, r2
 800706e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007070:	78fb      	ldrb	r3, [r7, #3]
 8007072:	2b01      	cmp	r3, #1
 8007074:	d107      	bne.n	8007086 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800707c:	461a      	mov	r2, r3
 800707e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8007082:	6053      	str	r3, [r2, #4]
 8007084:	e009      	b.n	800709a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8007086:	78fb      	ldrb	r3, [r7, #3]
 8007088:	2b02      	cmp	r3, #2
 800708a:	d106      	bne.n	800709a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007092:	461a      	mov	r2, r3
 8007094:	f241 7370 	movw	r3, #6000	; 0x1770
 8007098:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800709a:	2300      	movs	r3, #0
}
 800709c:	4618      	mov	r0, r3
 800709e:	3714      	adds	r7, #20
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80070c8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	68fa      	ldr	r2, [r7, #12]
 80070ce:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80070d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070d6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80070d8:	2064      	movs	r0, #100	; 0x64
 80070da:	f7fa fbbb 	bl	8001854 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80070e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80070ea:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80070ec:	200a      	movs	r0, #10
 80070ee:	f7fa fbb1 	bl	8001854 <HAL_Delay>

  return HAL_OK;
 80070f2:	2300      	movs	r3, #0
}
 80070f4:	4618      	mov	r0, r3
 80070f6:	3710      	adds	r7, #16
 80070f8:	46bd      	mov	sp, r7
 80070fa:	bd80      	pop	{r7, pc}

080070fc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b085      	sub	sp, #20
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	460b      	mov	r3, r1
 8007106:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800710c:	2300      	movs	r3, #0
 800710e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800711a:	68bb      	ldr	r3, [r7, #8]
 800711c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8007120:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007128:	2b00      	cmp	r3, #0
 800712a:	d109      	bne.n	8007140 <USB_DriveVbus+0x44>
 800712c:	78fb      	ldrb	r3, [r7, #3]
 800712e:	2b01      	cmp	r3, #1
 8007130:	d106      	bne.n	8007140 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	68fa      	ldr	r2, [r7, #12]
 8007136:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800713a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800713e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007140:	68bb      	ldr	r3, [r7, #8]
 8007142:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800714a:	d109      	bne.n	8007160 <USB_DriveVbus+0x64>
 800714c:	78fb      	ldrb	r3, [r7, #3]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d106      	bne.n	8007160 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007152:	68bb      	ldr	r3, [r7, #8]
 8007154:	68fa      	ldr	r2, [r7, #12]
 8007156:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800715a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800715e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007160:	2300      	movs	r3, #0
}
 8007162:	4618      	mov	r0, r3
 8007164:	3714      	adds	r7, #20
 8007166:	46bd      	mov	sp, r7
 8007168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716c:	4770      	bx	lr

0800716e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800716e:	b480      	push	{r7}
 8007170:	b085      	sub	sp, #20
 8007172:	af00      	add	r7, sp, #0
 8007174:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800717a:	2300      	movs	r3, #0
 800717c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8007188:	68bb      	ldr	r3, [r7, #8]
 800718a:	0c5b      	lsrs	r3, r3, #17
 800718c:	f003 0303 	and.w	r3, r3, #3
}
 8007190:	4618      	mov	r0, r3
 8007192:	3714      	adds	r7, #20
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr

0800719c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	b29b      	uxth	r3, r3
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr
	...

080071c0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b088      	sub	sp, #32
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	4608      	mov	r0, r1
 80071ca:	4611      	mov	r1, r2
 80071cc:	461a      	mov	r2, r3
 80071ce:	4603      	mov	r3, r0
 80071d0:	70fb      	strb	r3, [r7, #3]
 80071d2:	460b      	mov	r3, r1
 80071d4:	70bb      	strb	r3, [r7, #2]
 80071d6:	4613      	mov	r3, r2
 80071d8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80071da:	2300      	movs	r3, #0
 80071dc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80071e2:	78fb      	ldrb	r3, [r7, #3]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ee:	461a      	mov	r2, r3
 80071f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80071f4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80071f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80071fa:	2b03      	cmp	r3, #3
 80071fc:	d87e      	bhi.n	80072fc <USB_HC_Init+0x13c>
 80071fe:	a201      	add	r2, pc, #4	; (adr r2, 8007204 <USB_HC_Init+0x44>)
 8007200:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007204:	08007215 	.word	0x08007215
 8007208:	080072bf 	.word	0x080072bf
 800720c:	08007215 	.word	0x08007215
 8007210:	08007281 	.word	0x08007281
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007214:	78fb      	ldrb	r3, [r7, #3]
 8007216:	015a      	lsls	r2, r3, #5
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	4413      	add	r3, r2
 800721c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007220:	461a      	mov	r2, r3
 8007222:	f240 439d 	movw	r3, #1181	; 0x49d
 8007226:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8007228:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800722c:	2b00      	cmp	r3, #0
 800722e:	da10      	bge.n	8007252 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007230:	78fb      	ldrb	r3, [r7, #3]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	4413      	add	r3, r2
 8007238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	78fa      	ldrb	r2, [r7, #3]
 8007240:	0151      	lsls	r1, r2, #5
 8007242:	693a      	ldr	r2, [r7, #16]
 8007244:	440a      	add	r2, r1
 8007246:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800724a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800724e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8007250:	e057      	b.n	8007302 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800725a:	2b00      	cmp	r3, #0
 800725c:	d051      	beq.n	8007302 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800725e:	78fb      	ldrb	r3, [r7, #3]
 8007260:	015a      	lsls	r2, r3, #5
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	4413      	add	r3, r2
 8007266:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	78fa      	ldrb	r2, [r7, #3]
 800726e:	0151      	lsls	r1, r2, #5
 8007270:	693a      	ldr	r2, [r7, #16]
 8007272:	440a      	add	r2, r1
 8007274:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007278:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800727c:	60d3      	str	r3, [r2, #12]
      break;
 800727e:	e040      	b.n	8007302 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007280:	78fb      	ldrb	r3, [r7, #3]
 8007282:	015a      	lsls	r2, r3, #5
 8007284:	693b      	ldr	r3, [r7, #16]
 8007286:	4413      	add	r3, r2
 8007288:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800728c:	461a      	mov	r2, r3
 800728e:	f240 639d 	movw	r3, #1693	; 0x69d
 8007292:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007294:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007298:	2b00      	cmp	r3, #0
 800729a:	da34      	bge.n	8007306 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800729c:	78fb      	ldrb	r3, [r7, #3]
 800729e:	015a      	lsls	r2, r3, #5
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	4413      	add	r3, r2
 80072a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072a8:	68db      	ldr	r3, [r3, #12]
 80072aa:	78fa      	ldrb	r2, [r7, #3]
 80072ac:	0151      	lsls	r1, r2, #5
 80072ae:	693a      	ldr	r2, [r7, #16]
 80072b0:	440a      	add	r2, r1
 80072b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072ba:	60d3      	str	r3, [r2, #12]
      }

      break;
 80072bc:	e023      	b.n	8007306 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80072be:	78fb      	ldrb	r3, [r7, #3]
 80072c0:	015a      	lsls	r2, r3, #5
 80072c2:	693b      	ldr	r3, [r7, #16]
 80072c4:	4413      	add	r3, r2
 80072c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072ca:	461a      	mov	r2, r3
 80072cc:	f240 2325 	movw	r3, #549	; 0x225
 80072d0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80072d2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	da17      	bge.n	800730a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80072da:	78fb      	ldrb	r3, [r7, #3]
 80072dc:	015a      	lsls	r2, r3, #5
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	4413      	add	r3, r2
 80072e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	78fa      	ldrb	r2, [r7, #3]
 80072ea:	0151      	lsls	r1, r2, #5
 80072ec:	693a      	ldr	r2, [r7, #16]
 80072ee:	440a      	add	r2, r1
 80072f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072f4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80072f8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80072fa:	e006      	b.n	800730a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80072fc:	2301      	movs	r3, #1
 80072fe:	77fb      	strb	r3, [r7, #31]
      break;
 8007300:	e004      	b.n	800730c <USB_HC_Init+0x14c>
      break;
 8007302:	bf00      	nop
 8007304:	e002      	b.n	800730c <USB_HC_Init+0x14c>
      break;
 8007306:	bf00      	nop
 8007308:	e000      	b.n	800730c <USB_HC_Init+0x14c>
      break;
 800730a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800730c:	78fb      	ldrb	r3, [r7, #3]
 800730e:	015a      	lsls	r2, r3, #5
 8007310:	693b      	ldr	r3, [r7, #16]
 8007312:	4413      	add	r3, r2
 8007314:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007318:	68db      	ldr	r3, [r3, #12]
 800731a:	78fa      	ldrb	r2, [r7, #3]
 800731c:	0151      	lsls	r1, r2, #5
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	440a      	add	r2, r1
 8007322:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007326:	f043 0302 	orr.w	r3, r3, #2
 800732a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007332:	699a      	ldr	r2, [r3, #24]
 8007334:	78fb      	ldrb	r3, [r7, #3]
 8007336:	f003 030f 	and.w	r3, r3, #15
 800733a:	2101      	movs	r1, #1
 800733c:	fa01 f303 	lsl.w	r3, r1, r3
 8007340:	6939      	ldr	r1, [r7, #16]
 8007342:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8007346:	4313      	orrs	r3, r2
 8007348:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	699b      	ldr	r3, [r3, #24]
 800734e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007356:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800735a:	2b00      	cmp	r3, #0
 800735c:	da03      	bge.n	8007366 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800735e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007362:	61bb      	str	r3, [r7, #24]
 8007364:	e001      	b.n	800736a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f7ff feff 	bl	800716e <USB_GetHostSpeed>
 8007370:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007372:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8007376:	2b02      	cmp	r3, #2
 8007378:	d106      	bne.n	8007388 <USB_HC_Init+0x1c8>
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	2b02      	cmp	r3, #2
 800737e:	d003      	beq.n	8007388 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007380:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8007384:	617b      	str	r3, [r7, #20]
 8007386:	e001      	b.n	800738c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8007388:	2300      	movs	r3, #0
 800738a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800738c:	787b      	ldrb	r3, [r7, #1]
 800738e:	059b      	lsls	r3, r3, #22
 8007390:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007394:	78bb      	ldrb	r3, [r7, #2]
 8007396:	02db      	lsls	r3, r3, #11
 8007398:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800739c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800739e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80073a2:	049b      	lsls	r3, r3, #18
 80073a4:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80073a8:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80073aa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80073ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80073b0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80073b2:	69bb      	ldr	r3, [r7, #24]
 80073b4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80073b6:	78fb      	ldrb	r3, [r7, #3]
 80073b8:	0159      	lsls	r1, r3, #5
 80073ba:	693b      	ldr	r3, [r7, #16]
 80073bc:	440b      	add	r3, r1
 80073be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073c2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80073c8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80073ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80073ce:	2b03      	cmp	r3, #3
 80073d0:	d003      	beq.n	80073da <USB_HC_Init+0x21a>
 80073d2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80073d6:	2b01      	cmp	r3, #1
 80073d8:	d10f      	bne.n	80073fa <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80073da:	78fb      	ldrb	r3, [r7, #3]
 80073dc:	015a      	lsls	r2, r3, #5
 80073de:	693b      	ldr	r3, [r7, #16]
 80073e0:	4413      	add	r3, r2
 80073e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	78fa      	ldrb	r2, [r7, #3]
 80073ea:	0151      	lsls	r1, r2, #5
 80073ec:	693a      	ldr	r2, [r7, #16]
 80073ee:	440a      	add	r2, r1
 80073f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073f4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80073f8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80073fa:	7ffb      	ldrb	r3, [r7, #31]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3720      	adds	r7, #32
 8007400:	46bd      	mov	sp, r7
 8007402:	bd80      	pop	{r7, pc}

08007404 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8007404:	b580      	push	{r7, lr}
 8007406:	b08c      	sub	sp, #48	; 0x30
 8007408:	af02      	add	r7, sp, #8
 800740a:	60f8      	str	r0, [r7, #12]
 800740c:	60b9      	str	r1, [r7, #8]
 800740e:	4613      	mov	r3, r2
 8007410:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	785b      	ldrb	r3, [r3, #1]
 800741a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800741c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007420:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007426:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800742a:	2b00      	cmp	r3, #0
 800742c:	d02d      	beq.n	800748a <USB_HC_StartXfer+0x86>
 800742e:	68bb      	ldr	r3, [r7, #8]
 8007430:	791b      	ldrb	r3, [r3, #4]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d129      	bne.n	800748a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8007436:	79fb      	ldrb	r3, [r7, #7]
 8007438:	2b01      	cmp	r3, #1
 800743a:	d117      	bne.n	800746c <USB_HC_StartXfer+0x68>
 800743c:	68bb      	ldr	r3, [r7, #8]
 800743e:	79db      	ldrb	r3, [r3, #7]
 8007440:	2b00      	cmp	r3, #0
 8007442:	d003      	beq.n	800744c <USB_HC_StartXfer+0x48>
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	79db      	ldrb	r3, [r3, #7]
 8007448:	2b02      	cmp	r3, #2
 800744a:	d10f      	bne.n	800746c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800744c:	69fb      	ldr	r3, [r7, #28]
 800744e:	015a      	lsls	r2, r3, #5
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	4413      	add	r3, r2
 8007454:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	69fa      	ldr	r2, [r7, #28]
 800745c:	0151      	lsls	r1, r2, #5
 800745e:	6a3a      	ldr	r2, [r7, #32]
 8007460:	440a      	add	r2, r1
 8007462:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800746a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800746c:	79fb      	ldrb	r3, [r7, #7]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d10b      	bne.n	800748a <USB_HC_StartXfer+0x86>
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	795b      	ldrb	r3, [r3, #5]
 8007476:	2b01      	cmp	r3, #1
 8007478:	d107      	bne.n	800748a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	785b      	ldrb	r3, [r3, #1]
 800747e:	4619      	mov	r1, r3
 8007480:	68f8      	ldr	r0, [r7, #12]
 8007482:	f000 fa0f 	bl	80078a4 <USB_DoPing>
      return HAL_OK;
 8007486:	2300      	movs	r3, #0
 8007488:	e0f8      	b.n	800767c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	695b      	ldr	r3, [r3, #20]
 800748e:	2b00      	cmp	r3, #0
 8007490:	d018      	beq.n	80074c4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	68ba      	ldr	r2, [r7, #8]
 8007498:	8912      	ldrh	r2, [r2, #8]
 800749a:	4413      	add	r3, r2
 800749c:	3b01      	subs	r3, #1
 800749e:	68ba      	ldr	r2, [r7, #8]
 80074a0:	8912      	ldrh	r2, [r2, #8]
 80074a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80074a6:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80074a8:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80074aa:	8b7b      	ldrh	r3, [r7, #26]
 80074ac:	429a      	cmp	r2, r3
 80074ae:	d90b      	bls.n	80074c8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80074b0:	8b7b      	ldrh	r3, [r7, #26]
 80074b2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80074b4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074b6:	68ba      	ldr	r2, [r7, #8]
 80074b8:	8912      	ldrh	r2, [r2, #8]
 80074ba:	fb03 f202 	mul.w	r2, r3, r2
 80074be:	68bb      	ldr	r3, [r7, #8]
 80074c0:	611a      	str	r2, [r3, #16]
 80074c2:	e001      	b.n	80074c8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80074c4:	2301      	movs	r3, #1
 80074c6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	78db      	ldrb	r3, [r3, #3]
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d007      	beq.n	80074e0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80074d0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074d2:	68ba      	ldr	r2, [r7, #8]
 80074d4:	8912      	ldrh	r2, [r2, #8]
 80074d6:	fb03 f202 	mul.w	r2, r3, r2
 80074da:	68bb      	ldr	r3, [r7, #8]
 80074dc:	611a      	str	r2, [r3, #16]
 80074de:	e003      	b.n	80074e8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80074e0:	68bb      	ldr	r3, [r7, #8]
 80074e2:	695a      	ldr	r2, [r3, #20]
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	691b      	ldr	r3, [r3, #16]
 80074ec:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80074f0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80074f2:	04d9      	lsls	r1, r3, #19
 80074f4:	4b63      	ldr	r3, [pc, #396]	; (8007684 <USB_HC_StartXfer+0x280>)
 80074f6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80074f8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80074fa:	68bb      	ldr	r3, [r7, #8]
 80074fc:	7a9b      	ldrb	r3, [r3, #10]
 80074fe:	075b      	lsls	r3, r3, #29
 8007500:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007504:	69f9      	ldr	r1, [r7, #28]
 8007506:	0148      	lsls	r0, r1, #5
 8007508:	6a39      	ldr	r1, [r7, #32]
 800750a:	4401      	add	r1, r0
 800750c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007510:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007512:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007514:	79fb      	ldrb	r3, [r7, #7]
 8007516:	2b00      	cmp	r3, #0
 8007518:	d009      	beq.n	800752e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800751a:	68bb      	ldr	r3, [r7, #8]
 800751c:	68d9      	ldr	r1, [r3, #12]
 800751e:	69fb      	ldr	r3, [r7, #28]
 8007520:	015a      	lsls	r2, r3, #5
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	4413      	add	r3, r2
 8007526:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800752a:	460a      	mov	r2, r1
 800752c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f003 0301 	and.w	r3, r3, #1
 800753a:	2b00      	cmp	r3, #0
 800753c:	bf0c      	ite	eq
 800753e:	2301      	moveq	r3, #1
 8007540:	2300      	movne	r3, #0
 8007542:	b2db      	uxtb	r3, r3
 8007544:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007546:	69fb      	ldr	r3, [r7, #28]
 8007548:	015a      	lsls	r2, r3, #5
 800754a:	6a3b      	ldr	r3, [r7, #32]
 800754c:	4413      	add	r3, r2
 800754e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	69fa      	ldr	r2, [r7, #28]
 8007556:	0151      	lsls	r1, r2, #5
 8007558:	6a3a      	ldr	r2, [r7, #32]
 800755a:	440a      	add	r2, r1
 800755c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007560:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007564:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007566:	69fb      	ldr	r3, [r7, #28]
 8007568:	015a      	lsls	r2, r3, #5
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	4413      	add	r3, r2
 800756e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007572:	681a      	ldr	r2, [r3, #0]
 8007574:	7e7b      	ldrb	r3, [r7, #25]
 8007576:	075b      	lsls	r3, r3, #29
 8007578:	69f9      	ldr	r1, [r7, #28]
 800757a:	0148      	lsls	r0, r1, #5
 800757c:	6a39      	ldr	r1, [r7, #32]
 800757e:	4401      	add	r1, r0
 8007580:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8007584:	4313      	orrs	r3, r2
 8007586:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007588:	69fb      	ldr	r3, [r7, #28]
 800758a:	015a      	lsls	r2, r3, #5
 800758c:	6a3b      	ldr	r3, [r7, #32]
 800758e:	4413      	add	r3, r2
 8007590:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007598:	693b      	ldr	r3, [r7, #16]
 800759a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800759e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	78db      	ldrb	r3, [r3, #3]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d004      	beq.n	80075b2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075ae:	613b      	str	r3, [r7, #16]
 80075b0:	e003      	b.n	80075ba <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80075b2:	693b      	ldr	r3, [r7, #16]
 80075b4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80075b8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80075ba:	693b      	ldr	r3, [r7, #16]
 80075bc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80075c0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80075c2:	69fb      	ldr	r3, [r7, #28]
 80075c4:	015a      	lsls	r2, r3, #5
 80075c6:	6a3b      	ldr	r3, [r7, #32]
 80075c8:	4413      	add	r3, r2
 80075ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80075ce:	461a      	mov	r2, r3
 80075d0:	693b      	ldr	r3, [r7, #16]
 80075d2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 80075d4:	79fb      	ldrb	r3, [r7, #7]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d001      	beq.n	80075de <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 80075da:	2300      	movs	r3, #0
 80075dc:	e04e      	b.n	800767c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	78db      	ldrb	r3, [r3, #3]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d149      	bne.n	800767a <USB_HC_StartXfer+0x276>
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	695b      	ldr	r3, [r3, #20]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d045      	beq.n	800767a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	79db      	ldrb	r3, [r3, #7]
 80075f2:	2b03      	cmp	r3, #3
 80075f4:	d830      	bhi.n	8007658 <USB_HC_StartXfer+0x254>
 80075f6:	a201      	add	r2, pc, #4	; (adr r2, 80075fc <USB_HC_StartXfer+0x1f8>)
 80075f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075fc:	0800760d 	.word	0x0800760d
 8007600:	08007631 	.word	0x08007631
 8007604:	0800760d 	.word	0x0800760d
 8007608:	08007631 	.word	0x08007631
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800760c:	68bb      	ldr	r3, [r7, #8]
 800760e:	695b      	ldr	r3, [r3, #20]
 8007610:	3303      	adds	r3, #3
 8007612:	089b      	lsrs	r3, r3, #2
 8007614:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007616:	8afa      	ldrh	r2, [r7, #22]
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800761c:	b29b      	uxth	r3, r3
 800761e:	429a      	cmp	r2, r3
 8007620:	d91c      	bls.n	800765c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	699b      	ldr	r3, [r3, #24]
 8007626:	f043 0220 	orr.w	r2, r3, #32
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	619a      	str	r2, [r3, #24]
        }
        break;
 800762e:	e015      	b.n	800765c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	695b      	ldr	r3, [r3, #20]
 8007634:	3303      	adds	r3, #3
 8007636:	089b      	lsrs	r3, r3, #2
 8007638:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800763a:	8afa      	ldrh	r2, [r7, #22]
 800763c:	6a3b      	ldr	r3, [r7, #32]
 800763e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007642:	691b      	ldr	r3, [r3, #16]
 8007644:	b29b      	uxth	r3, r3
 8007646:	429a      	cmp	r2, r3
 8007648:	d90a      	bls.n	8007660 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	699b      	ldr	r3, [r3, #24]
 800764e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	619a      	str	r2, [r3, #24]
        }
        break;
 8007656:	e003      	b.n	8007660 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8007658:	bf00      	nop
 800765a:	e002      	b.n	8007662 <USB_HC_StartXfer+0x25e>
        break;
 800765c:	bf00      	nop
 800765e:	e000      	b.n	8007662 <USB_HC_StartXfer+0x25e>
        break;
 8007660:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	68d9      	ldr	r1, [r3, #12]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	785a      	ldrb	r2, [r3, #1]
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	b29b      	uxth	r3, r3
 8007670:	2000      	movs	r0, #0
 8007672:	9000      	str	r0, [sp, #0]
 8007674:	68f8      	ldr	r0, [r7, #12]
 8007676:	f7ff fb31 	bl	8006cdc <USB_WritePacket>
  }

  return HAL_OK;
 800767a:	2300      	movs	r3, #0
}
 800767c:	4618      	mov	r0, r3
 800767e:	3728      	adds	r7, #40	; 0x28
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	1ff80000 	.word	0x1ff80000

08007688 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8007688:	b480      	push	{r7}
 800768a:	b085      	sub	sp, #20
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800769a:	695b      	ldr	r3, [r3, #20]
 800769c:	b29b      	uxth	r3, r3
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3714      	adds	r7, #20
 80076a2:	46bd      	mov	sp, r7
 80076a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a8:	4770      	bx	lr

080076aa <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80076aa:	b480      	push	{r7}
 80076ac:	b089      	sub	sp, #36	; 0x24
 80076ae:	af00      	add	r7, sp, #0
 80076b0:	6078      	str	r0, [r7, #4]
 80076b2:	460b      	mov	r3, r1
 80076b4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80076ba:	78fb      	ldrb	r3, [r7, #3]
 80076bc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80076be:	2300      	movs	r3, #0
 80076c0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80076c2:	69bb      	ldr	r3, [r7, #24]
 80076c4:	015a      	lsls	r2, r3, #5
 80076c6:	69fb      	ldr	r3, [r7, #28]
 80076c8:	4413      	add	r3, r2
 80076ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	0c9b      	lsrs	r3, r3, #18
 80076d2:	f003 0303 	and.w	r3, r3, #3
 80076d6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80076d8:	69bb      	ldr	r3, [r7, #24]
 80076da:	015a      	lsls	r2, r3, #5
 80076dc:	69fb      	ldr	r3, [r7, #28]
 80076de:	4413      	add	r3, r2
 80076e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	0fdb      	lsrs	r3, r3, #31
 80076e8:	f003 0301 	and.w	r3, r3, #1
 80076ec:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	f003 0320 	and.w	r3, r3, #32
 80076f6:	2b20      	cmp	r3, #32
 80076f8:	d104      	bne.n	8007704 <USB_HC_Halt+0x5a>
 80076fa:	693b      	ldr	r3, [r7, #16]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d101      	bne.n	8007704 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	e0c8      	b.n	8007896 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d002      	beq.n	8007710 <USB_HC_Halt+0x66>
 800770a:	697b      	ldr	r3, [r7, #20]
 800770c:	2b02      	cmp	r3, #2
 800770e:	d163      	bne.n	80077d8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007710:	69bb      	ldr	r3, [r7, #24]
 8007712:	015a      	lsls	r2, r3, #5
 8007714:	69fb      	ldr	r3, [r7, #28]
 8007716:	4413      	add	r3, r2
 8007718:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	69ba      	ldr	r2, [r7, #24]
 8007720:	0151      	lsls	r1, r2, #5
 8007722:	69fa      	ldr	r2, [r7, #28]
 8007724:	440a      	add	r2, r1
 8007726:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800772a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800772e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	689b      	ldr	r3, [r3, #8]
 8007734:	f003 0320 	and.w	r3, r3, #32
 8007738:	2b00      	cmp	r3, #0
 800773a:	f040 80ab 	bne.w	8007894 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007742:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d133      	bne.n	80077b2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800774a:	69bb      	ldr	r3, [r7, #24]
 800774c:	015a      	lsls	r2, r3, #5
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	4413      	add	r3, r2
 8007752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	69ba      	ldr	r2, [r7, #24]
 800775a:	0151      	lsls	r1, r2, #5
 800775c:	69fa      	ldr	r2, [r7, #28]
 800775e:	440a      	add	r2, r1
 8007760:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007764:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007768:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800776a:	69bb      	ldr	r3, [r7, #24]
 800776c:	015a      	lsls	r2, r3, #5
 800776e:	69fb      	ldr	r3, [r7, #28]
 8007770:	4413      	add	r3, r2
 8007772:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	69ba      	ldr	r2, [r7, #24]
 800777a:	0151      	lsls	r1, r2, #5
 800777c:	69fa      	ldr	r2, [r7, #28]
 800777e:	440a      	add	r2, r1
 8007780:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007784:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007788:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	3301      	adds	r3, #1
 800778e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8007790:	68fb      	ldr	r3, [r7, #12]
 8007792:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007796:	d81d      	bhi.n	80077d4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007798:	69bb      	ldr	r3, [r7, #24]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077ae:	d0ec      	beq.n	800778a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80077b0:	e070      	b.n	8007894 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80077b2:	69bb      	ldr	r3, [r7, #24]
 80077b4:	015a      	lsls	r2, r3, #5
 80077b6:	69fb      	ldr	r3, [r7, #28]
 80077b8:	4413      	add	r3, r2
 80077ba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	69ba      	ldr	r2, [r7, #24]
 80077c2:	0151      	lsls	r1, r2, #5
 80077c4:	69fa      	ldr	r2, [r7, #28]
 80077c6:	440a      	add	r2, r1
 80077c8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80077d0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80077d2:	e05f      	b.n	8007894 <USB_HC_Halt+0x1ea>
            break;
 80077d4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80077d6:	e05d      	b.n	8007894 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80077d8:	69bb      	ldr	r3, [r7, #24]
 80077da:	015a      	lsls	r2, r3, #5
 80077dc:	69fb      	ldr	r3, [r7, #28]
 80077de:	4413      	add	r3, r2
 80077e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	69ba      	ldr	r2, [r7, #24]
 80077e8:	0151      	lsls	r1, r2, #5
 80077ea:	69fa      	ldr	r2, [r7, #28]
 80077ec:	440a      	add	r2, r1
 80077ee:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80077f2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80077f6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80077f8:	69fb      	ldr	r3, [r7, #28]
 80077fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80077fe:	691b      	ldr	r3, [r3, #16]
 8007800:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007804:	2b00      	cmp	r3, #0
 8007806:	d133      	bne.n	8007870 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007808:	69bb      	ldr	r3, [r7, #24]
 800780a:	015a      	lsls	r2, r3, #5
 800780c:	69fb      	ldr	r3, [r7, #28]
 800780e:	4413      	add	r3, r2
 8007810:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	69ba      	ldr	r2, [r7, #24]
 8007818:	0151      	lsls	r1, r2, #5
 800781a:	69fa      	ldr	r2, [r7, #28]
 800781c:	440a      	add	r2, r1
 800781e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007822:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007826:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007828:	69bb      	ldr	r3, [r7, #24]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	69fb      	ldr	r3, [r7, #28]
 800782e:	4413      	add	r3, r2
 8007830:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	69ba      	ldr	r2, [r7, #24]
 8007838:	0151      	lsls	r1, r2, #5
 800783a:	69fa      	ldr	r2, [r7, #28]
 800783c:	440a      	add	r2, r1
 800783e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007842:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007846:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	3301      	adds	r3, #1
 800784c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007854:	d81d      	bhi.n	8007892 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007856:	69bb      	ldr	r3, [r7, #24]
 8007858:	015a      	lsls	r2, r3, #5
 800785a:	69fb      	ldr	r3, [r7, #28]
 800785c:	4413      	add	r3, r2
 800785e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007868:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800786c:	d0ec      	beq.n	8007848 <USB_HC_Halt+0x19e>
 800786e:	e011      	b.n	8007894 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007870:	69bb      	ldr	r3, [r7, #24]
 8007872:	015a      	lsls	r2, r3, #5
 8007874:	69fb      	ldr	r3, [r7, #28]
 8007876:	4413      	add	r3, r2
 8007878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	69ba      	ldr	r2, [r7, #24]
 8007880:	0151      	lsls	r1, r2, #5
 8007882:	69fa      	ldr	r2, [r7, #28]
 8007884:	440a      	add	r2, r1
 8007886:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800788a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800788e:	6013      	str	r3, [r2, #0]
 8007890:	e000      	b.n	8007894 <USB_HC_Halt+0x1ea>
          break;
 8007892:	bf00      	nop
    }
  }

  return HAL_OK;
 8007894:	2300      	movs	r3, #0
}
 8007896:	4618      	mov	r0, r3
 8007898:	3724      	adds	r7, #36	; 0x24
 800789a:	46bd      	mov	sp, r7
 800789c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a0:	4770      	bx	lr
	...

080078a4 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b087      	sub	sp, #28
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
 80078ac:	460b      	mov	r3, r1
 80078ae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 80078b4:	78fb      	ldrb	r3, [r7, #3]
 80078b6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 80078b8:	2301      	movs	r3, #1
 80078ba:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	04da      	lsls	r2, r3, #19
 80078c0:	4b15      	ldr	r3, [pc, #84]	; (8007918 <USB_DoPing+0x74>)
 80078c2:	4013      	ands	r3, r2
 80078c4:	693a      	ldr	r2, [r7, #16]
 80078c6:	0151      	lsls	r1, r2, #5
 80078c8:	697a      	ldr	r2, [r7, #20]
 80078ca:	440a      	add	r2, r1
 80078cc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80078d0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078d4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	015a      	lsls	r2, r3, #5
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	4413      	add	r3, r2
 80078de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80078ec:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80078f4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80078f6:	693b      	ldr	r3, [r7, #16]
 80078f8:	015a      	lsls	r2, r3, #5
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	4413      	add	r3, r2
 80078fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007902:	461a      	mov	r2, r3
 8007904:	68bb      	ldr	r3, [r7, #8]
 8007906:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007908:	2300      	movs	r3, #0
}
 800790a:	4618      	mov	r0, r3
 800790c:	371c      	adds	r7, #28
 800790e:	46bd      	mov	sp, r7
 8007910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007914:	4770      	bx	lr
 8007916:	bf00      	nop
 8007918:	1ff80000 	.word	0x1ff80000

0800791c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b088      	sub	sp, #32
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007924:	2300      	movs	r3, #0
 8007926:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800792c:	2300      	movs	r3, #0
 800792e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f7ff f911 	bl	8006b58 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007936:	2110      	movs	r1, #16
 8007938:	6878      	ldr	r0, [r7, #4]
 800793a:	f7ff f96b 	bl	8006c14 <USB_FlushTxFifo>
 800793e:	4603      	mov	r3, r0
 8007940:	2b00      	cmp	r3, #0
 8007942:	d001      	beq.n	8007948 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007944:	2301      	movs	r3, #1
 8007946:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f7ff f997 	bl	8006c7c <USB_FlushRxFifo>
 800794e:	4603      	mov	r3, r0
 8007950:	2b00      	cmp	r3, #0
 8007952:	d001      	beq.n	8007958 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007958:	2300      	movs	r3, #0
 800795a:	61bb      	str	r3, [r7, #24]
 800795c:	e01f      	b.n	800799e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800795e:	69bb      	ldr	r3, [r7, #24]
 8007960:	015a      	lsls	r2, r3, #5
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	4413      	add	r3, r2
 8007966:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800796e:	693b      	ldr	r3, [r7, #16]
 8007970:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007974:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800797c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800797e:	693b      	ldr	r3, [r7, #16]
 8007980:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007984:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007986:	69bb      	ldr	r3, [r7, #24]
 8007988:	015a      	lsls	r2, r3, #5
 800798a:	697b      	ldr	r3, [r7, #20]
 800798c:	4413      	add	r3, r2
 800798e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007992:	461a      	mov	r2, r3
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	3301      	adds	r3, #1
 800799c:	61bb      	str	r3, [r7, #24]
 800799e:	69bb      	ldr	r3, [r7, #24]
 80079a0:	2b0f      	cmp	r3, #15
 80079a2:	d9dc      	bls.n	800795e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 80079a4:	2300      	movs	r3, #0
 80079a6:	61bb      	str	r3, [r7, #24]
 80079a8:	e034      	b.n	8007a14 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	015a      	lsls	r2, r3, #5
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	4413      	add	r3, r2
 80079b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 80079ba:	693b      	ldr	r3, [r7, #16]
 80079bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80079c0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 80079c2:	693b      	ldr	r3, [r7, #16]
 80079c4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80079c8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80079ca:	693b      	ldr	r3, [r7, #16]
 80079cc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80079d0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80079d2:	69bb      	ldr	r3, [r7, #24]
 80079d4:	015a      	lsls	r2, r3, #5
 80079d6:	697b      	ldr	r3, [r7, #20]
 80079d8:	4413      	add	r3, r2
 80079da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079de:	461a      	mov	r2, r3
 80079e0:	693b      	ldr	r3, [r7, #16]
 80079e2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	3301      	adds	r3, #1
 80079e8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079f0:	d80c      	bhi.n	8007a0c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80079f2:	69bb      	ldr	r3, [r7, #24]
 80079f4:	015a      	lsls	r2, r3, #5
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	4413      	add	r3, r2
 80079fa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007a04:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007a08:	d0ec      	beq.n	80079e4 <USB_StopHost+0xc8>
 8007a0a:	e000      	b.n	8007a0e <USB_StopHost+0xf2>
        break;
 8007a0c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	3301      	adds	r3, #1
 8007a12:	61bb      	str	r3, [r7, #24]
 8007a14:	69bb      	ldr	r3, [r7, #24]
 8007a16:	2b0f      	cmp	r3, #15
 8007a18:	d9c7      	bls.n	80079aa <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8007a1a:	697b      	ldr	r3, [r7, #20]
 8007a1c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007a20:	461a      	mov	r2, r3
 8007a22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8007a26:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a2e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7ff f880 	bl	8006b36 <USB_EnableGlobalInt>

  return ret;
 8007a36:	7ffb      	ldrb	r3, [r7, #31]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3720      	adds	r7, #32
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	bd80      	pop	{r7, pc}

08007a40 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USBH driver ###########################*/
  retUSBH = FATFS_LinkDriver(&USBH_Driver, USBHPath);
 8007a44:	4904      	ldr	r1, [pc, #16]	; (8007a58 <MX_FATFS_Init+0x18>)
 8007a46:	4805      	ldr	r0, [pc, #20]	; (8007a5c <MX_FATFS_Init+0x1c>)
 8007a48:	f005 fc98 	bl	800d37c <FATFS_LinkDriver>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	461a      	mov	r2, r3
 8007a50:	4b03      	ldr	r3, [pc, #12]	; (8007a60 <MX_FATFS_Init+0x20>)
 8007a52:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8007a54:	bf00      	nop
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	2000143c 	.word	0x2000143c
 8007a5c:	0800dd7c 	.word	0x0800dd7c
 8007a60:	20001438 	.word	0x20001438

08007a64 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8007a64:	b480      	push	{r7}
 8007a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8007a68:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	46bd      	mov	sp, r7
 8007a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a72:	4770      	bx	lr

08007a74 <USBH_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_initialize(BYTE lun)
{
 8007a74:	b480      	push	{r7}
 8007a76:	b083      	sub	sp, #12
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	71fb      	strb	r3, [r7, #7]
  /* CAUTION : USB Host library has to be initialized in the application */

  return RES_OK;
 8007a7e:	2300      	movs	r3, #0
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <USBH_status>:
  * @brief  Gets Disk Status
  * @param  lun : lun id
  * @retval DSTATUS: Operation status
  */
DSTATUS USBH_status(BYTE lun)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b084      	sub	sp, #16
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	4603      	mov	r3, r0
 8007a94:	71fb      	strb	r3, [r7, #7]
  DRESULT res = RES_ERROR;
 8007a96:	2301      	movs	r3, #1
 8007a98:	73fb      	strb	r3, [r7, #15]

  if(USBH_MSC_UnitIsReady(&hUSB_Host, lun))
 8007a9a:	79fb      	ldrb	r3, [r7, #7]
 8007a9c:	4619      	mov	r1, r3
 8007a9e:	4808      	ldr	r0, [pc, #32]	; (8007ac0 <USBH_status+0x34>)
 8007aa0:	f000 fe32 	bl	8008708 <USBH_MSC_UnitIsReady>
 8007aa4:	4603      	mov	r3, r0
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d002      	beq.n	8007ab0 <USBH_status+0x24>
  {
    res = RES_OK;
 8007aaa:	2300      	movs	r3, #0
 8007aac:	73fb      	strb	r3, [r7, #15]
 8007aae:	e001      	b.n	8007ab4 <USBH_status+0x28>
  }
  else
  {
    res = RES_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8007ab4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3710      	adds	r7, #16
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	200016a4 	.word	0x200016a4

08007ac4 <USBH_read>:
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USBH_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b094      	sub	sp, #80	; 0x50
 8007ac8:	af02      	add	r7, sp, #8
 8007aca:	60b9      	str	r1, [r7, #8]
 8007acc:	607a      	str	r2, [r7, #4]
 8007ace:	603b      	str	r3, [r7, #0]
 8007ad0:	4603      	mov	r3, r0
 8007ad2:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Read(&hUSB_Host, lun, sector, buff, count) == USBH_OK)
 8007ada:	7bf9      	ldrb	r1, [r7, #15]
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	9300      	str	r3, [sp, #0]
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	687a      	ldr	r2, [r7, #4]
 8007ae4:	4813      	ldr	r0, [pc, #76]	; (8007b34 <USBH_read+0x70>)
 8007ae6:	f000 fe59 	bl	800879c <USBH_MSC_Read>
 8007aea:	4603      	mov	r3, r0
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d103      	bne.n	8007af8 <USBH_read+0x34>
  {
    res = RES_OK;
 8007af0:	2300      	movs	r3, #0
 8007af2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007af6:	e017      	b.n	8007b28 <USBH_read+0x64>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007af8:	f107 0210 	add.w	r2, r7, #16
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
 8007afe:	4619      	mov	r1, r3
 8007b00:	480c      	ldr	r0, [pc, #48]	; (8007b34 <USBH_read+0x70>)
 8007b02:	f000 fe27 	bl	8008754 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007b06:	7f7b      	ldrb	r3, [r7, #29]
 8007b08:	2b3a      	cmp	r3, #58	; 0x3a
 8007b0a:	d005      	beq.n	8007b18 <USBH_read+0x54>
 8007b0c:	2b3a      	cmp	r3, #58	; 0x3a
 8007b0e:	dc07      	bgt.n	8007b20 <USBH_read+0x5c>
 8007b10:	2b04      	cmp	r3, #4
 8007b12:	d001      	beq.n	8007b18 <USBH_read+0x54>
 8007b14:	2b28      	cmp	r3, #40	; 0x28
 8007b16:	d103      	bne.n	8007b20 <USBH_read+0x5c>
    {
    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog ("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007b18:	2303      	movs	r3, #3
 8007b1a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007b1e:	e003      	b.n	8007b28 <USBH_read+0x64>

    default:
      res = RES_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007b26:	bf00      	nop
    }
  }

  return res;
 8007b28:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007b2c:	4618      	mov	r0, r3
 8007b2e:	3748      	adds	r7, #72	; 0x48
 8007b30:	46bd      	mov	sp, r7
 8007b32:	bd80      	pop	{r7, pc}
 8007b34:	200016a4 	.word	0x200016a4

08007b38 <USBH_write>:
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USBH_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	b094      	sub	sp, #80	; 0x50
 8007b3c:	af02      	add	r7, sp, #8
 8007b3e:	60b9      	str	r1, [r7, #8]
 8007b40:	607a      	str	r2, [r7, #4]
 8007b42:	603b      	str	r3, [r7, #0]
 8007b44:	4603      	mov	r3, r0
 8007b46:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8007b48:	2301      	movs	r3, #1
 8007b4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  MSC_LUNTypeDef info;

  if(USBH_MSC_Write(&hUSB_Host, lun, sector, (BYTE *)buff, count) == USBH_OK)
 8007b4e:	7bf9      	ldrb	r1, [r7, #15]
 8007b50:	683b      	ldr	r3, [r7, #0]
 8007b52:	9300      	str	r3, [sp, #0]
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	687a      	ldr	r2, [r7, #4]
 8007b58:	4817      	ldr	r0, [pc, #92]	; (8007bb8 <USBH_write+0x80>)
 8007b5a:	f000 fe88 	bl	800886e <USBH_MSC_Write>
 8007b5e:	4603      	mov	r3, r0
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d103      	bne.n	8007b6c <USBH_write+0x34>
  {
    res = RES_OK;
 8007b64:	2300      	movs	r3, #0
 8007b66:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 8007b6a:	e01f      	b.n	8007bac <USBH_write+0x74>
  }
  else
  {
    USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info);
 8007b6c:	f107 0210 	add.w	r2, r7, #16
 8007b70:	7bfb      	ldrb	r3, [r7, #15]
 8007b72:	4619      	mov	r1, r3
 8007b74:	4810      	ldr	r0, [pc, #64]	; (8007bb8 <USBH_write+0x80>)
 8007b76:	f000 fded 	bl	8008754 <USBH_MSC_GetLUNInfo>

    switch (info.sense.asc)
 8007b7a:	7f7b      	ldrb	r3, [r7, #29]
 8007b7c:	2b3a      	cmp	r3, #58	; 0x3a
 8007b7e:	d00d      	beq.n	8007b9c <USBH_write+0x64>
 8007b80:	2b3a      	cmp	r3, #58	; 0x3a
 8007b82:	dc0f      	bgt.n	8007ba4 <USBH_write+0x6c>
 8007b84:	2b28      	cmp	r3, #40	; 0x28
 8007b86:	d009      	beq.n	8007b9c <USBH_write+0x64>
 8007b88:	2b28      	cmp	r3, #40	; 0x28
 8007b8a:	dc0b      	bgt.n	8007ba4 <USBH_write+0x6c>
 8007b8c:	2b04      	cmp	r3, #4
 8007b8e:	d005      	beq.n	8007b9c <USBH_write+0x64>
 8007b90:	2b27      	cmp	r3, #39	; 0x27
 8007b92:	d107      	bne.n	8007ba4 <USBH_write+0x6c>
    {
    case SCSI_ASC_WRITE_PROTECTED:
      USBH_ErrLog("USB Disk is Write protected!");
      res = RES_WRPRT;
 8007b94:	2302      	movs	r3, #2
 8007b96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007b9a:	e007      	b.n	8007bac <USBH_write+0x74>

    case SCSI_ASC_LOGICAL_UNIT_NOT_READY:
    case SCSI_ASC_MEDIUM_NOT_PRESENT:
    case SCSI_ASC_NOT_READY_TO_READY_CHANGE:
      USBH_ErrLog("USB Disk is not ready!");
      res = RES_NOTRDY;
 8007b9c:	2303      	movs	r3, #3
 8007b9e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007ba2:	e003      	b.n	8007bac <USBH_write+0x74>

    default:
      res = RES_ERROR;
 8007ba4:	2301      	movs	r3, #1
 8007ba6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      break;
 8007baa:	bf00      	nop
    }
  }

  return res;
 8007bac:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3748      	adds	r7, #72	; 0x48
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	200016a4 	.word	0x200016a4

08007bbc <USBH_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USBH_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	b090      	sub	sp, #64	; 0x40
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	603a      	str	r2, [r7, #0]
 8007bc6:	71fb      	strb	r3, [r7, #7]
 8007bc8:	460b      	mov	r3, r1
 8007bca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007bcc:	2301      	movs	r3, #1
 8007bce:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  MSC_LUNTypeDef info;

  switch (cmd)
 8007bd2:	79bb      	ldrb	r3, [r7, #6]
 8007bd4:	2b03      	cmp	r3, #3
 8007bd6:	d852      	bhi.n	8007c7e <USBH_ioctl+0xc2>
 8007bd8:	a201      	add	r2, pc, #4	; (adr r2, 8007be0 <USBH_ioctl+0x24>)
 8007bda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bde:	bf00      	nop
 8007be0:	08007bf1 	.word	0x08007bf1
 8007be4:	08007bf9 	.word	0x08007bf9
 8007be8:	08007c23 	.word	0x08007c23
 8007bec:	08007c4f 	.word	0x08007c4f
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC:
    res = RES_OK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007bf6:	e045      	b.n	8007c84 <USBH_ioctl+0xc8>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007bf8:	f107 0208 	add.w	r2, r7, #8
 8007bfc:	79fb      	ldrb	r3, [r7, #7]
 8007bfe:	4619      	mov	r1, r3
 8007c00:	4823      	ldr	r0, [pc, #140]	; (8007c90 <USBH_ioctl+0xd4>)
 8007c02:	f000 fda7 	bl	8008754 <USBH_MSC_GetLUNInfo>
 8007c06:	4603      	mov	r3, r0
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d106      	bne.n	8007c1a <USBH_ioctl+0x5e>
    {
      *(DWORD*)buff = info.capacity.block_nbr;
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	683b      	ldr	r3, [r7, #0]
 8007c10:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007c18:	e034      	b.n	8007c84 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007c1a:	2301      	movs	r3, #1
 8007c1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007c20:	e030      	b.n	8007c84 <USBH_ioctl+0xc8>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007c22:	f107 0208 	add.w	r2, r7, #8
 8007c26:	79fb      	ldrb	r3, [r7, #7]
 8007c28:	4619      	mov	r1, r3
 8007c2a:	4819      	ldr	r0, [pc, #100]	; (8007c90 <USBH_ioctl+0xd4>)
 8007c2c:	f000 fd92 	bl	8008754 <USBH_MSC_GetLUNInfo>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d107      	bne.n	8007c46 <USBH_ioctl+0x8a>
    {
      *(DWORD*)buff = info.capacity.block_size;
 8007c36:	8a3b      	ldrh	r3, [r7, #16]
 8007c38:	461a      	mov	r2, r3
 8007c3a:	683b      	ldr	r3, [r7, #0]
 8007c3c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007c44:	e01e      	b.n	8007c84 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007c4c:	e01a      	b.n	8007c84 <USBH_ioctl+0xc8>

    /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :

    if(USBH_MSC_GetLUNInfo(&hUSB_Host, lun, &info) == USBH_OK)
 8007c4e:	f107 0208 	add.w	r2, r7, #8
 8007c52:	79fb      	ldrb	r3, [r7, #7]
 8007c54:	4619      	mov	r1, r3
 8007c56:	480e      	ldr	r0, [pc, #56]	; (8007c90 <USBH_ioctl+0xd4>)
 8007c58:	f000 fd7c 	bl	8008754 <USBH_MSC_GetLUNInfo>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d109      	bne.n	8007c76 <USBH_ioctl+0xba>
    {
      *(DWORD*)buff = info.capacity.block_size / USB_DEFAULT_BLOCK_SIZE;
 8007c62:	8a3b      	ldrh	r3, [r7, #16]
 8007c64:	0a5b      	lsrs	r3, r3, #9
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	461a      	mov	r2, r3
 8007c6a:	683b      	ldr	r3, [r7, #0]
 8007c6c:	601a      	str	r2, [r3, #0]
      res = RES_OK;
 8007c6e:	2300      	movs	r3, #0
 8007c70:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    }
    else
    {
      res = RES_ERROR;
    }
    break;
 8007c74:	e006      	b.n	8007c84 <USBH_ioctl+0xc8>
      res = RES_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    break;
 8007c7c:	e002      	b.n	8007c84 <USBH_ioctl+0xc8>

  default:
    res = RES_PARERR;
 8007c7e:	2304      	movs	r3, #4
 8007c80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return res;
 8007c84:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3740      	adds	r7, #64	; 0x40
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	bd80      	pop	{r7, pc}
 8007c90:	200016a4 	.word	0x200016a4

08007c94 <USBH_MSC_InterfaceInit>:
  *         The function init the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007c94:	b590      	push	{r4, r7, lr}
 8007c96:	b089      	sub	sp, #36	; 0x24
 8007c98:	af04      	add	r7, sp, #16
 8007c9a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  uint8_t interface;
  MSC_HandleTypeDef *MSC_Handle;

  interface = USBH_FindInterface(phost, phost->pActiveClass->ClassCode, MSC_TRANSPARENT, MSC_BOT);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ca2:	7919      	ldrb	r1, [r3, #4]
 8007ca4:	2350      	movs	r3, #80	; 0x50
 8007ca6:	2206      	movs	r2, #6
 8007ca8:	6878      	ldr	r0, [r7, #4]
 8007caa:	f001 fc6b 	bl	8009584 <USBH_FindInterface>
 8007cae:	4603      	mov	r3, r0
 8007cb0:	73fb      	strb	r3, [r7, #15]

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* Not Valid Interface */
 8007cb2:	7bfb      	ldrb	r3, [r7, #15]
 8007cb4:	2bff      	cmp	r3, #255	; 0xff
 8007cb6:	d002      	beq.n	8007cbe <USBH_MSC_InterfaceInit+0x2a>
 8007cb8:	7bfb      	ldrb	r3, [r7, #15]
 8007cba:	2b01      	cmp	r3, #1
 8007cbc:	d901      	bls.n	8007cc2 <USBH_MSC_InterfaceInit+0x2e>
  {
    USBH_DbgLog("Cannot Find the interface for %s class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007cbe:	2302      	movs	r3, #2
 8007cc0:	e106      	b.n	8007ed0 <USBH_MSC_InterfaceInit+0x23c>
  }

  status = USBH_SelectInterface(phost, interface);
 8007cc2:	7bfb      	ldrb	r3, [r7, #15]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f001 fc40 	bl	800954c <USBH_SelectInterface>
 8007ccc:	4603      	mov	r3, r0
 8007cce:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007cd0:	7bbb      	ldrb	r3, [r7, #14]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d001      	beq.n	8007cda <USBH_MSC_InterfaceInit+0x46>
  {
    return USBH_FAIL;
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	e0fa      	b.n	8007ed0 <USBH_MSC_InterfaceInit+0x23c>
  }

  phost->pActiveClass->pData = (MSC_HandleTypeDef *)USBH_malloc(sizeof(MSC_HandleTypeDef));
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8007ce0:	f44f 7080 	mov.w	r0, #256	; 0x100
 8007ce4:	f005 fe6c 	bl	800d9c0 <malloc>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	61e3      	str	r3, [r4, #28]
  MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007cf2:	69db      	ldr	r3, [r3, #28]
 8007cf4:	60bb      	str	r3, [r7, #8]

  if (MSC_Handle == NULL)
 8007cf6:	68bb      	ldr	r3, [r7, #8]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d101      	bne.n	8007d00 <USBH_MSC_InterfaceInit+0x6c>
  {
    USBH_DbgLog("Cannot allocate memory for MSC Handle");
    return USBH_FAIL;
 8007cfc:	2302      	movs	r3, #2
 8007cfe:	e0e7      	b.n	8007ed0 <USBH_MSC_InterfaceInit+0x23c>
  }

  /* Initialize msc handler */
  (void)USBH_memset(MSC_Handle, 0, sizeof(MSC_HandleTypeDef));
 8007d00:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007d04:	2100      	movs	r1, #0
 8007d06:	68b8      	ldr	r0, [r7, #8]
 8007d08:	f005 ff16 	bl	800db38 <memset>

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007d0c:	7bfb      	ldrb	r3, [r7, #15]
 8007d0e:	687a      	ldr	r2, [r7, #4]
 8007d10:	211a      	movs	r1, #26
 8007d12:	fb01 f303 	mul.w	r3, r1, r3
 8007d16:	4413      	add	r3, r2
 8007d18:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d1c:	781b      	ldrb	r3, [r3, #0]
 8007d1e:	b25b      	sxtb	r3, r3
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	da16      	bge.n	8007d52 <USBH_MSC_InterfaceInit+0xbe>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007d24:	7bfb      	ldrb	r3, [r7, #15]
 8007d26:	687a      	ldr	r2, [r7, #4]
 8007d28:	211a      	movs	r1, #26
 8007d2a:	fb01 f303 	mul.w	r3, r1, r3
 8007d2e:	4413      	add	r3, r2
 8007d30:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d34:	781a      	ldrb	r2, [r3, #0]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007d3a:	7bfb      	ldrb	r3, [r7, #15]
 8007d3c:	687a      	ldr	r2, [r7, #4]
 8007d3e:	211a      	movs	r1, #26
 8007d40:	fb01 f303 	mul.w	r3, r1, r3
 8007d44:	4413      	add	r3, r2
 8007d46:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007d4a:	881a      	ldrh	r2, [r3, #0]
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	815a      	strh	r2, [r3, #10]
 8007d50:	e015      	b.n	8007d7e <USBH_MSC_InterfaceInit+0xea>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress);
 8007d52:	7bfb      	ldrb	r3, [r7, #15]
 8007d54:	687a      	ldr	r2, [r7, #4]
 8007d56:	211a      	movs	r1, #26
 8007d58:	fb01 f303 	mul.w	r3, r1, r3
 8007d5c:	4413      	add	r3, r2
 8007d5e:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007d62:	781a      	ldrb	r2, [r3, #0]
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007d68:	7bfb      	ldrb	r3, [r7, #15]
 8007d6a:	687a      	ldr	r2, [r7, #4]
 8007d6c:	211a      	movs	r1, #26
 8007d6e:	fb01 f303 	mul.w	r3, r1, r3
 8007d72:	4413      	add	r3, r2
 8007d74:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007d78:	881a      	ldrh	r2, [r3, #0]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	811a      	strh	r2, [r3, #8]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007d7e:	7bfb      	ldrb	r3, [r7, #15]
 8007d80:	687a      	ldr	r2, [r7, #4]
 8007d82:	211a      	movs	r1, #26
 8007d84:	fb01 f303 	mul.w	r3, r1, r3
 8007d88:	4413      	add	r3, r2
 8007d8a:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007d8e:	781b      	ldrb	r3, [r3, #0]
 8007d90:	b25b      	sxtb	r3, r3
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	da16      	bge.n	8007dc4 <USBH_MSC_InterfaceInit+0x130>
  {
    MSC_Handle->InEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007d96:	7bfb      	ldrb	r3, [r7, #15]
 8007d98:	687a      	ldr	r2, [r7, #4]
 8007d9a:	211a      	movs	r1, #26
 8007d9c:	fb01 f303 	mul.w	r3, r1, r3
 8007da0:	4413      	add	r3, r2
 8007da2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007da6:	781a      	ldrb	r2, [r3, #0]
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	71da      	strb	r2, [r3, #7]
    MSC_Handle->InEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007dac:	7bfb      	ldrb	r3, [r7, #15]
 8007dae:	687a      	ldr	r2, [r7, #4]
 8007db0:	211a      	movs	r1, #26
 8007db2:	fb01 f303 	mul.w	r3, r1, r3
 8007db6:	4413      	add	r3, r2
 8007db8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007dbc:	881a      	ldrh	r2, [r3, #0]
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	815a      	strh	r2, [r3, #10]
 8007dc2:	e015      	b.n	8007df0 <USBH_MSC_InterfaceInit+0x15c>
  }
  else
  {
    MSC_Handle->OutEp = (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress);
 8007dc4:	7bfb      	ldrb	r3, [r7, #15]
 8007dc6:	687a      	ldr	r2, [r7, #4]
 8007dc8:	211a      	movs	r1, #26
 8007dca:	fb01 f303 	mul.w	r3, r1, r3
 8007dce:	4413      	add	r3, r2
 8007dd0:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007dd4:	781a      	ldrb	r2, [r3, #0]
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	719a      	strb	r2, [r3, #6]
    MSC_Handle->OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007dda:	7bfb      	ldrb	r3, [r7, #15]
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	211a      	movs	r1, #26
 8007de0:	fb01 f303 	mul.w	r3, r1, r3
 8007de4:	4413      	add	r3, r2
 8007de6:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8007dea:	881a      	ldrh	r2, [r3, #0]
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	811a      	strh	r2, [r3, #8]
  }

  MSC_Handle->state = MSC_INIT;
 8007df0:	68bb      	ldr	r3, [r7, #8]
 8007df2:	2200      	movs	r2, #0
 8007df4:	731a      	strb	r2, [r3, #12]
  MSC_Handle->error = MSC_OK;
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	735a      	strb	r2, [r3, #13]
  MSC_Handle->req_state = MSC_REQ_IDLE;
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	739a      	strb	r2, [r3, #14]
  MSC_Handle->OutPipe = USBH_AllocPipe(phost, MSC_Handle->OutEp);
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	799b      	ldrb	r3, [r3, #6]
 8007e06:	4619      	mov	r1, r3
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f002 fed8 	bl	800abbe <USBH_AllocPipe>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	461a      	mov	r2, r3
 8007e12:	68bb      	ldr	r3, [r7, #8]
 8007e14:	715a      	strb	r2, [r3, #5]
  MSC_Handle->InPipe = USBH_AllocPipe(phost, MSC_Handle->InEp);
 8007e16:	68bb      	ldr	r3, [r7, #8]
 8007e18:	79db      	ldrb	r3, [r3, #7]
 8007e1a:	4619      	mov	r1, r3
 8007e1c:	6878      	ldr	r0, [r7, #4]
 8007e1e:	f002 fece 	bl	800abbe <USBH_AllocPipe>
 8007e22:	4603      	mov	r3, r0
 8007e24:	461a      	mov	r2, r3
 8007e26:	68bb      	ldr	r3, [r7, #8]
 8007e28:	711a      	strb	r2, [r3, #4]

  (void)USBH_MSC_BOT_Init(phost);
 8007e2a:	6878      	ldr	r0, [r7, #4]
 8007e2c:	f000 fdc4 	bl	80089b8 <USBH_MSC_BOT_Init>

  /* Open the new channels */
  if ((MSC_Handle->OutEp != 0U) && (MSC_Handle->OutEpSize != 0U))
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	799b      	ldrb	r3, [r3, #6]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d01e      	beq.n	8007e76 <USBH_MSC_InterfaceInit+0x1e2>
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	891b      	ldrh	r3, [r3, #8]
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d01a      	beq.n	8007e76 <USBH_MSC_InterfaceInit+0x1e2>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->OutPipe, MSC_Handle->OutEp,
 8007e40:	68bb      	ldr	r3, [r7, #8]
 8007e42:	7959      	ldrb	r1, [r3, #5]
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	7998      	ldrb	r0, [r3, #6]
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e54:	68ba      	ldr	r2, [r7, #8]
 8007e56:	8912      	ldrh	r2, [r2, #8]
 8007e58:	9202      	str	r2, [sp, #8]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	9201      	str	r2, [sp, #4]
 8007e5e:	9300      	str	r3, [sp, #0]
 8007e60:	4623      	mov	r3, r4
 8007e62:	4602      	mov	r2, r0
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f002 fe7b 	bl	800ab60 <USBH_OpenPipe>
 8007e6a:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8007e6c:	68bb      	ldr	r3, [r7, #8]
 8007e6e:	79db      	ldrb	r3, [r3, #7]
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d02c      	beq.n	8007ece <USBH_MSC_InterfaceInit+0x23a>
 8007e74:	e001      	b.n	8007e7a <USBH_MSC_InterfaceInit+0x1e6>
    return USBH_NOT_SUPPORTED;
 8007e76:	2303      	movs	r3, #3
 8007e78:	e02a      	b.n	8007ed0 <USBH_MSC_InterfaceInit+0x23c>
  if ((MSC_Handle->InEp != 0U) && (MSC_Handle->InEpSize != 0U))
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	895b      	ldrh	r3, [r3, #10]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d025      	beq.n	8007ece <USBH_MSC_InterfaceInit+0x23a>
  {
    (void)USBH_OpenPipe(phost, MSC_Handle->InPipe, MSC_Handle->InEp,
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	7919      	ldrb	r1, [r3, #4]
 8007e86:	68bb      	ldr	r3, [r7, #8]
 8007e88:	79d8      	ldrb	r0, [r3, #7]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e96:	68ba      	ldr	r2, [r7, #8]
 8007e98:	8952      	ldrh	r2, [r2, #10]
 8007e9a:	9202      	str	r2, [sp, #8]
 8007e9c:	2202      	movs	r2, #2
 8007e9e:	9201      	str	r2, [sp, #4]
 8007ea0:	9300      	str	r3, [sp, #0]
 8007ea2:	4623      	mov	r3, r4
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	6878      	ldr	r0, [r7, #4]
 8007ea8:	f002 fe5a 	bl	800ab60 <USBH_OpenPipe>
 8007eac:	bf00      	nop
  else
  {
    return USBH_NOT_SUPPORTED;
  }

  (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	791b      	ldrb	r3, [r3, #4]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f005 fceb 	bl	800d892 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 0U);
 8007ebc:	68bb      	ldr	r3, [r7, #8]
 8007ebe:	795b      	ldrb	r3, [r3, #5]
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	4619      	mov	r1, r3
 8007ec4:	6878      	ldr	r0, [r7, #4]
 8007ec6:	f005 fce4 	bl	800d892 <USBH_LL_SetToggle>

  return USBH_OK;
 8007eca:	2300      	movs	r3, #0
 8007ecc:	e000      	b.n	8007ed0 <USBH_MSC_InterfaceInit+0x23c>
    return USBH_NOT_SUPPORTED;
 8007ece:	2303      	movs	r3, #3
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3714      	adds	r7, #20
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd90      	pop	{r4, r7, pc}

08007ed8 <USBH_MSC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ee6:	69db      	ldr	r3, [r3, #28]
 8007ee8:	60fb      	str	r3, [r7, #12]

  if ((MSC_Handle->OutPipe) != 0U)
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	795b      	ldrb	r3, [r3, #5]
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d00e      	beq.n	8007f10 <USBH_MSC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->OutPipe);
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	795b      	ldrb	r3, [r3, #5]
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f002 fe50 	bl	800ab9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->OutPipe);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	795b      	ldrb	r3, [r3, #5]
 8007f02:	4619      	mov	r1, r3
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f002 fe7b 	bl	800ac00 <USBH_FreePipe>
    MSC_Handle->OutPipe = 0U;     /* Reset the Channel as Free */
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	715a      	strb	r2, [r3, #5]
  }

  if ((MSC_Handle->InPipe != 0U))
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	791b      	ldrb	r3, [r3, #4]
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d00e      	beq.n	8007f36 <USBH_MSC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, MSC_Handle->InPipe);
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	791b      	ldrb	r3, [r3, #4]
 8007f1c:	4619      	mov	r1, r3
 8007f1e:	6878      	ldr	r0, [r7, #4]
 8007f20:	f002 fe3d 	bl	800ab9e <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, MSC_Handle->InPipe);
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	791b      	ldrb	r3, [r3, #4]
 8007f28:	4619      	mov	r1, r3
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f002 fe68 	bl	800ac00 <USBH_FreePipe>
    MSC_Handle->InPipe = 0U;     /* Reset the Channel as Free */
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	2200      	movs	r2, #0
 8007f34:	711a      	strb	r2, [r3, #4]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f3c:	69db      	ldr	r3, [r3, #28]
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d00b      	beq.n	8007f5a <USBH_MSC_InterfaceDeInit+0x82>
  {
    USBH_free(phost->pActiveClass->pData);
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f48:	69db      	ldr	r3, [r3, #28]
 8007f4a:	4618      	mov	r0, r3
 8007f4c:	f005 fd40 	bl	800d9d0 <free>
    phost->pActiveClass->pData = 0U;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f56:	2200      	movs	r2, #0
 8007f58:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8007f5a:	2300      	movs	r3, #0
}
 8007f5c:	4618      	mov	r0, r3
 8007f5e:	3710      	adds	r7, #16
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <USBH_MSC_ClassRequest>:
  *         for MSC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b084      	sub	sp, #16
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007f72:	69db      	ldr	r3, [r3, #28]
 8007f74:	60bb      	str	r3, [r7, #8]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007f76:	2301      	movs	r3, #1
 8007f78:	73fb      	strb	r3, [r7, #15]
  uint8_t i;

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->req_state)
 8007f7a:	68bb      	ldr	r3, [r7, #8]
 8007f7c:	7b9b      	ldrb	r3, [r3, #14]
 8007f7e:	2b03      	cmp	r3, #3
 8007f80:	d041      	beq.n	8008006 <USBH_MSC_ClassRequest+0xa2>
 8007f82:	2b03      	cmp	r3, #3
 8007f84:	dc4b      	bgt.n	800801e <USBH_MSC_ClassRequest+0xba>
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d001      	beq.n	8007f8e <USBH_MSC_ClassRequest+0x2a>
 8007f8a:	2b02      	cmp	r3, #2
 8007f8c:	d147      	bne.n	800801e <USBH_MSC_ClassRequest+0xba>
  {
    case MSC_REQ_IDLE:
    case MSC_REQ_GET_MAX_LUN:
      /* Issue GetMaxLUN request */
      status = USBH_MSC_BOT_REQ_GetMaxLUN(phost, &MSC_Handle->max_lun);
 8007f8e:	68bb      	ldr	r3, [r7, #8]
 8007f90:	4619      	mov	r1, r3
 8007f92:	6878      	ldr	r0, [r7, #4]
 8007f94:	f000 fcf1 	bl	800897a <USBH_MSC_BOT_REQ_GetMaxLUN>
 8007f98:	4603      	mov	r3, r0
 8007f9a:	73fb      	strb	r3, [r7, #15]

      /* When devices do not support the GetMaxLun request, this should
         be considered as only one logical unit is supported */
      if (status == USBH_NOT_SUPPORTED)
 8007f9c:	7bfb      	ldrb	r3, [r7, #15]
 8007f9e:	2b03      	cmp	r3, #3
 8007fa0:	d104      	bne.n	8007fac <USBH_MSC_ClassRequest+0x48>
      {
        MSC_Handle->max_lun = 0U;
 8007fa2:	68bb      	ldr	r3, [r7, #8]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	701a      	strb	r2, [r3, #0]
        status = USBH_OK;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	73fb      	strb	r3, [r7, #15]
      }

      if (status == USBH_OK)
 8007fac:	7bfb      	ldrb	r3, [r7, #15]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d137      	bne.n	8008022 <USBH_MSC_ClassRequest+0xbe>
      {
        MSC_Handle->max_lun = (MSC_Handle->max_lun > MAX_SUPPORTED_LUN) ? MAX_SUPPORTED_LUN : (MSC_Handle->max_lun + 1U);
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	781b      	ldrb	r3, [r3, #0]
 8007fb6:	2b02      	cmp	r3, #2
 8007fb8:	d804      	bhi.n	8007fc4 <USBH_MSC_ClassRequest+0x60>
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	781b      	ldrb	r3, [r3, #0]
 8007fbe:	3301      	adds	r3, #1
 8007fc0:	b2da      	uxtb	r2, r3
 8007fc2:	e000      	b.n	8007fc6 <USBH_MSC_ClassRequest+0x62>
 8007fc4:	2202      	movs	r2, #2
 8007fc6:	68bb      	ldr	r3, [r7, #8]
 8007fc8:	701a      	strb	r2, [r3, #0]
        USBH_UsrLog("Number of supported LUN: %d", MSC_Handle->max_lun);

        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007fca:	2300      	movs	r3, #0
 8007fcc:	73bb      	strb	r3, [r7, #14]
 8007fce:	e014      	b.n	8007ffa <USBH_MSC_ClassRequest+0x96>
        {
          MSC_Handle->unit[i].prev_ready_state = USBH_FAIL;
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
 8007fd2:	68ba      	ldr	r2, [r7, #8]
 8007fd4:	2134      	movs	r1, #52	; 0x34
 8007fd6:	fb01 f303 	mul.w	r3, r1, r3
 8007fda:	4413      	add	r3, r2
 8007fdc:	3392      	adds	r3, #146	; 0x92
 8007fde:	2202      	movs	r2, #2
 8007fe0:	701a      	strb	r2, [r3, #0]
          MSC_Handle->unit[i].state_changed = 0U;
 8007fe2:	7bbb      	ldrb	r3, [r7, #14]
 8007fe4:	68ba      	ldr	r2, [r7, #8]
 8007fe6:	2134      	movs	r1, #52	; 0x34
 8007fe8:	fb01 f303 	mul.w	r3, r1, r3
 8007fec:	4413      	add	r3, r2
 8007fee:	33c1      	adds	r3, #193	; 0xc1
 8007ff0:	2200      	movs	r2, #0
 8007ff2:	701a      	strb	r2, [r3, #0]
        for (i = 0U; i < MSC_Handle->max_lun; i++)
 8007ff4:	7bbb      	ldrb	r3, [r7, #14]
 8007ff6:	3301      	adds	r3, #1
 8007ff8:	73bb      	strb	r3, [r7, #14]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	781b      	ldrb	r3, [r3, #0]
 8007ffe:	7bba      	ldrb	r2, [r7, #14]
 8008000:	429a      	cmp	r2, r3
 8008002:	d3e5      	bcc.n	8007fd0 <USBH_MSC_ClassRequest+0x6c>
        }
      }
      break;
 8008004:	e00d      	b.n	8008022 <USBH_MSC_ClassRequest+0xbe>

    case MSC_REQ_ERROR:
      /* a Clear Feature should be issued here */
      if (USBH_ClrFeature(phost, 0x00U) == USBH_OK)
 8008006:	2100      	movs	r1, #0
 8008008:	6878      	ldr	r0, [r7, #4]
 800800a:	f002 f888 	bl	800a11e <USBH_ClrFeature>
 800800e:	4603      	mov	r3, r0
 8008010:	2b00      	cmp	r3, #0
 8008012:	d108      	bne.n	8008026 <USBH_MSC_ClassRequest+0xc2>
      {
        MSC_Handle->req_state = MSC_Handle->prev_req_state;
 8008014:	68bb      	ldr	r3, [r7, #8]
 8008016:	7bda      	ldrb	r2, [r3, #15]
 8008018:	68bb      	ldr	r3, [r7, #8]
 800801a:	739a      	strb	r2, [r3, #14]
      }
      break;
 800801c:	e003      	b.n	8008026 <USBH_MSC_ClassRequest+0xc2>

    default:
      break;
 800801e:	bf00      	nop
 8008020:	e002      	b.n	8008028 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008022:	bf00      	nop
 8008024:	e000      	b.n	8008028 <USBH_MSC_ClassRequest+0xc4>
      break;
 8008026:	bf00      	nop
  }

  return status;
 8008028:	7bfb      	ldrb	r3, [r7, #15]
}
 800802a:	4618      	mov	r0, r3
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
	...

08008034 <USBH_MSC_Process>:
  *         The function is for managing state machine for MSC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_Process(USBH_HandleTypeDef *phost)
{
 8008034:	b580      	push	{r7, lr}
 8008036:	b086      	sub	sp, #24
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008042:	69db      	ldr	r3, [r3, #28]
 8008044:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY;
 8008046:	2301      	movs	r3, #1
 8008048:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY;
 800804a:	2301      	movs	r3, #1
 800804c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ready_status = USBH_BUSY;
 800804e:	2301      	movs	r3, #1
 8008050:	73bb      	strb	r3, [r7, #14]

  switch (MSC_Handle->state)
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	7b1b      	ldrb	r3, [r3, #12]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d003      	beq.n	8008062 <USBH_MSC_Process+0x2e>
 800805a:	2b01      	cmp	r3, #1
 800805c:	f000 8271 	beq.w	8008542 <USBH_MSC_Process+0x50e>
    case MSC_IDLE:
      error = USBH_OK;
      break;

    default:
      break;
 8008060:	e272      	b.n	8008548 <USBH_MSC_Process+0x514>
      if (MSC_Handle->current_lun < MSC_Handle->max_lun)
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	f8b3 20f8 	ldrh.w	r2, [r3, #248]	; 0xf8
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	781b      	ldrb	r3, [r3, #0]
 800806c:	b29b      	uxth	r3, r3
 800806e:	429a      	cmp	r2, r3
 8008070:	f080 824f 	bcs.w	8008512 <USBH_MSC_Process+0x4de>
        MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 8008074:	693b      	ldr	r3, [r7, #16]
 8008076:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800807a:	4619      	mov	r1, r3
 800807c:	693a      	ldr	r2, [r7, #16]
 800807e:	2334      	movs	r3, #52	; 0x34
 8008080:	fb01 f303 	mul.w	r3, r1, r3
 8008084:	4413      	add	r3, r2
 8008086:	3391      	adds	r3, #145	; 0x91
 8008088:	2201      	movs	r2, #1
 800808a:	701a      	strb	r2, [r3, #0]
        switch (MSC_Handle->unit[MSC_Handle->current_lun].state)
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008092:	4619      	mov	r1, r3
 8008094:	693a      	ldr	r2, [r7, #16]
 8008096:	2334      	movs	r3, #52	; 0x34
 8008098:	fb01 f303 	mul.w	r3, r1, r3
 800809c:	4413      	add	r3, r2
 800809e:	3390      	adds	r3, #144	; 0x90
 80080a0:	781b      	ldrb	r3, [r3, #0]
 80080a2:	2b08      	cmp	r3, #8
 80080a4:	f200 8243 	bhi.w	800852e <USBH_MSC_Process+0x4fa>
 80080a8:	a201      	add	r2, pc, #4	; (adr r2, 80080b0 <USBH_MSC_Process+0x7c>)
 80080aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080ae:	bf00      	nop
 80080b0:	080080d5 	.word	0x080080d5
 80080b4:	0800852f 	.word	0x0800852f
 80080b8:	0800819d 	.word	0x0800819d
 80080bc:	08008321 	.word	0x08008321
 80080c0:	080080fb 	.word	0x080080fb
 80080c4:	080083ed 	.word	0x080083ed
 80080c8:	0800852f 	.word	0x0800852f
 80080cc:	0800852f 	.word	0x0800852f
 80080d0:	08008501 	.word	0x08008501
            MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_INQUIRY;
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80080da:	4619      	mov	r1, r3
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	2334      	movs	r3, #52	; 0x34
 80080e0:	fb01 f303 	mul.w	r3, r1, r3
 80080e4:	4413      	add	r3, r2
 80080e6:	3390      	adds	r3, #144	; 0x90
 80080e8:	2204      	movs	r2, #4
 80080ea:	701a      	strb	r2, [r3, #0]
            MSC_Handle->timer = phost->Timer;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	f8c3 20fc 	str.w	r2, [r3, #252]	; 0xfc
            break;
 80080f8:	e222      	b.n	8008540 <USBH_MSC_Process+0x50c>
            scsi_status = USBH_MSC_SCSI_Inquiry(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].inquiry);
 80080fa:	693b      	ldr	r3, [r7, #16]
 80080fc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008100:	b2d9      	uxtb	r1, r3
 8008102:	693b      	ldr	r3, [r7, #16]
 8008104:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008108:	461a      	mov	r2, r3
 800810a:	2334      	movs	r3, #52	; 0x34
 800810c:	fb02 f303 	mul.w	r3, r2, r3
 8008110:	3398      	adds	r3, #152	; 0x98
 8008112:	693a      	ldr	r2, [r7, #16]
 8008114:	4413      	add	r3, r2
 8008116:	3307      	adds	r3, #7
 8008118:	461a      	mov	r2, r3
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 ff6a 	bl	8008ff4 <USBH_MSC_SCSI_Inquiry>
 8008120:	4603      	mov	r3, r0
 8008122:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008124:	7bfb      	ldrb	r3, [r7, #15]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d10b      	bne.n	8008142 <USBH_MSC_Process+0x10e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008130:	4619      	mov	r1, r3
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	2334      	movs	r3, #52	; 0x34
 8008136:	fb01 f303 	mul.w	r3, r1, r3
 800813a:	4413      	add	r3, r2
 800813c:	3390      	adds	r3, #144	; 0x90
 800813e:	2202      	movs	r2, #2
 8008140:	701a      	strb	r2, [r3, #0]
            if (scsi_status == USBH_FAIL)
 8008142:	7bfb      	ldrb	r3, [r7, #15]
 8008144:	2b02      	cmp	r3, #2
 8008146:	d10c      	bne.n	8008162 <USBH_MSC_Process+0x12e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008148:	693b      	ldr	r3, [r7, #16]
 800814a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800814e:	4619      	mov	r1, r3
 8008150:	693a      	ldr	r2, [r7, #16]
 8008152:	2334      	movs	r3, #52	; 0x34
 8008154:	fb01 f303 	mul.w	r3, r1, r3
 8008158:	4413      	add	r3, r2
 800815a:	3390      	adds	r3, #144	; 0x90
 800815c:	2205      	movs	r2, #5
 800815e:	701a      	strb	r2, [r3, #0]
            break;
 8008160:	e1e7      	b.n	8008532 <USBH_MSC_Process+0x4fe>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008162:	7bfb      	ldrb	r3, [r7, #15]
 8008164:	2b04      	cmp	r3, #4
 8008166:	f040 81e4 	bne.w	8008532 <USBH_MSC_Process+0x4fe>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 800816a:	693b      	ldr	r3, [r7, #16]
 800816c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008170:	4619      	mov	r1, r3
 8008172:	693a      	ldr	r2, [r7, #16]
 8008174:	2334      	movs	r3, #52	; 0x34
 8008176:	fb01 f303 	mul.w	r3, r1, r3
 800817a:	4413      	add	r3, r2
 800817c:	3390      	adds	r3, #144	; 0x90
 800817e:	2201      	movs	r2, #1
 8008180:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008188:	4619      	mov	r1, r3
 800818a:	693a      	ldr	r2, [r7, #16]
 800818c:	2334      	movs	r3, #52	; 0x34
 800818e:	fb01 f303 	mul.w	r3, r1, r3
 8008192:	4413      	add	r3, r2
 8008194:	3391      	adds	r3, #145	; 0x91
 8008196:	2202      	movs	r2, #2
 8008198:	701a      	strb	r2, [r3, #0]
            break;
 800819a:	e1ca      	b.n	8008532 <USBH_MSC_Process+0x4fe>
            ready_status = USBH_MSC_SCSI_TestUnitReady(phost, (uint8_t)MSC_Handle->current_lun);
 800819c:	693b      	ldr	r3, [r7, #16]
 800819e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081a2:	b2db      	uxtb	r3, r3
 80081a4:	4619      	mov	r1, r3
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 fe66 	bl	8008e78 <USBH_MSC_SCSI_TestUnitReady>
 80081ac:	4603      	mov	r3, r0
 80081ae:	73bb      	strb	r3, [r7, #14]
            if (ready_status == USBH_OK)
 80081b0:	7bbb      	ldrb	r3, [r7, #14]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d149      	bne.n	800824a <USBH_MSC_Process+0x216>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_OK)
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081bc:	4619      	mov	r1, r3
 80081be:	693a      	ldr	r2, [r7, #16]
 80081c0:	2334      	movs	r3, #52	; 0x34
 80081c2:	fb01 f303 	mul.w	r3, r1, r3
 80081c6:	4413      	add	r3, r2
 80081c8:	3392      	adds	r3, #146	; 0x92
 80081ca:	781b      	ldrb	r3, [r3, #0]
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00c      	beq.n	80081ea <USBH_MSC_Process+0x1b6>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 80081d0:	693b      	ldr	r3, [r7, #16]
 80081d2:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081d6:	4619      	mov	r1, r3
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	2334      	movs	r3, #52	; 0x34
 80081dc:	fb01 f303 	mul.w	r3, r1, r3
 80081e0:	4413      	add	r3, r2
 80081e2:	33c1      	adds	r3, #193	; 0xc1
 80081e4:	2201      	movs	r2, #1
 80081e6:	701a      	strb	r2, [r3, #0]
 80081e8:	e00b      	b.n	8008202 <USBH_MSC_Process+0x1ce>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80081f0:	4619      	mov	r1, r3
 80081f2:	693a      	ldr	r2, [r7, #16]
 80081f4:	2334      	movs	r3, #52	; 0x34
 80081f6:	fb01 f303 	mul.w	r3, r1, r3
 80081fa:	4413      	add	r3, r2
 80081fc:	33c1      	adds	r3, #193	; 0xc1
 80081fe:	2200      	movs	r2, #0
 8008200:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_READ_CAPACITY10;
 8008202:	693b      	ldr	r3, [r7, #16]
 8008204:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008208:	4619      	mov	r1, r3
 800820a:	693a      	ldr	r2, [r7, #16]
 800820c:	2334      	movs	r3, #52	; 0x34
 800820e:	fb01 f303 	mul.w	r3, r1, r3
 8008212:	4413      	add	r3, r2
 8008214:	3390      	adds	r3, #144	; 0x90
 8008216:	2203      	movs	r2, #3
 8008218:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 800821a:	693b      	ldr	r3, [r7, #16]
 800821c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008220:	4619      	mov	r1, r3
 8008222:	693a      	ldr	r2, [r7, #16]
 8008224:	2334      	movs	r3, #52	; 0x34
 8008226:	fb01 f303 	mul.w	r3, r1, r3
 800822a:	4413      	add	r3, r2
 800822c:	3391      	adds	r3, #145	; 0x91
 800822e:	2200      	movs	r2, #0
 8008230:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_OK;
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008238:	4619      	mov	r1, r3
 800823a:	693a      	ldr	r2, [r7, #16]
 800823c:	2334      	movs	r3, #52	; 0x34
 800823e:	fb01 f303 	mul.w	r3, r1, r3
 8008242:	4413      	add	r3, r2
 8008244:	3392      	adds	r3, #146	; 0x92
 8008246:	2200      	movs	r2, #0
 8008248:	701a      	strb	r2, [r3, #0]
            if (ready_status == USBH_FAIL)
 800824a:	7bbb      	ldrb	r3, [r7, #14]
 800824c:	2b02      	cmp	r3, #2
 800824e:	d14a      	bne.n	80082e6 <USBH_MSC_Process+0x2b2>
              if (MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state != USBH_FAIL)
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008256:	4619      	mov	r1, r3
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	2334      	movs	r3, #52	; 0x34
 800825c:	fb01 f303 	mul.w	r3, r1, r3
 8008260:	4413      	add	r3, r2
 8008262:	3392      	adds	r3, #146	; 0x92
 8008264:	781b      	ldrb	r3, [r3, #0]
 8008266:	2b02      	cmp	r3, #2
 8008268:	d00c      	beq.n	8008284 <USBH_MSC_Process+0x250>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 1U;
 800826a:	693b      	ldr	r3, [r7, #16]
 800826c:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008270:	4619      	mov	r1, r3
 8008272:	693a      	ldr	r2, [r7, #16]
 8008274:	2334      	movs	r3, #52	; 0x34
 8008276:	fb01 f303 	mul.w	r3, r1, r3
 800827a:	4413      	add	r3, r2
 800827c:	33c1      	adds	r3, #193	; 0xc1
 800827e:	2201      	movs	r2, #1
 8008280:	701a      	strb	r2, [r3, #0]
 8008282:	e00b      	b.n	800829c <USBH_MSC_Process+0x268>
                MSC_Handle->unit[MSC_Handle->current_lun].state_changed = 0U;
 8008284:	693b      	ldr	r3, [r7, #16]
 8008286:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800828a:	4619      	mov	r1, r3
 800828c:	693a      	ldr	r2, [r7, #16]
 800828e:	2334      	movs	r3, #52	; 0x34
 8008290:	fb01 f303 	mul.w	r3, r1, r3
 8008294:	4413      	add	r3, r2
 8008296:	33c1      	adds	r3, #193	; 0xc1
 8008298:	2200      	movs	r2, #0
 800829a:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082a2:	4619      	mov	r1, r3
 80082a4:	693a      	ldr	r2, [r7, #16]
 80082a6:	2334      	movs	r3, #52	; 0x34
 80082a8:	fb01 f303 	mul.w	r3, r1, r3
 80082ac:	4413      	add	r3, r2
 80082ae:	3390      	adds	r3, #144	; 0x90
 80082b0:	2205      	movs	r2, #5
 80082b2:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_NOT_READY;
 80082b4:	693b      	ldr	r3, [r7, #16]
 80082b6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082ba:	4619      	mov	r1, r3
 80082bc:	693a      	ldr	r2, [r7, #16]
 80082be:	2334      	movs	r3, #52	; 0x34
 80082c0:	fb01 f303 	mul.w	r3, r1, r3
 80082c4:	4413      	add	r3, r2
 80082c6:	3391      	adds	r3, #145	; 0x91
 80082c8:	2201      	movs	r2, #1
 80082ca:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].prev_ready_state = USBH_FAIL;
 80082cc:	693b      	ldr	r3, [r7, #16]
 80082ce:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082d2:	4619      	mov	r1, r3
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	2334      	movs	r3, #52	; 0x34
 80082d8:	fb01 f303 	mul.w	r3, r1, r3
 80082dc:	4413      	add	r3, r2
 80082de:	3392      	adds	r3, #146	; 0x92
 80082e0:	2202      	movs	r2, #2
 80082e2:	701a      	strb	r2, [r3, #0]
            break;
 80082e4:	e127      	b.n	8008536 <USBH_MSC_Process+0x502>
              if (ready_status == USBH_UNRECOVERED_ERROR)
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	2b04      	cmp	r3, #4
 80082ea:	f040 8124 	bne.w	8008536 <USBH_MSC_Process+0x502>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80082f4:	4619      	mov	r1, r3
 80082f6:	693a      	ldr	r2, [r7, #16]
 80082f8:	2334      	movs	r3, #52	; 0x34
 80082fa:	fb01 f303 	mul.w	r3, r1, r3
 80082fe:	4413      	add	r3, r2
 8008300:	3390      	adds	r3, #144	; 0x90
 8008302:	2201      	movs	r2, #1
 8008304:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 8008306:	693b      	ldr	r3, [r7, #16]
 8008308:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800830c:	4619      	mov	r1, r3
 800830e:	693a      	ldr	r2, [r7, #16]
 8008310:	2334      	movs	r3, #52	; 0x34
 8008312:	fb01 f303 	mul.w	r3, r1, r3
 8008316:	4413      	add	r3, r2
 8008318:	3391      	adds	r3, #145	; 0x91
 800831a:	2202      	movs	r2, #2
 800831c:	701a      	strb	r2, [r3, #0]
            break;
 800831e:	e10a      	b.n	8008536 <USBH_MSC_Process+0x502>
            scsi_status = USBH_MSC_SCSI_ReadCapacity(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].capacity) ;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008326:	b2d9      	uxtb	r1, r3
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800832e:	461a      	mov	r2, r3
 8008330:	2334      	movs	r3, #52	; 0x34
 8008332:	fb02 f303 	mul.w	r3, r2, r3
 8008336:	3390      	adds	r3, #144	; 0x90
 8008338:	693a      	ldr	r2, [r7, #16]
 800833a:	4413      	add	r3, r2
 800833c:	3304      	adds	r3, #4
 800833e:	461a      	mov	r2, r3
 8008340:	6878      	ldr	r0, [r7, #4]
 8008342:	f000 fddc 	bl	8008efe <USBH_MSC_SCSI_ReadCapacity>
 8008346:	4603      	mov	r3, r0
 8008348:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 800834a:	7bfb      	ldrb	r3, [r7, #15]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d120      	bne.n	8008392 <USBH_MSC_Process+0x35e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008350:	693b      	ldr	r3, [r7, #16]
 8008352:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008356:	4619      	mov	r1, r3
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	2334      	movs	r3, #52	; 0x34
 800835c:	fb01 f303 	mul.w	r3, r1, r3
 8008360:	4413      	add	r3, r2
 8008362:	3390      	adds	r3, #144	; 0x90
 8008364:	2201      	movs	r2, #1
 8008366:	701a      	strb	r2, [r3, #0]
              MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_OK;
 8008368:	693b      	ldr	r3, [r7, #16]
 800836a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800836e:	4619      	mov	r1, r3
 8008370:	693a      	ldr	r2, [r7, #16]
 8008372:	2334      	movs	r3, #52	; 0x34
 8008374:	fb01 f303 	mul.w	r3, r1, r3
 8008378:	4413      	add	r3, r2
 800837a:	3391      	adds	r3, #145	; 0x91
 800837c:	2200      	movs	r2, #0
 800837e:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008380:	693b      	ldr	r3, [r7, #16]
 8008382:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008386:	3301      	adds	r3, #1
 8008388:	b29a      	uxth	r2, r3
 800838a:	693b      	ldr	r3, [r7, #16]
 800838c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008390:	e0d3      	b.n	800853a <USBH_MSC_Process+0x506>
            else if (scsi_status == USBH_FAIL)
 8008392:	7bfb      	ldrb	r3, [r7, #15]
 8008394:	2b02      	cmp	r3, #2
 8008396:	d10c      	bne.n	80083b2 <USBH_MSC_Process+0x37e>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_REQUEST_SENSE;
 8008398:	693b      	ldr	r3, [r7, #16]
 800839a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800839e:	4619      	mov	r1, r3
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	2334      	movs	r3, #52	; 0x34
 80083a4:	fb01 f303 	mul.w	r3, r1, r3
 80083a8:	4413      	add	r3, r2
 80083aa:	3390      	adds	r3, #144	; 0x90
 80083ac:	2205      	movs	r2, #5
 80083ae:	701a      	strb	r2, [r3, #0]
            break;
 80083b0:	e0c3      	b.n	800853a <USBH_MSC_Process+0x506>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
 80083b4:	2b04      	cmp	r3, #4
 80083b6:	f040 80c0 	bne.w	800853a <USBH_MSC_Process+0x506>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80083ba:	693b      	ldr	r3, [r7, #16]
 80083bc:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083c0:	4619      	mov	r1, r3
 80083c2:	693a      	ldr	r2, [r7, #16]
 80083c4:	2334      	movs	r3, #52	; 0x34
 80083c6:	fb01 f303 	mul.w	r3, r1, r3
 80083ca:	4413      	add	r3, r2
 80083cc:	3390      	adds	r3, #144	; 0x90
 80083ce:	2201      	movs	r2, #1
 80083d0:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80083d2:	693b      	ldr	r3, [r7, #16]
 80083d4:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083d8:	4619      	mov	r1, r3
 80083da:	693a      	ldr	r2, [r7, #16]
 80083dc:	2334      	movs	r3, #52	; 0x34
 80083de:	fb01 f303 	mul.w	r3, r1, r3
 80083e2:	4413      	add	r3, r2
 80083e4:	3391      	adds	r3, #145	; 0x91
 80083e6:	2202      	movs	r2, #2
 80083e8:	701a      	strb	r2, [r3, #0]
            break;
 80083ea:	e0a6      	b.n	800853a <USBH_MSC_Process+0x506>
            scsi_status = USBH_MSC_SCSI_RequestSense(phost, (uint8_t)MSC_Handle->current_lun, &MSC_Handle->unit[MSC_Handle->current_lun].sense);
 80083ec:	693b      	ldr	r3, [r7, #16]
 80083ee:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083f2:	b2d9      	uxtb	r1, r3
 80083f4:	693b      	ldr	r3, [r7, #16]
 80083f6:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80083fa:	461a      	mov	r2, r3
 80083fc:	2334      	movs	r3, #52	; 0x34
 80083fe:	fb02 f303 	mul.w	r3, r2, r3
 8008402:	3398      	adds	r3, #152	; 0x98
 8008404:	693a      	ldr	r2, [r7, #16]
 8008406:	4413      	add	r3, r2
 8008408:	3304      	adds	r3, #4
 800840a:	461a      	mov	r2, r3
 800840c:	6878      	ldr	r0, [r7, #4]
 800840e:	f000 fe96 	bl	800913e <USBH_MSC_SCSI_RequestSense>
 8008412:	4603      	mov	r3, r0
 8008414:	73fb      	strb	r3, [r7, #15]
            if (scsi_status == USBH_OK)
 8008416:	7bfb      	ldrb	r3, [r7, #15]
 8008418:	2b00      	cmp	r3, #0
 800841a:	d145      	bne.n	80084a8 <USBH_MSC_Process+0x474>
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800841c:	693b      	ldr	r3, [r7, #16]
 800841e:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008422:	4619      	mov	r1, r3
 8008424:	693a      	ldr	r2, [r7, #16]
 8008426:	2334      	movs	r3, #52	; 0x34
 8008428:	fb01 f303 	mul.w	r3, r1, r3
 800842c:	4413      	add	r3, r2
 800842e:	339c      	adds	r3, #156	; 0x9c
 8008430:	781b      	ldrb	r3, [r3, #0]
 8008432:	2b06      	cmp	r3, #6
 8008434:	d00c      	beq.n	8008450 <USBH_MSC_Process+0x41c>
                  (MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_NOT_READY))
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800843c:	4619      	mov	r1, r3
 800843e:	693a      	ldr	r2, [r7, #16]
 8008440:	2334      	movs	r3, #52	; 0x34
 8008442:	fb01 f303 	mul.w	r3, r1, r3
 8008446:	4413      	add	r3, r2
 8008448:	339c      	adds	r3, #156	; 0x9c
 800844a:	781b      	ldrb	r3, [r3, #0]
              if ((MSC_Handle->unit[MSC_Handle->current_lun].sense.key == SCSI_SENSE_KEY_UNIT_ATTENTION) ||
 800844c:	2b02      	cmp	r3, #2
 800844e:	d117      	bne.n	8008480 <USBH_MSC_Process+0x44c>
                if ((phost->Timer - MSC_Handle->timer) < 10000U)
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008456:	693b      	ldr	r3, [r7, #16]
 8008458:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	f242 720f 	movw	r2, #9999	; 0x270f
 8008462:	4293      	cmp	r3, r2
 8008464:	d80c      	bhi.n	8008480 <USBH_MSC_Process+0x44c>
                  MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_TEST_UNIT_READY;
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800846c:	4619      	mov	r1, r3
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	2334      	movs	r3, #52	; 0x34
 8008472:	fb01 f303 	mul.w	r3, r1, r3
 8008476:	4413      	add	r3, r2
 8008478:	3390      	adds	r3, #144	; 0x90
 800847a:	2202      	movs	r2, #2
 800847c:	701a      	strb	r2, [r3, #0]
                  break;
 800847e:	e05f      	b.n	8008540 <USBH_MSC_Process+0x50c>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 8008480:	693b      	ldr	r3, [r7, #16]
 8008482:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008486:	4619      	mov	r1, r3
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	2334      	movs	r3, #52	; 0x34
 800848c:	fb01 f303 	mul.w	r3, r1, r3
 8008490:	4413      	add	r3, r2
 8008492:	3390      	adds	r3, #144	; 0x90
 8008494:	2201      	movs	r2, #1
 8008496:	701a      	strb	r2, [r3, #0]
              MSC_Handle->current_lun++;
 8008498:	693b      	ldr	r3, [r7, #16]
 800849a:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 800849e:	3301      	adds	r3, #1
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            if (scsi_status == USBH_FAIL)
 80084a8:	7bfb      	ldrb	r3, [r7, #15]
 80084aa:	2b02      	cmp	r3, #2
 80084ac:	d10c      	bne.n	80084c8 <USBH_MSC_Process+0x494>
              MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_UNRECOVERED_ERROR;
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80084b4:	4619      	mov	r1, r3
 80084b6:	693a      	ldr	r2, [r7, #16]
 80084b8:	2334      	movs	r3, #52	; 0x34
 80084ba:	fb01 f303 	mul.w	r3, r1, r3
 80084be:	4413      	add	r3, r2
 80084c0:	3390      	adds	r3, #144	; 0x90
 80084c2:	2208      	movs	r2, #8
 80084c4:	701a      	strb	r2, [r3, #0]
            break;
 80084c6:	e03a      	b.n	800853e <USBH_MSC_Process+0x50a>
              if (scsi_status == USBH_UNRECOVERED_ERROR)
 80084c8:	7bfb      	ldrb	r3, [r7, #15]
 80084ca:	2b04      	cmp	r3, #4
 80084cc:	d137      	bne.n	800853e <USBH_MSC_Process+0x50a>
                MSC_Handle->unit[MSC_Handle->current_lun].state = MSC_IDLE;
 80084ce:	693b      	ldr	r3, [r7, #16]
 80084d0:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80084d4:	4619      	mov	r1, r3
 80084d6:	693a      	ldr	r2, [r7, #16]
 80084d8:	2334      	movs	r3, #52	; 0x34
 80084da:	fb01 f303 	mul.w	r3, r1, r3
 80084de:	4413      	add	r3, r2
 80084e0:	3390      	adds	r3, #144	; 0x90
 80084e2:	2201      	movs	r2, #1
 80084e4:	701a      	strb	r2, [r3, #0]
                MSC_Handle->unit[MSC_Handle->current_lun].error = MSC_ERROR;
 80084e6:	693b      	ldr	r3, [r7, #16]
 80084e8:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 80084ec:	4619      	mov	r1, r3
 80084ee:	693a      	ldr	r2, [r7, #16]
 80084f0:	2334      	movs	r3, #52	; 0x34
 80084f2:	fb01 f303 	mul.w	r3, r1, r3
 80084f6:	4413      	add	r3, r2
 80084f8:	3391      	adds	r3, #145	; 0x91
 80084fa:	2202      	movs	r2, #2
 80084fc:	701a      	strb	r2, [r3, #0]
            break;
 80084fe:	e01e      	b.n	800853e <USBH_MSC_Process+0x50a>
            MSC_Handle->current_lun++;
 8008500:	693b      	ldr	r3, [r7, #16]
 8008502:	f8b3 30f8 	ldrh.w	r3, [r3, #248]	; 0xf8
 8008506:	3301      	adds	r3, #1
 8008508:	b29a      	uxth	r2, r3
 800850a:	693b      	ldr	r3, [r7, #16]
 800850c:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
            break;
 8008510:	e016      	b.n	8008540 <USBH_MSC_Process+0x50c>
        MSC_Handle->current_lun = 0U;
 8008512:	693b      	ldr	r3, [r7, #16]
 8008514:	2200      	movs	r2, #0
 8008516:	f8a3 20f8 	strh.w	r2, [r3, #248]	; 0xf8
        MSC_Handle->state = MSC_IDLE;
 800851a:	693b      	ldr	r3, [r7, #16]
 800851c:	2201      	movs	r2, #1
 800851e:	731a      	strb	r2, [r3, #12]
        phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8008526:	2102      	movs	r1, #2
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	4798      	blx	r3
      break;
 800852c:	e00c      	b.n	8008548 <USBH_MSC_Process+0x514>
            break;
 800852e:	bf00      	nop
 8008530:	e00a      	b.n	8008548 <USBH_MSC_Process+0x514>
            break;
 8008532:	bf00      	nop
 8008534:	e008      	b.n	8008548 <USBH_MSC_Process+0x514>
            break;
 8008536:	bf00      	nop
 8008538:	e006      	b.n	8008548 <USBH_MSC_Process+0x514>
            break;
 800853a:	bf00      	nop
 800853c:	e004      	b.n	8008548 <USBH_MSC_Process+0x514>
            break;
 800853e:	bf00      	nop
      break;
 8008540:	e002      	b.n	8008548 <USBH_MSC_Process+0x514>
      error = USBH_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	75fb      	strb	r3, [r7, #23]
      break;
 8008546:	bf00      	nop
  }
  return error;
 8008548:	7dfb      	ldrb	r3, [r7, #23]
}
 800854a:	4618      	mov	r0, r3
 800854c:	3718      	adds	r7, #24
 800854e:	46bd      	mov	sp, r7
 8008550:	bd80      	pop	{r7, pc}
 8008552:	bf00      	nop

08008554 <USBH_MSC_SOFProcess>:
  *         The function is for SOF state
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008554:	b480      	push	{r7}
 8008556:	b083      	sub	sp, #12
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800855c:	2300      	movs	r3, #0
}
 800855e:	4618      	mov	r0, r3
 8008560:	370c      	adds	r7, #12
 8008562:	46bd      	mov	sp, r7
 8008564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008568:	4770      	bx	lr

0800856a <USBH_MSC_RdWrProcess>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_RdWrProcess(USBH_HandleTypeDef *phost, uint8_t lun)
{
 800856a:	b580      	push	{r7, lr}
 800856c:	b088      	sub	sp, #32
 800856e:	af02      	add	r7, sp, #8
 8008570:	6078      	str	r0, [r7, #4]
 8008572:	460b      	mov	r3, r1
 8008574:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef error = USBH_BUSY ;
 8008580:	2301      	movs	r3, #1
 8008582:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef scsi_status = USBH_BUSY ;
 8008584:	2301      	movs	r3, #1
 8008586:	73fb      	strb	r3, [r7, #15]

  /* Switch MSC REQ state machine */
  switch (MSC_Handle->unit[lun].state)
 8008588:	78fb      	ldrb	r3, [r7, #3]
 800858a:	693a      	ldr	r2, [r7, #16]
 800858c:	2134      	movs	r1, #52	; 0x34
 800858e:	fb01 f303 	mul.w	r3, r1, r3
 8008592:	4413      	add	r3, r2
 8008594:	3390      	adds	r3, #144	; 0x90
 8008596:	781b      	ldrb	r3, [r3, #0]
 8008598:	2b07      	cmp	r3, #7
 800859a:	d03c      	beq.n	8008616 <USBH_MSC_RdWrProcess+0xac>
 800859c:	2b07      	cmp	r3, #7
 800859e:	f300 80a7 	bgt.w	80086f0 <USBH_MSC_RdWrProcess+0x186>
 80085a2:	2b05      	cmp	r3, #5
 80085a4:	d06c      	beq.n	8008680 <USBH_MSC_RdWrProcess+0x116>
 80085a6:	2b06      	cmp	r3, #6
 80085a8:	f040 80a2 	bne.w	80086f0 <USBH_MSC_RdWrProcess+0x186>
  {

    case MSC_READ:
      scsi_status = USBH_MSC_SCSI_Read(phost, lun, 0U, NULL, 0U);
 80085ac:	78f9      	ldrb	r1, [r7, #3]
 80085ae:	2300      	movs	r3, #0
 80085b0:	9300      	str	r3, [sp, #0]
 80085b2:	2300      	movs	r3, #0
 80085b4:	2200      	movs	r2, #0
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 fea5 	bl	8009306 <USBH_MSC_SCSI_Read>
 80085bc:	4603      	mov	r3, r0
 80085be:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 80085c0:	7bfb      	ldrb	r3, [r7, #15]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d10b      	bne.n	80085de <USBH_MSC_RdWrProcess+0x74>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80085c6:	78fb      	ldrb	r3, [r7, #3]
 80085c8:	693a      	ldr	r2, [r7, #16]
 80085ca:	2134      	movs	r1, #52	; 0x34
 80085cc:	fb01 f303 	mul.w	r3, r1, r3
 80085d0:	4413      	add	r3, r2
 80085d2:	3390      	adds	r3, #144	; 0x90
 80085d4:	2201      	movs	r2, #1
 80085d6:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 80085d8:	2300      	movs	r3, #0
 80085da:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80085dc:	e08a      	b.n	80086f4 <USBH_MSC_RdWrProcess+0x18a>
      else if (scsi_status == USBH_FAIL)
 80085de:	7bfb      	ldrb	r3, [r7, #15]
 80085e0:	2b02      	cmp	r3, #2
 80085e2:	d109      	bne.n	80085f8 <USBH_MSC_RdWrProcess+0x8e>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 80085e4:	78fb      	ldrb	r3, [r7, #3]
 80085e6:	693a      	ldr	r2, [r7, #16]
 80085e8:	2134      	movs	r1, #52	; 0x34
 80085ea:	fb01 f303 	mul.w	r3, r1, r3
 80085ee:	4413      	add	r3, r2
 80085f0:	3390      	adds	r3, #144	; 0x90
 80085f2:	2205      	movs	r2, #5
 80085f4:	701a      	strb	r2, [r3, #0]
      break;
 80085f6:	e07d      	b.n	80086f4 <USBH_MSC_RdWrProcess+0x18a>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80085f8:	7bfb      	ldrb	r3, [r7, #15]
 80085fa:	2b04      	cmp	r3, #4
 80085fc:	d17a      	bne.n	80086f4 <USBH_MSC_RdWrProcess+0x18a>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80085fe:	78fb      	ldrb	r3, [r7, #3]
 8008600:	693a      	ldr	r2, [r7, #16]
 8008602:	2134      	movs	r1, #52	; 0x34
 8008604:	fb01 f303 	mul.w	r3, r1, r3
 8008608:	4413      	add	r3, r2
 800860a:	3390      	adds	r3, #144	; 0x90
 800860c:	2208      	movs	r2, #8
 800860e:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 8008610:	2302      	movs	r3, #2
 8008612:	75fb      	strb	r3, [r7, #23]
      break;
 8008614:	e06e      	b.n	80086f4 <USBH_MSC_RdWrProcess+0x18a>

    case MSC_WRITE:
      scsi_status = USBH_MSC_SCSI_Write(phost, lun, 0U, NULL, 0U);
 8008616:	78f9      	ldrb	r1, [r7, #3]
 8008618:	2300      	movs	r3, #0
 800861a:	9300      	str	r3, [sp, #0]
 800861c:	2300      	movs	r3, #0
 800861e:	2200      	movs	r2, #0
 8008620:	6878      	ldr	r0, [r7, #4]
 8008622:	f000 fe05 	bl	8009230 <USBH_MSC_SCSI_Write>
 8008626:	4603      	mov	r3, r0
 8008628:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800862a:	7bfb      	ldrb	r3, [r7, #15]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d10b      	bne.n	8008648 <USBH_MSC_RdWrProcess+0xde>
      {
        MSC_Handle->unit[lun].state = MSC_IDLE;
 8008630:	78fb      	ldrb	r3, [r7, #3]
 8008632:	693a      	ldr	r2, [r7, #16]
 8008634:	2134      	movs	r1, #52	; 0x34
 8008636:	fb01 f303 	mul.w	r3, r1, r3
 800863a:	4413      	add	r3, r2
 800863c:	3390      	adds	r3, #144	; 0x90
 800863e:	2201      	movs	r2, #1
 8008640:	701a      	strb	r2, [r3, #0]
        error = USBH_OK;
 8008642:	2300      	movs	r3, #0
 8008644:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008646:	e057      	b.n	80086f8 <USBH_MSC_RdWrProcess+0x18e>
      else if (scsi_status == USBH_FAIL)
 8008648:	7bfb      	ldrb	r3, [r7, #15]
 800864a:	2b02      	cmp	r3, #2
 800864c:	d109      	bne.n	8008662 <USBH_MSC_RdWrProcess+0xf8>
        MSC_Handle->unit[lun].state = MSC_REQUEST_SENSE;
 800864e:	78fb      	ldrb	r3, [r7, #3]
 8008650:	693a      	ldr	r2, [r7, #16]
 8008652:	2134      	movs	r1, #52	; 0x34
 8008654:	fb01 f303 	mul.w	r3, r1, r3
 8008658:	4413      	add	r3, r2
 800865a:	3390      	adds	r3, #144	; 0x90
 800865c:	2205      	movs	r2, #5
 800865e:	701a      	strb	r2, [r3, #0]
      break;
 8008660:	e04a      	b.n	80086f8 <USBH_MSC_RdWrProcess+0x18e>
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 8008662:	7bfb      	ldrb	r3, [r7, #15]
 8008664:	2b04      	cmp	r3, #4
 8008666:	d147      	bne.n	80086f8 <USBH_MSC_RdWrProcess+0x18e>
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 8008668:	78fb      	ldrb	r3, [r7, #3]
 800866a:	693a      	ldr	r2, [r7, #16]
 800866c:	2134      	movs	r1, #52	; 0x34
 800866e:	fb01 f303 	mul.w	r3, r1, r3
 8008672:	4413      	add	r3, r2
 8008674:	3390      	adds	r3, #144	; 0x90
 8008676:	2208      	movs	r2, #8
 8008678:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 800867a:	2302      	movs	r3, #2
 800867c:	75fb      	strb	r3, [r7, #23]
      break;
 800867e:	e03b      	b.n	80086f8 <USBH_MSC_RdWrProcess+0x18e>

    case MSC_REQUEST_SENSE:
      scsi_status = USBH_MSC_SCSI_RequestSense(phost, lun, &MSC_Handle->unit[lun].sense);
 8008680:	78fb      	ldrb	r3, [r7, #3]
 8008682:	2234      	movs	r2, #52	; 0x34
 8008684:	fb02 f303 	mul.w	r3, r2, r3
 8008688:	3398      	adds	r3, #152	; 0x98
 800868a:	693a      	ldr	r2, [r7, #16]
 800868c:	4413      	add	r3, r2
 800868e:	1d1a      	adds	r2, r3, #4
 8008690:	78fb      	ldrb	r3, [r7, #3]
 8008692:	4619      	mov	r1, r3
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f000 fd52 	bl	800913e <USBH_MSC_SCSI_RequestSense>
 800869a:	4603      	mov	r3, r0
 800869c:	73fb      	strb	r3, [r7, #15]

      if (scsi_status == USBH_OK)
 800869e:	7bfb      	ldrb	r3, [r7, #15]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d113      	bne.n	80086cc <USBH_MSC_RdWrProcess+0x162>
      {
        USBH_UsrLog("Sense Key  : %x", MSC_Handle->unit[lun].sense.key);
        USBH_UsrLog("Additional Sense Code : %x", MSC_Handle->unit[lun].sense.asc);
        USBH_UsrLog("Additional Sense Code Qualifier: %x", MSC_Handle->unit[lun].sense.ascq);
        MSC_Handle->unit[lun].state = MSC_IDLE;
 80086a4:	78fb      	ldrb	r3, [r7, #3]
 80086a6:	693a      	ldr	r2, [r7, #16]
 80086a8:	2134      	movs	r1, #52	; 0x34
 80086aa:	fb01 f303 	mul.w	r3, r1, r3
 80086ae:	4413      	add	r3, r2
 80086b0:	3390      	adds	r3, #144	; 0x90
 80086b2:	2201      	movs	r2, #1
 80086b4:	701a      	strb	r2, [r3, #0]
        MSC_Handle->unit[lun].error = MSC_ERROR;
 80086b6:	78fb      	ldrb	r3, [r7, #3]
 80086b8:	693a      	ldr	r2, [r7, #16]
 80086ba:	2134      	movs	r1, #52	; 0x34
 80086bc:	fb01 f303 	mul.w	r3, r1, r3
 80086c0:	4413      	add	r3, r2
 80086c2:	3391      	adds	r3, #145	; 0x91
 80086c4:	2202      	movs	r2, #2
 80086c6:	701a      	strb	r2, [r3, #0]

        error = USBH_FAIL;
 80086c8:	2302      	movs	r3, #2
 80086ca:	75fb      	strb	r3, [r7, #23]
      }
      if (scsi_status == USBH_FAIL)
 80086cc:	7bfb      	ldrb	r3, [r7, #15]
 80086ce:	2b02      	cmp	r3, #2
 80086d0:	d014      	beq.n	80086fc <USBH_MSC_RdWrProcess+0x192>
      {
        USBH_UsrLog("MSC Device NOT ready");
      }
      else
      {
        if (scsi_status == USBH_UNRECOVERED_ERROR)
 80086d2:	7bfb      	ldrb	r3, [r7, #15]
 80086d4:	2b04      	cmp	r3, #4
 80086d6:	d111      	bne.n	80086fc <USBH_MSC_RdWrProcess+0x192>
        {
          MSC_Handle->unit[lun].state = MSC_UNRECOVERED_ERROR;
 80086d8:	78fb      	ldrb	r3, [r7, #3]
 80086da:	693a      	ldr	r2, [r7, #16]
 80086dc:	2134      	movs	r1, #52	; 0x34
 80086de:	fb01 f303 	mul.w	r3, r1, r3
 80086e2:	4413      	add	r3, r2
 80086e4:	3390      	adds	r3, #144	; 0x90
 80086e6:	2208      	movs	r2, #8
 80086e8:	701a      	strb	r2, [r3, #0]
          error = USBH_FAIL;
 80086ea:	2302      	movs	r3, #2
 80086ec:	75fb      	strb	r3, [r7, #23]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80086ee:	e005      	b.n	80086fc <USBH_MSC_RdWrProcess+0x192>

    default:
      break;
 80086f0:	bf00      	nop
 80086f2:	e004      	b.n	80086fe <USBH_MSC_RdWrProcess+0x194>
      break;
 80086f4:	bf00      	nop
 80086f6:	e002      	b.n	80086fe <USBH_MSC_RdWrProcess+0x194>
      break;
 80086f8:	bf00      	nop
 80086fa:	e000      	b.n	80086fe <USBH_MSC_RdWrProcess+0x194>
      break;
 80086fc:	bf00      	nop

  }
  return error;
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8008700:	4618      	mov	r0, r3
 8008702:	3718      	adds	r7, #24
 8008704:	46bd      	mov	sp, r7
 8008706:	bd80      	pop	{r7, pc}

08008708 <USBH_MSC_UnitIsReady>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval Lun status (0: not ready / 1: ready)
  */
uint8_t  USBH_MSC_UnitIsReady(USBH_HandleTypeDef *phost, uint8_t lun)
{
 8008708:	b480      	push	{r7}
 800870a:	b085      	sub	sp, #20
 800870c:	af00      	add	r7, sp, #0
 800870e:	6078      	str	r0, [r7, #4]
 8008710:	460b      	mov	r3, r1
 8008712:	70fb      	strb	r3, [r7, #3]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800871a:	69db      	ldr	r3, [r3, #28]
 800871c:	60bb      	str	r3, [r7, #8]
  uint8_t res;

  if ((phost->gState == HOST_CLASS) && (MSC_Handle->unit[lun].error == MSC_OK))
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	781b      	ldrb	r3, [r3, #0]
 8008722:	b2db      	uxtb	r3, r3
 8008724:	2b0b      	cmp	r3, #11
 8008726:	d10c      	bne.n	8008742 <USBH_MSC_UnitIsReady+0x3a>
 8008728:	78fb      	ldrb	r3, [r7, #3]
 800872a:	68ba      	ldr	r2, [r7, #8]
 800872c:	2134      	movs	r1, #52	; 0x34
 800872e:	fb01 f303 	mul.w	r3, r1, r3
 8008732:	4413      	add	r3, r2
 8008734:	3391      	adds	r3, #145	; 0x91
 8008736:	781b      	ldrb	r3, [r3, #0]
 8008738:	2b00      	cmp	r3, #0
 800873a:	d102      	bne.n	8008742 <USBH_MSC_UnitIsReady+0x3a>
  {
    res = 1U;
 800873c:	2301      	movs	r3, #1
 800873e:	73fb      	strb	r3, [r7, #15]
 8008740:	e001      	b.n	8008746 <USBH_MSC_UnitIsReady+0x3e>
  }
  else
  {
    res = 0U;
 8008742:	2300      	movs	r3, #0
 8008744:	73fb      	strb	r3, [r7, #15]
  }

  return res;
 8008746:	7bfb      	ldrb	r3, [r7, #15]
}
 8008748:	4618      	mov	r0, r3
 800874a:	3714      	adds	r7, #20
 800874c:	46bd      	mov	sp, r7
 800874e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008752:	4770      	bx	lr

08008754 <USBH_MSC_GetLUNInfo>:
  * @param  phost: Host handle
  * @param  lun: logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_GetLUNInfo(USBH_HandleTypeDef *phost, uint8_t lun, MSC_LUNTypeDef *info)
{
 8008754:	b580      	push	{r7, lr}
 8008756:	b086      	sub	sp, #24
 8008758:	af00      	add	r7, sp, #0
 800875a:	60f8      	str	r0, [r7, #12]
 800875c:	460b      	mov	r3, r1
 800875e:	607a      	str	r2, [r7, #4]
 8008760:	72fb      	strb	r3, [r7, #11]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008768:	69db      	ldr	r3, [r3, #28]
 800876a:	617b      	str	r3, [r7, #20]
  if (phost->gState == HOST_CLASS)
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	781b      	ldrb	r3, [r3, #0]
 8008770:	b2db      	uxtb	r3, r3
 8008772:	2b0b      	cmp	r3, #11
 8008774:	d10d      	bne.n	8008792 <USBH_MSC_GetLUNInfo+0x3e>
  {
    (void)USBH_memcpy(info, &MSC_Handle->unit[lun], sizeof(MSC_LUNTypeDef));
 8008776:	7afb      	ldrb	r3, [r7, #11]
 8008778:	2234      	movs	r2, #52	; 0x34
 800877a:	fb02 f303 	mul.w	r3, r2, r3
 800877e:	3390      	adds	r3, #144	; 0x90
 8008780:	697a      	ldr	r2, [r7, #20]
 8008782:	4413      	add	r3, r2
 8008784:	2234      	movs	r2, #52	; 0x34
 8008786:	4619      	mov	r1, r3
 8008788:	6878      	ldr	r0, [r7, #4]
 800878a:	f005 fa19 	bl	800dbc0 <memcpy>
    return USBH_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	e000      	b.n	8008794 <USBH_MSC_GetLUNInfo+0x40>
  }
  else
  {
    return USBH_FAIL;
 8008792:	2302      	movs	r3, #2
  }
}
 8008794:	4618      	mov	r0, r3
 8008796:	3718      	adds	r7, #24
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}

0800879c <USBH_MSC_Read>:
USBH_StatusTypeDef USBH_MSC_Read(USBH_HandleTypeDef *phost,
                                 uint8_t lun,
                                 uint32_t address,
                                 uint8_t *pbuf,
                                 uint32_t length)
{
 800879c:	b580      	push	{r7, lr}
 800879e:	b088      	sub	sp, #32
 80087a0:	af02      	add	r7, sp, #8
 80087a2:	60f8      	str	r0, [r7, #12]
 80087a4:	607a      	str	r2, [r7, #4]
 80087a6:	603b      	str	r3, [r7, #0]
 80087a8:	460b      	mov	r3, r1
 80087aa:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80087b2:	69db      	ldr	r3, [r3, #28]
 80087b4:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 80087b6:	68fb      	ldr	r3, [r7, #12]
 80087b8:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 80087bc:	b2db      	uxtb	r3, r3
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d00e      	beq.n	80087e0 <USBH_MSC_Read+0x44>
      (phost->gState != HOST_CLASS) ||
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	781b      	ldrb	r3, [r3, #0]
 80087c6:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 80087c8:	2b0b      	cmp	r3, #11
 80087ca:	d109      	bne.n	80087e0 <USBH_MSC_Read+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 80087cc:	7afb      	ldrb	r3, [r7, #11]
 80087ce:	697a      	ldr	r2, [r7, #20]
 80087d0:	2134      	movs	r1, #52	; 0x34
 80087d2:	fb01 f303 	mul.w	r3, r1, r3
 80087d6:	4413      	add	r3, r2
 80087d8:	3390      	adds	r3, #144	; 0x90
 80087da:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80087dc:	2b01      	cmp	r3, #1
 80087de:	d001      	beq.n	80087e4 <USBH_MSC_Read+0x48>
  {
    return  USBH_FAIL;
 80087e0:	2302      	movs	r3, #2
 80087e2:	e040      	b.n	8008866 <USBH_MSC_Read+0xca>
  }

  MSC_Handle->state = MSC_READ;
 80087e4:	697b      	ldr	r3, [r7, #20]
 80087e6:	2206      	movs	r2, #6
 80087e8:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_READ;
 80087ea:	7afb      	ldrb	r3, [r7, #11]
 80087ec:	697a      	ldr	r2, [r7, #20]
 80087ee:	2134      	movs	r1, #52	; 0x34
 80087f0:	fb01 f303 	mul.w	r3, r1, r3
 80087f4:	4413      	add	r3, r2
 80087f6:	3390      	adds	r3, #144	; 0x90
 80087f8:	2206      	movs	r2, #6
 80087fa:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80087fc:	7afb      	ldrb	r3, [r7, #11]
 80087fe:	b29a      	uxth	r2, r3
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Read(phost, lun, address, pbuf, length);
 8008806:	7af9      	ldrb	r1, [r7, #11]
 8008808:	6a3b      	ldr	r3, [r7, #32]
 800880a:	9300      	str	r3, [sp, #0]
 800880c:	683b      	ldr	r3, [r7, #0]
 800880e:	687a      	ldr	r2, [r7, #4]
 8008810:	68f8      	ldr	r0, [r7, #12]
 8008812:	f000 fd78 	bl	8009306 <USBH_MSC_SCSI_Read>

  timeout = phost->Timer;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800881c:	613b      	str	r3, [r7, #16]

  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800881e:	e016      	b.n	800884e <USBH_MSC_Read+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 8008826:	693b      	ldr	r3, [r7, #16]
 8008828:	1ad2      	subs	r2, r2, r3
 800882a:	6a3b      	ldr	r3, [r7, #32]
 800882c:	f242 7110 	movw	r1, #10000	; 0x2710
 8008830:	fb01 f303 	mul.w	r3, r1, r3
 8008834:	429a      	cmp	r2, r3
 8008836:	d805      	bhi.n	8008844 <USBH_MSC_Read+0xa8>
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800883e:	b2db      	uxtb	r3, r3
 8008840:	2b00      	cmp	r3, #0
 8008842:	d104      	bne.n	800884e <USBH_MSC_Read+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	2201      	movs	r2, #1
 8008848:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800884a:	2302      	movs	r3, #2
 800884c:	e00b      	b.n	8008866 <USBH_MSC_Read+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 800884e:	7afb      	ldrb	r3, [r7, #11]
 8008850:	4619      	mov	r1, r3
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f7ff fe89 	bl	800856a <USBH_MSC_RdWrProcess>
 8008858:	4603      	mov	r3, r0
 800885a:	2b01      	cmp	r3, #1
 800885c:	d0e0      	beq.n	8008820 <USBH_MSC_Read+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	2201      	movs	r2, #1
 8008862:	731a      	strb	r2, [r3, #12]

  return USBH_OK;
 8008864:	2300      	movs	r3, #0
}
 8008866:	4618      	mov	r0, r3
 8008868:	3718      	adds	r7, #24
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <USBH_MSC_Write>:
USBH_StatusTypeDef USBH_MSC_Write(USBH_HandleTypeDef *phost,
                                  uint8_t lun,
                                  uint32_t address,
                                  uint8_t *pbuf,
                                  uint32_t length)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b088      	sub	sp, #32
 8008872:	af02      	add	r7, sp, #8
 8008874:	60f8      	str	r0, [r7, #12]
 8008876:	607a      	str	r2, [r7, #4]
 8008878:	603b      	str	r3, [r7, #0]
 800887a:	460b      	mov	r3, r1
 800887c:	72fb      	strb	r3, [r7, #11]
  uint32_t timeout;
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800887e:	68fb      	ldr	r3, [r7, #12]
 8008880:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008884:	69db      	ldr	r3, [r3, #28]
 8008886:	617b      	str	r3, [r7, #20]

  if ((phost->device.is_connected == 0U) ||
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800888e:	b2db      	uxtb	r3, r3
 8008890:	2b00      	cmp	r3, #0
 8008892:	d00e      	beq.n	80088b2 <USBH_MSC_Write+0x44>
      (phost->gState != HOST_CLASS) ||
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	781b      	ldrb	r3, [r3, #0]
 8008898:	b2db      	uxtb	r3, r3
  if ((phost->device.is_connected == 0U) ||
 800889a:	2b0b      	cmp	r3, #11
 800889c:	d109      	bne.n	80088b2 <USBH_MSC_Write+0x44>
      (MSC_Handle->unit[lun].state != MSC_IDLE))
 800889e:	7afb      	ldrb	r3, [r7, #11]
 80088a0:	697a      	ldr	r2, [r7, #20]
 80088a2:	2134      	movs	r1, #52	; 0x34
 80088a4:	fb01 f303 	mul.w	r3, r1, r3
 80088a8:	4413      	add	r3, r2
 80088aa:	3390      	adds	r3, #144	; 0x90
 80088ac:	781b      	ldrb	r3, [r3, #0]
      (phost->gState != HOST_CLASS) ||
 80088ae:	2b01      	cmp	r3, #1
 80088b0:	d001      	beq.n	80088b6 <USBH_MSC_Write+0x48>
  {
    return  USBH_FAIL;
 80088b2:	2302      	movs	r3, #2
 80088b4:	e040      	b.n	8008938 <USBH_MSC_Write+0xca>
  }

  MSC_Handle->state = MSC_WRITE;
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	2207      	movs	r2, #7
 80088ba:	731a      	strb	r2, [r3, #12]
  MSC_Handle->unit[lun].state = MSC_WRITE;
 80088bc:	7afb      	ldrb	r3, [r7, #11]
 80088be:	697a      	ldr	r2, [r7, #20]
 80088c0:	2134      	movs	r1, #52	; 0x34
 80088c2:	fb01 f303 	mul.w	r3, r1, r3
 80088c6:	4413      	add	r3, r2
 80088c8:	3390      	adds	r3, #144	; 0x90
 80088ca:	2207      	movs	r2, #7
 80088cc:	701a      	strb	r2, [r3, #0]
  MSC_Handle->rw_lun = lun;
 80088ce:	7afb      	ldrb	r3, [r7, #11]
 80088d0:	b29a      	uxth	r2, r3
 80088d2:	697b      	ldr	r3, [r7, #20]
 80088d4:	f8a3 20fa 	strh.w	r2, [r3, #250]	; 0xfa

  (void)USBH_MSC_SCSI_Write(phost, lun, address, pbuf, length);
 80088d8:	7af9      	ldrb	r1, [r7, #11]
 80088da:	6a3b      	ldr	r3, [r7, #32]
 80088dc:	9300      	str	r3, [sp, #0]
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	687a      	ldr	r2, [r7, #4]
 80088e2:	68f8      	ldr	r0, [r7, #12]
 80088e4:	f000 fca4 	bl	8009230 <USBH_MSC_SCSI_Write>

  timeout = phost->Timer;
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80088ee:	613b      	str	r3, [r7, #16]
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 80088f0:	e016      	b.n	8008920 <USBH_MSC_Write+0xb2>
  {
    if (((phost->Timer - timeout) > (10000U * length)) || (phost->device.is_connected == 0U))
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	f8d3 23c4 	ldr.w	r2, [r3, #964]	; 0x3c4
 80088f8:	693b      	ldr	r3, [r7, #16]
 80088fa:	1ad2      	subs	r2, r2, r3
 80088fc:	6a3b      	ldr	r3, [r7, #32]
 80088fe:	f242 7110 	movw	r1, #10000	; 0x2710
 8008902:	fb01 f303 	mul.w	r3, r1, r3
 8008906:	429a      	cmp	r2, r3
 8008908:	d805      	bhi.n	8008916 <USBH_MSC_Write+0xa8>
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8008910:	b2db      	uxtb	r3, r3
 8008912:	2b00      	cmp	r3, #0
 8008914:	d104      	bne.n	8008920 <USBH_MSC_Write+0xb2>
    {
      MSC_Handle->state = MSC_IDLE;
 8008916:	697b      	ldr	r3, [r7, #20]
 8008918:	2201      	movs	r2, #1
 800891a:	731a      	strb	r2, [r3, #12]
      return USBH_FAIL;
 800891c:	2302      	movs	r3, #2
 800891e:	e00b      	b.n	8008938 <USBH_MSC_Write+0xca>
  while (USBH_MSC_RdWrProcess(phost, lun) == USBH_BUSY)
 8008920:	7afb      	ldrb	r3, [r7, #11]
 8008922:	4619      	mov	r1, r3
 8008924:	68f8      	ldr	r0, [r7, #12]
 8008926:	f7ff fe20 	bl	800856a <USBH_MSC_RdWrProcess>
 800892a:	4603      	mov	r3, r0
 800892c:	2b01      	cmp	r3, #1
 800892e:	d0e0      	beq.n	80088f2 <USBH_MSC_Write+0x84>
    }
  }
  MSC_Handle->state = MSC_IDLE;
 8008930:	697b      	ldr	r3, [r7, #20]
 8008932:	2201      	movs	r2, #1
 8008934:	731a      	strb	r2, [r3, #12]
  return USBH_OK;
 8008936:	2300      	movs	r3, #0
}
 8008938:	4618      	mov	r0, r3
 800893a:	3718      	adds	r7, #24
 800893c:	46bd      	mov	sp, r7
 800893e:	bd80      	pop	{r7, pc}

08008940 <USBH_MSC_BOT_REQ_Reset>:
  *         The function the MSC BOT Reset request.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_Reset(USBH_HandleTypeDef *phost)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b082      	sub	sp, #8
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]

  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2221      	movs	r2, #33	; 0x21
 800894c:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_BOT_RESET;
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	22ff      	movs	r2, #255	; 0xff
 8008952:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	2200      	movs	r2, #0
 8008958:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2200      	movs	r2, #0
 800895e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 0U;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, NULL, 0U);
 8008966:	2200      	movs	r2, #0
 8008968:	2100      	movs	r1, #0
 800896a:	6878      	ldr	r0, [r7, #4]
 800896c:	f001 fea6 	bl	800a6bc <USBH_CtlReq>
 8008970:	4603      	mov	r3, r0
}
 8008972:	4618      	mov	r0, r3
 8008974:	3708      	adds	r7, #8
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}

0800897a <USBH_MSC_BOT_REQ_GetMaxLUN>:
  * @param  phost: Host handle
  * @param  Maxlun: pointer to Maxlun variable
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_REQ_GetMaxLUN(USBH_HandleTypeDef *phost, uint8_t *Maxlun)
{
 800897a:	b580      	push	{r7, lr}
 800897c:	b082      	sub	sp, #8
 800897e:	af00      	add	r7, sp, #0
 8008980:	6078      	str	r0, [r7, #4]
 8008982:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	22a1      	movs	r2, #161	; 0xa1
 8008988:	741a      	strb	r2, [r3, #16]
                                         | USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = USB_REQ_GET_MAX_LUN;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	22fe      	movs	r2, #254	; 0xfe
 800898e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	2200      	movs	r2, #0
 8008994:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2200      	movs	r2, #0
 800899a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = 1U;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2201      	movs	r2, #1
 80089a0:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, Maxlun, 1U);
 80089a2:	2201      	movs	r2, #1
 80089a4:	6839      	ldr	r1, [r7, #0]
 80089a6:	6878      	ldr	r0, [r7, #4]
 80089a8:	f001 fe88 	bl	800a6bc <USBH_CtlReq>
 80089ac:	4603      	mov	r3, r0
}
 80089ae:	4618      	mov	r0, r3
 80089b0:	3708      	adds	r7, #8
 80089b2:	46bd      	mov	sp, r7
 80089b4:	bd80      	pop	{r7, pc}
	...

080089b8 <USBH_MSC_BOT_Init>:
  *         The function Initializes the BOT protocol.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Init(USBH_HandleTypeDef *phost)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b085      	sub	sp, #20
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80089c6:	69db      	ldr	r3, [r3, #28]
 80089c8:	60fb      	str	r3, [r7, #12]

  MSC_Handle->hbot.cbw.field.Signature = BOT_CBW_SIGNATURE;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	4a09      	ldr	r2, [pc, #36]	; (80089f4 <USBH_MSC_BOT_Init+0x3c>)
 80089ce:	655a      	str	r2, [r3, #84]	; 0x54
  MSC_Handle->hbot.cbw.field.Tag = BOT_CBW_TAG;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	4a09      	ldr	r2, [pc, #36]	; (80089f8 <USBH_MSC_BOT_Init+0x40>)
 80089d4:	659a      	str	r2, [r3, #88]	; 0x58
  MSC_Handle->hbot.state = BOT_SEND_CBW;
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2201      	movs	r2, #1
 80089da:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	2201      	movs	r2, #1
 80089e2:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52

  return USBH_OK;
 80089e6:	2300      	movs	r3, #0
}
 80089e8:	4618      	mov	r0, r3
 80089ea:	3714      	adds	r7, #20
 80089ec:	46bd      	mov	sp, r7
 80089ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089f2:	4770      	bx	lr
 80089f4:	43425355 	.word	0x43425355
 80089f8:	20304050 	.word	0x20304050

080089fc <USBH_MSC_BOT_Process>:
  * @param  phost: Host handle
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_BOT_Process(USBH_HandleTypeDef *phost, uint8_t lun)
{
 80089fc:	b580      	push	{r7, lr}
 80089fe:	b088      	sub	sp, #32
 8008a00:	af02      	add	r7, sp, #8
 8008a02:	6078      	str	r0, [r7, #4]
 8008a04:	460b      	mov	r3, r1
 8008a06:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef   status = USBH_BUSY;
 8008a08:	2301      	movs	r3, #1
 8008a0a:	75fb      	strb	r3, [r7, #23]
  USBH_StatusTypeDef   error  = USBH_BUSY;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	75bb      	strb	r3, [r7, #22]
  BOT_CSWStatusTypeDef CSW_Status = BOT_CSW_CMD_FAILED;
 8008a10:	2301      	movs	r3, #1
 8008a12:	757b      	strb	r3, [r7, #21]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008a14:	2300      	movs	r3, #0
 8008a16:	753b      	strb	r3, [r7, #20]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008a1e:	69db      	ldr	r3, [r3, #28]
 8008a20:	613b      	str	r3, [r7, #16]
  uint8_t toggle = 0U;
 8008a22:	2300      	movs	r3, #0
 8008a24:	73fb      	strb	r3, [r7, #15]

  switch (MSC_Handle->hbot.state)
 8008a26:	693b      	ldr	r3, [r7, #16]
 8008a28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008a2c:	3b01      	subs	r3, #1
 8008a2e:	2b0a      	cmp	r3, #10
 8008a30:	f200 819e 	bhi.w	8008d70 <USBH_MSC_BOT_Process+0x374>
 8008a34:	a201      	add	r2, pc, #4	; (adr r2, 8008a3c <USBH_MSC_BOT_Process+0x40>)
 8008a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a3a:	bf00      	nop
 8008a3c:	08008a69 	.word	0x08008a69
 8008a40:	08008a91 	.word	0x08008a91
 8008a44:	08008afb 	.word	0x08008afb
 8008a48:	08008b19 	.word	0x08008b19
 8008a4c:	08008b9d 	.word	0x08008b9d
 8008a50:	08008bbf 	.word	0x08008bbf
 8008a54:	08008c57 	.word	0x08008c57
 8008a58:	08008c73 	.word	0x08008c73
 8008a5c:	08008cc5 	.word	0x08008cc5
 8008a60:	08008cf5 	.word	0x08008cf5
 8008a64:	08008d57 	.word	0x08008d57
  {
    case BOT_SEND_CBW:
      MSC_Handle->hbot.cbw.field.LUN = lun;
 8008a68:	693b      	ldr	r3, [r7, #16]
 8008a6a:	78fa      	ldrb	r2, [r7, #3]
 8008a6c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
      MSC_Handle->hbot.state = BOT_SEND_CBW_WAIT;
 8008a70:	693b      	ldr	r3, [r7, #16]
 8008a72:	2202      	movs	r2, #2
 8008a74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.cbw.data,
 8008a78:	693b      	ldr	r3, [r7, #16]
 8008a7a:	f103 0154 	add.w	r1, r3, #84	; 0x54
 8008a7e:	693b      	ldr	r3, [r7, #16]
 8008a80:	795b      	ldrb	r3, [r3, #5]
 8008a82:	2201      	movs	r2, #1
 8008a84:	9200      	str	r2, [sp, #0]
 8008a86:	221f      	movs	r2, #31
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f002 f826 	bl	800aada <USBH_BulkSendData>
                              BOT_CBW_LENGTH, MSC_Handle->OutPipe, 1U);

      break;
 8008a8e:	e17e      	b.n	8008d8e <USBH_MSC_BOT_Process+0x392>

    case BOT_SEND_CBW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008a90:	693b      	ldr	r3, [r7, #16]
 8008a92:	795b      	ldrb	r3, [r3, #5]
 8008a94:	4619      	mov	r1, r3
 8008a96:	6878      	ldr	r0, [r7, #4]
 8008a98:	f004 feda 	bl	800d850 <USBH_LL_GetURBState>
 8008a9c:	4603      	mov	r3, r0
 8008a9e:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008aa0:	7d3b      	ldrb	r3, [r7, #20]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d118      	bne.n	8008ad8 <USBH_MSC_BOT_Process+0xdc>
      {
        if (MSC_Handle->hbot.cbw.field.DataTransferLength != 0U)
 8008aa6:	693b      	ldr	r3, [r7, #16]
 8008aa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00f      	beq.n	8008ace <USBH_MSC_BOT_Process+0xd2>
        {
          /* If there is Data Transfer Stage */
          if (((MSC_Handle->hbot.cbw.field.Flags) & USB_REQ_DIR_MASK) == USB_D2H)
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
 8008ab4:	b25b      	sxtb	r3, r3
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	da04      	bge.n	8008ac4 <USBH_MSC_BOT_Process+0xc8>
          {
            /* Data Direction is IN */
            MSC_Handle->hbot.state = BOT_DATA_IN;
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	2203      	movs	r2, #3
 8008abe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008ac2:	e157      	b.n	8008d74 <USBH_MSC_BOT_Process+0x378>
            MSC_Handle->hbot.state = BOT_DATA_OUT;
 8008ac4:	693b      	ldr	r3, [r7, #16]
 8008ac6:	2205      	movs	r2, #5
 8008ac8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008acc:	e152      	b.n	8008d74 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008ace:	693b      	ldr	r3, [r7, #16]
 8008ad0:	2207      	movs	r2, #7
 8008ad2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008ad6:	e14d      	b.n	8008d74 <USBH_MSC_BOT_Process+0x378>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008ad8:	7d3b      	ldrb	r3, [r7, #20]
 8008ada:	2b02      	cmp	r3, #2
 8008adc:	d104      	bne.n	8008ae8 <USBH_MSC_BOT_Process+0xec>
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008ade:	693b      	ldr	r3, [r7, #16]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008ae6:	e145      	b.n	8008d74 <USBH_MSC_BOT_Process+0x378>
        if (URB_Status == USBH_URB_STALL)
 8008ae8:	7d3b      	ldrb	r3, [r7, #20]
 8008aea:	2b05      	cmp	r3, #5
 8008aec:	f040 8142 	bne.w	8008d74 <USBH_MSC_BOT_Process+0x378>
          MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008af0:	693b      	ldr	r3, [r7, #16]
 8008af2:	220a      	movs	r2, #10
 8008af4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008af8:	e13c      	b.n	8008d74 <USBH_MSC_BOT_Process+0x378>

    case BOT_DATA_IN:
      /* Send first packet */
      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008afa:	693b      	ldr	r3, [r7, #16]
 8008afc:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	895a      	ldrh	r2, [r3, #10]
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	791b      	ldrb	r3, [r3, #4]
 8008b08:	6878      	ldr	r0, [r7, #4]
 8008b0a:	f002 f80b 	bl	800ab24 <USBH_BulkReceiveData>
                                 MSC_Handle->InEpSize, MSC_Handle->InPipe);

      MSC_Handle->hbot.state = BOT_DATA_IN_WAIT;
 8008b0e:	693b      	ldr	r3, [r7, #16]
 8008b10:	2204      	movs	r2, #4
 8008b12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      break;
 8008b16:	e13a      	b.n	8008d8e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008b18:	693b      	ldr	r3, [r7, #16]
 8008b1a:	791b      	ldrb	r3, [r3, #4]
 8008b1c:	4619      	mov	r1, r3
 8008b1e:	6878      	ldr	r0, [r7, #4]
 8008b20:	f004 fe96 	bl	800d850 <USBH_LL_GetURBState>
 8008b24:	4603      	mov	r3, r0
 8008b26:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008b28:	7d3b      	ldrb	r3, [r7, #20]
 8008b2a:	2b01      	cmp	r3, #1
 8008b2c:	d12d      	bne.n	8008b8a <USBH_MSC_BOT_Process+0x18e>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->InEpSize)
 8008b2e:	693b      	ldr	r3, [r7, #16]
 8008b30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b32:	693a      	ldr	r2, [r7, #16]
 8008b34:	8952      	ldrh	r2, [r2, #10]
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d910      	bls.n	8008b5c <USBH_MSC_BOT_Process+0x160>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->InEpSize;
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b40:	693a      	ldr	r2, [r7, #16]
 8008b42:	8952      	ldrh	r2, [r2, #10]
 8008b44:	441a      	add	r2, r3
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->InEpSize;
 8008b4c:	693b      	ldr	r3, [r7, #16]
 8008b4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b50:	693a      	ldr	r2, [r7, #16]
 8008b52:	8952      	ldrh	r2, [r2, #10]
 8008b54:	1a9a      	subs	r2, r3, r2
 8008b56:	693b      	ldr	r3, [r7, #16]
 8008b58:	65da      	str	r2, [r3, #92]	; 0x5c
 8008b5a:	e002      	b.n	8008b62 <USBH_MSC_BOT_Process+0x166>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008b5c:	693b      	ldr	r3, [r7, #16]
 8008b5e:	2200      	movs	r2, #0
 8008b60:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Received */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008b62:	693b      	ldr	r3, [r7, #16]
 8008b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d00a      	beq.n	8008b80 <USBH_MSC_BOT_Process+0x184>
        {
          /* Send next packet */
          (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.pbuf,
 8008b6a:	693b      	ldr	r3, [r7, #16]
 8008b6c:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008b70:	693b      	ldr	r3, [r7, #16]
 8008b72:	895a      	ldrh	r2, [r3, #10]
 8008b74:	693b      	ldr	r3, [r7, #16]
 8008b76:	791b      	ldrb	r3, [r3, #4]
 8008b78:	6878      	ldr	r0, [r7, #4]
 8008b7a:	f001 ffd3 	bl	800ab24 <USBH_BulkReceiveData>
#endif
      }
      else
      {
      }
      break;
 8008b7e:	e0fb      	b.n	8008d78 <USBH_MSC_BOT_Process+0x37c>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	2207      	movs	r2, #7
 8008b84:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008b88:	e0f6      	b.n	8008d78 <USBH_MSC_BOT_Process+0x37c>
      else if (URB_Status == USBH_URB_STALL)
 8008b8a:	7d3b      	ldrb	r3, [r7, #20]
 8008b8c:	2b05      	cmp	r3, #5
 8008b8e:	f040 80f3 	bne.w	8008d78 <USBH_MSC_BOT_Process+0x37c>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	2209      	movs	r2, #9
 8008b96:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008b9a:	e0ed      	b.n	8008d78 <USBH_MSC_BOT_Process+0x37c>

    case BOT_DATA_OUT:

      (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008b9c:	693b      	ldr	r3, [r7, #16]
 8008b9e:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008ba2:	693b      	ldr	r3, [r7, #16]
 8008ba4:	891a      	ldrh	r2, [r3, #8]
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	795b      	ldrb	r3, [r3, #5]
 8008baa:	2001      	movs	r0, #1
 8008bac:	9000      	str	r0, [sp, #0]
 8008bae:	6878      	ldr	r0, [r7, #4]
 8008bb0:	f001 ff93 	bl	800aada <USBH_BulkSendData>
                              MSC_Handle->OutEpSize, MSC_Handle->OutPipe, 1U);

      MSC_Handle->hbot.state  = BOT_DATA_OUT_WAIT;
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	2206      	movs	r2, #6
 8008bb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008bbc:	e0e7      	b.n	8008d8e <USBH_MSC_BOT_Process+0x392>

    case BOT_DATA_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->OutPipe);
 8008bbe:	693b      	ldr	r3, [r7, #16]
 8008bc0:	795b      	ldrb	r3, [r3, #5]
 8008bc2:	4619      	mov	r1, r3
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f004 fe43 	bl	800d850 <USBH_LL_GetURBState>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	753b      	strb	r3, [r7, #20]

      if (URB_Status == USBH_URB_DONE)
 8008bce:	7d3b      	ldrb	r3, [r7, #20]
 8008bd0:	2b01      	cmp	r3, #1
 8008bd2:	d12f      	bne.n	8008c34 <USBH_MSC_BOT_Process+0x238>
      {
        /* Adjust Data pointer and data length */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > MSC_Handle->OutEpSize)
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bd8:	693a      	ldr	r2, [r7, #16]
 8008bda:	8912      	ldrh	r2, [r2, #8]
 8008bdc:	4293      	cmp	r3, r2
 8008bde:	d910      	bls.n	8008c02 <USBH_MSC_BOT_Process+0x206>
        {
          MSC_Handle->hbot.pbuf += MSC_Handle->OutEpSize;
 8008be0:	693b      	ldr	r3, [r7, #16]
 8008be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008be6:	693a      	ldr	r2, [r7, #16]
 8008be8:	8912      	ldrh	r2, [r2, #8]
 8008bea:	441a      	add	r2, r3
 8008bec:	693b      	ldr	r3, [r7, #16]
 8008bee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          MSC_Handle->hbot.cbw.field.DataTransferLength -= MSC_Handle->OutEpSize;
 8008bf2:	693b      	ldr	r3, [r7, #16]
 8008bf4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008bf6:	693a      	ldr	r2, [r7, #16]
 8008bf8:	8912      	ldrh	r2, [r2, #8]
 8008bfa:	1a9a      	subs	r2, r3, r2
 8008bfc:	693b      	ldr	r3, [r7, #16]
 8008bfe:	65da      	str	r2, [r3, #92]	; 0x5c
 8008c00:	e002      	b.n	8008c08 <USBH_MSC_BOT_Process+0x20c>
        }
        else
        {
          MSC_Handle->hbot.cbw.field.DataTransferLength = 0U;
 8008c02:	693b      	ldr	r3, [r7, #16]
 8008c04:	2200      	movs	r2, #0
 8008c06:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* More Data To be Sent */
        if (MSC_Handle->hbot.cbw.field.DataTransferLength > 0U)
 8008c08:	693b      	ldr	r3, [r7, #16]
 8008c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00c      	beq.n	8008c2a <USBH_MSC_BOT_Process+0x22e>
        {
          (void)USBH_BulkSendData(phost, MSC_Handle->hbot.pbuf,
 8008c10:	693b      	ldr	r3, [r7, #16]
 8008c12:	f8d3 108c 	ldr.w	r1, [r3, #140]	; 0x8c
 8008c16:	693b      	ldr	r3, [r7, #16]
 8008c18:	891a      	ldrh	r2, [r3, #8]
 8008c1a:	693b      	ldr	r3, [r7, #16]
 8008c1c:	795b      	ldrb	r3, [r3, #5]
 8008c1e:	2001      	movs	r0, #1
 8008c20:	9000      	str	r0, [sp, #0]
 8008c22:	6878      	ldr	r0, [r7, #4]
 8008c24:	f001 ff59 	bl	800aada <USBH_BulkSendData>
#endif
      }
      else
      {
      }
      break;
 8008c28:	e0a8      	b.n	8008d7c <USBH_MSC_BOT_Process+0x380>
          MSC_Handle->hbot.state  = BOT_RECEIVE_CSW;
 8008c2a:	693b      	ldr	r3, [r7, #16]
 8008c2c:	2207      	movs	r2, #7
 8008c2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008c32:	e0a3      	b.n	8008d7c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008c34:	7d3b      	ldrb	r3, [r7, #20]
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d104      	bne.n	8008c44 <USBH_MSC_BOT_Process+0x248>
        MSC_Handle->hbot.state  = BOT_DATA_OUT;
 8008c3a:	693b      	ldr	r3, [r7, #16]
 8008c3c:	2205      	movs	r2, #5
 8008c3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008c42:	e09b      	b.n	8008d7c <USBH_MSC_BOT_Process+0x380>
      else if (URB_Status == USBH_URB_STALL)
 8008c44:	7d3b      	ldrb	r3, [r7, #20]
 8008c46:	2b05      	cmp	r3, #5
 8008c48:	f040 8098 	bne.w	8008d7c <USBH_MSC_BOT_Process+0x380>
        MSC_Handle->hbot.state  = BOT_ERROR_OUT;
 8008c4c:	693b      	ldr	r3, [r7, #16]
 8008c4e:	220a      	movs	r2, #10
 8008c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008c54:	e092      	b.n	8008d7c <USBH_MSC_BOT_Process+0x380>

    case BOT_RECEIVE_CSW:

      (void)USBH_BulkReceiveData(phost, MSC_Handle->hbot.csw.data,
 8008c56:	693b      	ldr	r3, [r7, #16]
 8008c58:	f103 0178 	add.w	r1, r3, #120	; 0x78
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	791b      	ldrb	r3, [r3, #4]
 8008c60:	220d      	movs	r2, #13
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f001 ff5e 	bl	800ab24 <USBH_BulkReceiveData>
                                 BOT_CSW_LENGTH, MSC_Handle->InPipe);

      MSC_Handle->hbot.state  = BOT_RECEIVE_CSW_WAIT;
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	2208      	movs	r2, #8
 8008c6c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008c70:	e08d      	b.n	8008d8e <USBH_MSC_BOT_Process+0x392>

    case BOT_RECEIVE_CSW_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, MSC_Handle->InPipe);
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	791b      	ldrb	r3, [r3, #4]
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f004 fde9 	bl	800d850 <USBH_LL_GetURBState>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	753b      	strb	r3, [r7, #20]

      /* Decode CSW */
      if (URB_Status == USBH_URB_DONE)
 8008c82:	7d3b      	ldrb	r3, [r7, #20]
 8008c84:	2b01      	cmp	r3, #1
 8008c86:	d115      	bne.n	8008cb4 <USBH_MSC_BOT_Process+0x2b8>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.cmd_state = BOT_CMD_SEND;
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
        CSW_Status = USBH_MSC_DecodeCSW(phost);
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 f8a9 	bl	8008df0 <USBH_MSC_DecodeCSW>
 8008c9e:	4603      	mov	r3, r0
 8008ca0:	757b      	strb	r3, [r7, #21]

        if (CSW_Status == BOT_CSW_CMD_PASSED)
 8008ca2:	7d7b      	ldrb	r3, [r7, #21]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d102      	bne.n	8008cae <USBH_MSC_BOT_Process+0x2b2>
        {
          status = USBH_OK;
 8008ca8:	2300      	movs	r3, #0
 8008caa:	75fb      	strb	r3, [r7, #23]
#endif
      }
      else
      {
      }
      break;
 8008cac:	e068      	b.n	8008d80 <USBH_MSC_BOT_Process+0x384>
          status = USBH_FAIL;
 8008cae:	2302      	movs	r3, #2
 8008cb0:	75fb      	strb	r3, [r7, #23]
      break;
 8008cb2:	e065      	b.n	8008d80 <USBH_MSC_BOT_Process+0x384>
      else if (URB_Status == USBH_URB_STALL)
 8008cb4:	7d3b      	ldrb	r3, [r7, #20]
 8008cb6:	2b05      	cmp	r3, #5
 8008cb8:	d162      	bne.n	8008d80 <USBH_MSC_BOT_Process+0x384>
        MSC_Handle->hbot.state  = BOT_ERROR_IN;
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	2209      	movs	r2, #9
 8008cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008cc2:	e05d      	b.n	8008d80 <USBH_MSC_BOT_Process+0x384>

    case BOT_ERROR_IN:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_IN);
 8008cc4:	78fb      	ldrb	r3, [r7, #3]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	4619      	mov	r1, r3
 8008cca:	6878      	ldr	r0, [r7, #4]
 8008ccc:	f000 f864 	bl	8008d98 <USBH_MSC_BOT_Abort>
 8008cd0:	4603      	mov	r3, r0
 8008cd2:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008cd4:	7dbb      	ldrb	r3, [r7, #22]
 8008cd6:	2b00      	cmp	r3, #0
 8008cd8:	d104      	bne.n	8008ce4 <USBH_MSC_BOT_Process+0x2e8>
      {
        MSC_Handle->hbot.state = BOT_RECEIVE_CSW;
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	2207      	movs	r2, #7
 8008cde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
      }
      else
      {
      }
      break;
 8008ce2:	e04f      	b.n	8008d84 <USBH_MSC_BOT_Process+0x388>
      else if (error == USBH_UNRECOVERED_ERROR)
 8008ce4:	7dbb      	ldrb	r3, [r7, #22]
 8008ce6:	2b04      	cmp	r3, #4
 8008ce8:	d14c      	bne.n	8008d84 <USBH_MSC_BOT_Process+0x388>
        MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	220b      	movs	r2, #11
 8008cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008cf2:	e047      	b.n	8008d84 <USBH_MSC_BOT_Process+0x388>

    case BOT_ERROR_OUT:
      error = USBH_MSC_BOT_Abort(phost, lun, BOT_DIR_OUT);
 8008cf4:	78fb      	ldrb	r3, [r7, #3]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	4619      	mov	r1, r3
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f000 f84c 	bl	8008d98 <USBH_MSC_BOT_Abort>
 8008d00:	4603      	mov	r3, r0
 8008d02:	75bb      	strb	r3, [r7, #22]

      if (error == USBH_OK)
 8008d04:	7dbb      	ldrb	r3, [r7, #22]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	d11d      	bne.n	8008d46 <USBH_MSC_BOT_Process+0x34a>
      {

        toggle = USBH_LL_GetToggle(phost, MSC_Handle->OutPipe);
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	795b      	ldrb	r3, [r3, #5]
 8008d0e:	4619      	mov	r1, r3
 8008d10:	6878      	ldr	r0, [r7, #4]
 8008d12:	f004 fdee 	bl	800d8f2 <USBH_LL_GetToggle>
 8008d16:	4603      	mov	r3, r0
 8008d18:	73fb      	strb	r3, [r7, #15]
        (void)USBH_LL_SetToggle(phost, MSC_Handle->OutPipe, 1U - toggle);
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	7959      	ldrb	r1, [r3, #5]
 8008d1e:	7bfb      	ldrb	r3, [r7, #15]
 8008d20:	f1c3 0301 	rsb	r3, r3, #1
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	461a      	mov	r2, r3
 8008d28:	6878      	ldr	r0, [r7, #4]
 8008d2a:	f004 fdb2 	bl	800d892 <USBH_LL_SetToggle>
        (void)USBH_LL_SetToggle(phost, MSC_Handle->InPipe, 0U);
 8008d2e:	693b      	ldr	r3, [r7, #16]
 8008d30:	791b      	ldrb	r3, [r3, #4]
 8008d32:	2200      	movs	r2, #0
 8008d34:	4619      	mov	r1, r3
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f004 fdab 	bl	800d892 <USBH_LL_SetToggle>
        MSC_Handle->hbot.state = BOT_ERROR_IN;
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	2209      	movs	r2, #9
 8008d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        if (error == USBH_UNRECOVERED_ERROR)
        {
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
        }
      }
      break;
 8008d44:	e020      	b.n	8008d88 <USBH_MSC_BOT_Process+0x38c>
        if (error == USBH_UNRECOVERED_ERROR)
 8008d46:	7dbb      	ldrb	r3, [r7, #22]
 8008d48:	2b04      	cmp	r3, #4
 8008d4a:	d11d      	bne.n	8008d88 <USBH_MSC_BOT_Process+0x38c>
          MSC_Handle->hbot.state = BOT_UNRECOVERED_ERROR;
 8008d4c:	693b      	ldr	r3, [r7, #16]
 8008d4e:	220b      	movs	r2, #11
 8008d50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      break;
 8008d54:	e018      	b.n	8008d88 <USBH_MSC_BOT_Process+0x38c>


    case BOT_UNRECOVERED_ERROR:
      status = USBH_MSC_BOT_REQ_Reset(phost);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f7ff fdf2 	bl	8008940 <USBH_MSC_BOT_REQ_Reset>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	75fb      	strb	r3, [r7, #23]
      if (status == USBH_OK)
 8008d60:	7dfb      	ldrb	r3, [r7, #23]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d112      	bne.n	8008d8c <USBH_MSC_BOT_Process+0x390>
      {
        MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008d66:	693b      	ldr	r3, [r7, #16]
 8008d68:	2201      	movs	r2, #1
 8008d6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      }
      break;
 8008d6e:	e00d      	b.n	8008d8c <USBH_MSC_BOT_Process+0x390>

    default:
      break;
 8008d70:	bf00      	nop
 8008d72:	e00c      	b.n	8008d8e <USBH_MSC_BOT_Process+0x392>
      break;
 8008d74:	bf00      	nop
 8008d76:	e00a      	b.n	8008d8e <USBH_MSC_BOT_Process+0x392>
      break;
 8008d78:	bf00      	nop
 8008d7a:	e008      	b.n	8008d8e <USBH_MSC_BOT_Process+0x392>
      break;
 8008d7c:	bf00      	nop
 8008d7e:	e006      	b.n	8008d8e <USBH_MSC_BOT_Process+0x392>
      break;
 8008d80:	bf00      	nop
 8008d82:	e004      	b.n	8008d8e <USBH_MSC_BOT_Process+0x392>
      break;
 8008d84:	bf00      	nop
 8008d86:	e002      	b.n	8008d8e <USBH_MSC_BOT_Process+0x392>
      break;
 8008d88:	bf00      	nop
 8008d8a:	e000      	b.n	8008d8e <USBH_MSC_BOT_Process+0x392>
      break;
 8008d8c:	bf00      	nop
  }
  return status;
 8008d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	3718      	adds	r7, #24
 8008d94:	46bd      	mov	sp, r7
 8008d96:	bd80      	pop	{r7, pc}

08008d98 <USBH_MSC_BOT_Abort>:
  * @param  lun: Logical Unit Number
  * @param  dir: direction (0: out / 1 : in)
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_MSC_BOT_Abort(USBH_HandleTypeDef *phost, uint8_t lun, uint8_t dir)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b084      	sub	sp, #16
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	460b      	mov	r3, r1
 8008da2:	70fb      	strb	r3, [r7, #3]
 8008da4:	4613      	mov	r3, r2
 8008da6:	70bb      	strb	r3, [r7, #2]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(lun);

  USBH_StatusTypeDef status = USBH_FAIL;
 8008da8:	2302      	movs	r3, #2
 8008daa:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	60bb      	str	r3, [r7, #8]

  switch (dir)
 8008db6:	78bb      	ldrb	r3, [r7, #2]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d002      	beq.n	8008dc2 <USBH_MSC_BOT_Abort+0x2a>
 8008dbc:	2b01      	cmp	r3, #1
 8008dbe:	d009      	beq.n	8008dd4 <USBH_MSC_BOT_Abort+0x3c>
      /*send ClrFeature on Bulk OUT endpoint */
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
      break;

    default:
      break;
 8008dc0:	e011      	b.n	8008de6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->InEp);
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	79db      	ldrb	r3, [r3, #7]
 8008dc6:	4619      	mov	r1, r3
 8008dc8:	6878      	ldr	r0, [r7, #4]
 8008dca:	f001 f9a8 	bl	800a11e <USBH_ClrFeature>
 8008dce:	4603      	mov	r3, r0
 8008dd0:	73fb      	strb	r3, [r7, #15]
      break;
 8008dd2:	e008      	b.n	8008de6 <USBH_MSC_BOT_Abort+0x4e>
      status = USBH_ClrFeature(phost, MSC_Handle->OutEp);
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	799b      	ldrb	r3, [r3, #6]
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f001 f99f 	bl	800a11e <USBH_ClrFeature>
 8008de0:	4603      	mov	r3, r0
 8008de2:	73fb      	strb	r3, [r7, #15]
      break;
 8008de4:	bf00      	nop
  }
  return status;
 8008de6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008de8:	4618      	mov	r0, r3
 8008dea:	3710      	adds	r7, #16
 8008dec:	46bd      	mov	sp, r7
 8008dee:	bd80      	pop	{r7, pc}

08008df0 <USBH_MSC_DecodeCSW>:
  *     2. the CSW is 13 (Dh) bytes in length,
  *     3. dCSWTag matches the dCBWTag from the corresponding CBW.
  */

static BOT_CSWStatusTypeDef USBH_MSC_DecodeCSW(USBH_HandleTypeDef *phost)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b084      	sub	sp, #16
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008dfe:	69db      	ldr	r3, [r3, #28]
 8008e00:	60bb      	str	r3, [r7, #8]
  BOT_CSWStatusTypeDef status = BOT_CSW_CMD_FAILED;
 8008e02:	2301      	movs	r3, #1
 8008e04:	73fb      	strb	r3, [r7, #15]

  /*Checking if the transfer length is different than 13*/
  if (USBH_LL_GetLastXferSize(phost, MSC_Handle->InPipe) != BOT_CSW_LENGTH)
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	791b      	ldrb	r3, [r3, #4]
 8008e0a:	4619      	mov	r1, r3
 8008e0c:	6878      	ldr	r0, [r7, #4]
 8008e0e:	f004 fc8d 	bl	800d72c <USBH_LL_GetLastXferSize>
 8008e12:	4603      	mov	r3, r0
 8008e14:	2b0d      	cmp	r3, #13
 8008e16:	d002      	beq.n	8008e1e <USBH_MSC_DecodeCSW+0x2e>
    Device intends to transfer no data)
    (11) Ho > Do  (Host expects to send data to the device,
    Device intends to receive data from the host)*/


    status = BOT_CSW_PHASE_ERROR;
 8008e18:	2302      	movs	r3, #2
 8008e1a:	73fb      	strb	r3, [r7, #15]
 8008e1c:	e024      	b.n	8008e68 <USBH_MSC_DecodeCSW+0x78>
  else
  {
    /* CSW length is Correct */

    /* Check validity of the CSW Signature and CSWStatus */
    if (MSC_Handle->hbot.csw.field.Signature == BOT_CSW_SIGNATURE)
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008e22:	4a14      	ldr	r2, [pc, #80]	; (8008e74 <USBH_MSC_DecodeCSW+0x84>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d11d      	bne.n	8008e64 <USBH_MSC_DecodeCSW+0x74>
    {
      /* Check Condition 1. dCSWSignature is equal to 53425355h */

      if (MSC_Handle->hbot.csw.field.Tag == MSC_Handle->hbot.cbw.field.Tag)
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8008e2c:	68bb      	ldr	r3, [r7, #8]
 8008e2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e30:	429a      	cmp	r2, r3
 8008e32:	d119      	bne.n	8008e68 <USBH_MSC_DecodeCSW+0x78>
      {
        /* Check Condition 3. dCSWTag matches the dCBWTag from the
        corresponding CBW */

        if (MSC_Handle->hbot.csw.field.Status == 0U)
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d102      	bne.n	8008e44 <USBH_MSC_DecodeCSW+0x54>
          (12) Ho = Do (Host expects to send data to the device,
          Device intends to receive data from the host)

          */

          status = BOT_CSW_CMD_PASSED;
 8008e3e:	2300      	movs	r3, #0
 8008e40:	73fb      	strb	r3, [r7, #15]
 8008e42:	e011      	b.n	8008e68 <USBH_MSC_DecodeCSW+0x78>
        }
        else if (MSC_Handle->hbot.csw.field.Status == 1U)
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e4a:	2b01      	cmp	r3, #1
 8008e4c:	d102      	bne.n	8008e54 <USBH_MSC_DecodeCSW+0x64>
        {
          status = BOT_CSW_CMD_FAILED;
 8008e4e:	2301      	movs	r3, #1
 8008e50:	73fb      	strb	r3, [r7, #15]
 8008e52:	e009      	b.n	8008e68 <USBH_MSC_DecodeCSW+0x78>
        }

        else if (MSC_Handle->hbot.csw.field.Status == 2U)
 8008e54:	68bb      	ldr	r3, [r7, #8]
 8008e56:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	d104      	bne.n	8008e68 <USBH_MSC_DecodeCSW+0x78>
          Di Device intends to send data to the host)
          (13) Ho < Do (Host expects to send data to the device,
          Device intends to receive data from the host)
          */

          status = BOT_CSW_PHASE_ERROR;
 8008e5e:	2302      	movs	r3, #2
 8008e60:	73fb      	strb	r3, [r7, #15]
 8008e62:	e001      	b.n	8008e68 <USBH_MSC_DecodeCSW+0x78>
    else
    {
      /* If the CSW Signature is not valid, We sall return the Phase Error to
      Upper Layers for Reset Recovery */

      status = BOT_CSW_PHASE_ERROR;
 8008e64:	2302      	movs	r3, #2
 8008e66:	73fb      	strb	r3, [r7, #15]
    }
  } /* CSW Length Check*/

  return status;
 8008e68:	7bfb      	ldrb	r3, [r7, #15]
}
 8008e6a:	4618      	mov	r0, r3
 8008e6c:	3710      	adds	r7, #16
 8008e6e:	46bd      	mov	sp, r7
 8008e70:	bd80      	pop	{r7, pc}
 8008e72:	bf00      	nop
 8008e74:	53425355 	.word	0x53425355

08008e78 <USBH_MSC_SCSI_TestUnitReady>:
  * @param  lun: Logical Unit Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_TestUnitReady(USBH_HandleTypeDef *phost,
                                               uint8_t lun)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b084      	sub	sp, #16
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	460b      	mov	r3, r1
 8008e82:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8008e84:	2302      	movs	r3, #2
 8008e86:	73fb      	strb	r3, [r7, #15]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008e8e:	69db      	ldr	r3, [r3, #28]
 8008e90:	60bb      	str	r3, [r7, #8]

  switch (MSC_Handle->hbot.cmd_state)
 8008e92:	68bb      	ldr	r3, [r7, #8]
 8008e94:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d002      	beq.n	8008ea2 <USBH_MSC_SCSI_TestUnitReady+0x2a>
 8008e9c:	2b02      	cmp	r3, #2
 8008e9e:	d021      	beq.n	8008ee4 <USBH_MSC_SCSI_TestUnitReady+0x6c>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8008ea0:	e028      	b.n	8008ef4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_MODE_TEST_UNIT_READY;
 8008ea2:	68bb      	ldr	r3, [r7, #8]
 8008ea4:	2200      	movs	r2, #0
 8008ea6:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8008ea8:	68bb      	ldr	r3, [r7, #8]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008eb0:	68bb      	ldr	r3, [r7, #8]
 8008eb2:	220a      	movs	r2, #10
 8008eb4:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008eb8:	68bb      	ldr	r3, [r7, #8]
 8008eba:	3363      	adds	r3, #99	; 0x63
 8008ebc:	2210      	movs	r2, #16
 8008ebe:	2100      	movs	r1, #0
 8008ec0:	4618      	mov	r0, r3
 8008ec2:	f004 fe39 	bl	800db38 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_TEST_UNIT_READY;
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008ed6:	68bb      	ldr	r3, [r7, #8]
 8008ed8:	2202      	movs	r2, #2
 8008eda:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      error = USBH_BUSY;
 8008ede:	2301      	movs	r3, #1
 8008ee0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ee2:	e007      	b.n	8008ef4 <USBH_MSC_SCSI_TestUnitReady+0x7c>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008ee4:	78fb      	ldrb	r3, [r7, #3]
 8008ee6:	4619      	mov	r1, r3
 8008ee8:	6878      	ldr	r0, [r7, #4]
 8008eea:	f7ff fd87 	bl	80089fc <USBH_MSC_BOT_Process>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	73fb      	strb	r3, [r7, #15]
      break;
 8008ef2:	bf00      	nop
  }

  return error;
 8008ef4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}

08008efe <USBH_MSC_SCSI_ReadCapacity>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_ReadCapacity(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_CapacityTypeDef *capacity)
{
 8008efe:	b580      	push	{r7, lr}
 8008f00:	b086      	sub	sp, #24
 8008f02:	af00      	add	r7, sp, #0
 8008f04:	60f8      	str	r0, [r7, #12]
 8008f06:	460b      	mov	r3, r1
 8008f08:	607a      	str	r2, [r7, #4]
 8008f0a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_BUSY ;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8008f16:	69db      	ldr	r3, [r3, #28]
 8008f18:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8008f1a:	693b      	ldr	r3, [r7, #16]
 8008f1c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8008f20:	2b01      	cmp	r3, #1
 8008f22:	d002      	beq.n	8008f2a <USBH_MSC_SCSI_ReadCapacity+0x2c>
 8008f24:	2b02      	cmp	r3, #2
 8008f26:	d027      	beq.n	8008f78 <USBH_MSC_SCSI_ReadCapacity+0x7a>
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
      }
      break;

    default:
      break;
 8008f28:	e05f      	b.n	8008fea <USBH_MSC_SCSI_ReadCapacity+0xec>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_READ_CAPACITY10;
 8008f2a:	693b      	ldr	r3, [r7, #16]
 8008f2c:	2208      	movs	r2, #8
 8008f2e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8008f30:	693b      	ldr	r3, [r7, #16]
 8008f32:	2280      	movs	r2, #128	; 0x80
 8008f34:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	220a      	movs	r2, #10
 8008f3c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	3363      	adds	r3, #99	; 0x63
 8008f44:	2210      	movs	r2, #16
 8008f46:	2100      	movs	r1, #0
 8008f48:	4618      	mov	r0, r3
 8008f4a:	f004 fdf5 	bl	800db38 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ_CAPACITY10;
 8008f4e:	693b      	ldr	r3, [r7, #16]
 8008f50:	2225      	movs	r2, #37	; 0x25
 8008f52:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8008f56:	693b      	ldr	r3, [r7, #16]
 8008f58:	2201      	movs	r2, #1
 8008f5a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8008f5e:	693b      	ldr	r3, [r7, #16]
 8008f60:	2202      	movs	r2, #2
 8008f62:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	f103 0210 	add.w	r2, r3, #16
 8008f6c:	693b      	ldr	r3, [r7, #16]
 8008f6e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8008f72:	2301      	movs	r3, #1
 8008f74:	75fb      	strb	r3, [r7, #23]
      break;
 8008f76:	e038      	b.n	8008fea <USBH_MSC_SCSI_ReadCapacity+0xec>
      error = USBH_MSC_BOT_Process(phost, lun);
 8008f78:	7afb      	ldrb	r3, [r7, #11]
 8008f7a:	4619      	mov	r1, r3
 8008f7c:	68f8      	ldr	r0, [r7, #12]
 8008f7e:	f7ff fd3d 	bl	80089fc <USBH_MSC_BOT_Process>
 8008f82:	4603      	mov	r3, r0
 8008f84:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 8008f86:	7dfb      	ldrb	r3, [r7, #23]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d12d      	bne.n	8008fe8 <USBH_MSC_SCSI_ReadCapacity+0xea>
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008f8c:	693b      	ldr	r3, [r7, #16]
 8008f8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f92:	3303      	adds	r3, #3
 8008f94:	781b      	ldrb	r3, [r3, #0]
 8008f96:	461a      	mov	r2, r3
 8008f98:	693b      	ldr	r3, [r7, #16]
 8008f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f9e:	3302      	adds	r3, #2
 8008fa0:	781b      	ldrb	r3, [r3, #0]
 8008fa2:	021b      	lsls	r3, r3, #8
 8008fa4:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fac:	3301      	adds	r3, #1
 8008fae:	781b      	ldrb	r3, [r3, #0]
 8008fb0:	041b      	lsls	r3, r3, #16
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008fb2:	431a      	orrs	r2, r3
                              ((uint32_t)MSC_Handle->hbot.pbuf[1] << 16U) | ((uint32_t)MSC_Handle->hbot.pbuf[0] << 24U);
 8008fb4:	693b      	ldr	r3, [r7, #16]
 8008fb6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fba:	781b      	ldrb	r3, [r3, #0]
 8008fbc:	061b      	lsls	r3, r3, #24
 8008fbe:	431a      	orrs	r2, r3
        capacity->block_nbr = MSC_Handle->hbot.pbuf[3] | ((uint32_t)MSC_Handle->hbot.pbuf[2] << 8U) | \
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	601a      	str	r2, [r3, #0]
        capacity->block_size = (uint16_t)(MSC_Handle->hbot.pbuf[7] | ((uint32_t)MSC_Handle->hbot.pbuf[6] << 8U));
 8008fc4:	693b      	ldr	r3, [r7, #16]
 8008fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fca:	3307      	adds	r3, #7
 8008fcc:	781b      	ldrb	r3, [r3, #0]
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	693b      	ldr	r3, [r7, #16]
 8008fd2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fd6:	3306      	adds	r3, #6
 8008fd8:	781b      	ldrb	r3, [r3, #0]
 8008fda:	b29b      	uxth	r3, r3
 8008fdc:	021b      	lsls	r3, r3, #8
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	4313      	orrs	r3, r2
 8008fe2:	b29a      	uxth	r2, r3
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	809a      	strh	r2, [r3, #4]
      break;
 8008fe8:	bf00      	nop
  }

  return error;
 8008fea:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3718      	adds	r7, #24
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <USBH_MSC_SCSI_Inquiry>:
  * @param  capacity: pointer to the inquiry structure
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_Inquiry(USBH_HandleTypeDef *phost, uint8_t lun,
                                         SCSI_StdInquiryDataTypeDef *inquiry)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b086      	sub	sp, #24
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	60f8      	str	r0, [r7, #12]
 8008ffc:	460b      	mov	r3, r1
 8008ffe:	607a      	str	r2, [r7, #4]
 8009000:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef error = USBH_FAIL;
 8009002:	2302      	movs	r3, #2
 8009004:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800900c:	69db      	ldr	r3, [r3, #28]
 800900e:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009010:	693b      	ldr	r3, [r7, #16]
 8009012:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009016:	2b01      	cmp	r3, #1
 8009018:	d002      	beq.n	8009020 <USBH_MSC_SCSI_Inquiry+0x2c>
 800901a:	2b02      	cmp	r3, #2
 800901c:	d03d      	beq.n	800909a <USBH_MSC_SCSI_Inquiry+0xa6>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
      }
      break;

    default:
      break;
 800901e:	e089      	b.n	8009134 <USBH_MSC_SCSI_Inquiry+0x140>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_INQUIRY;
 8009020:	693b      	ldr	r3, [r7, #16]
 8009022:	2224      	movs	r2, #36	; 0x24
 8009024:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009026:	693b      	ldr	r3, [r7, #16]
 8009028:	2280      	movs	r2, #128	; 0x80
 800902a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800902e:	693b      	ldr	r3, [r7, #16]
 8009030:	220a      	movs	r2, #10
 8009032:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_LENGTH);
 8009036:	693b      	ldr	r3, [r7, #16]
 8009038:	3363      	adds	r3, #99	; 0x63
 800903a:	220a      	movs	r2, #10
 800903c:	2100      	movs	r1, #0
 800903e:	4618      	mov	r0, r3
 8009040:	f004 fd7a 	bl	800db38 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_INQUIRY;
 8009044:	693b      	ldr	r3, [r7, #16]
 8009046:	2212      	movs	r2, #18
 8009048:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 800904c:	7afb      	ldrb	r3, [r7, #11]
 800904e:	015b      	lsls	r3, r3, #5
 8009050:	b2da      	uxtb	r2, r3
 8009052:	693b      	ldr	r3, [r7, #16]
 8009054:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 8009058:	693b      	ldr	r3, [r7, #16]
 800905a:	2200      	movs	r2, #0
 800905c:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 8009060:	693b      	ldr	r3, [r7, #16]
 8009062:	2200      	movs	r2, #0
 8009064:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = 0x24U;
 8009068:	693b      	ldr	r3, [r7, #16]
 800906a:	2224      	movs	r2, #36	; 0x24
 800906c:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 8009070:	693b      	ldr	r3, [r7, #16]
 8009072:	2200      	movs	r2, #0
 8009074:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	2201      	movs	r2, #1
 800907c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 8009080:	693b      	ldr	r3, [r7, #16]
 8009082:	2202      	movs	r2, #2
 8009084:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 8009088:	693b      	ldr	r3, [r7, #16]
 800908a:	f103 0210 	add.w	r2, r3, #16
 800908e:	693b      	ldr	r3, [r7, #16]
 8009090:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 8009094:	2301      	movs	r3, #1
 8009096:	75fb      	strb	r3, [r7, #23]
      break;
 8009098:	e04c      	b.n	8009134 <USBH_MSC_SCSI_Inquiry+0x140>
      error = USBH_MSC_BOT_Process(phost, lun);
 800909a:	7afb      	ldrb	r3, [r7, #11]
 800909c:	4619      	mov	r1, r3
 800909e:	68f8      	ldr	r0, [r7, #12]
 80090a0:	f7ff fcac 	bl	80089fc <USBH_MSC_BOT_Process>
 80090a4:	4603      	mov	r3, r0
 80090a6:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80090a8:	7dfb      	ldrb	r3, [r7, #23]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d141      	bne.n	8009132 <USBH_MSC_SCSI_Inquiry+0x13e>
        (void)USBH_memset(inquiry, 0, sizeof(SCSI_StdInquiryDataTypeDef));
 80090ae:	2222      	movs	r2, #34	; 0x22
 80090b0:	2100      	movs	r1, #0
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f004 fd40 	bl	800db38 <memset>
        inquiry->DeviceType = MSC_Handle->hbot.pbuf[0] & 0x1FU;
 80090b8:	693b      	ldr	r3, [r7, #16]
 80090ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090be:	781b      	ldrb	r3, [r3, #0]
 80090c0:	f003 031f 	and.w	r3, r3, #31
 80090c4:	b2da      	uxtb	r2, r3
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	705a      	strb	r2, [r3, #1]
        inquiry->PeripheralQualifier = MSC_Handle->hbot.pbuf[0] >> 5U;
 80090ca:	693b      	ldr	r3, [r7, #16]
 80090cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090d0:	781b      	ldrb	r3, [r3, #0]
 80090d2:	095b      	lsrs	r3, r3, #5
 80090d4:	b2da      	uxtb	r2, r3
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	701a      	strb	r2, [r3, #0]
        if (((uint32_t)MSC_Handle->hbot.pbuf[1] & 0x80U) == 0x80U)
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090e0:	3301      	adds	r3, #1
 80090e2:	781b      	ldrb	r3, [r3, #0]
 80090e4:	b25b      	sxtb	r3, r3
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	da03      	bge.n	80090f2 <USBH_MSC_SCSI_Inquiry+0xfe>
          inquiry->RemovableMedia = 1U;
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	2201      	movs	r2, #1
 80090ee:	709a      	strb	r2, [r3, #2]
 80090f0:	e002      	b.n	80090f8 <USBH_MSC_SCSI_Inquiry+0x104>
          inquiry->RemovableMedia = 0U;
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2200      	movs	r2, #0
 80090f6:	709a      	strb	r2, [r3, #2]
        (void)USBH_memcpy(inquiry->vendor_id, &MSC_Handle->hbot.pbuf[8], 8U);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	1cd8      	adds	r0, r3, #3
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009102:	3308      	adds	r3, #8
 8009104:	2208      	movs	r2, #8
 8009106:	4619      	mov	r1, r3
 8009108:	f004 fd5a 	bl	800dbc0 <memcpy>
        (void)USBH_memcpy(inquiry->product_id, &MSC_Handle->hbot.pbuf[16], 16U);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f103 000c 	add.w	r0, r3, #12
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009118:	3310      	adds	r3, #16
 800911a:	2210      	movs	r2, #16
 800911c:	4619      	mov	r1, r3
 800911e:	f004 fd4f 	bl	800dbc0 <memcpy>
        (void)USBH_memcpy(inquiry->revision_id, &MSC_Handle->hbot.pbuf[32], 4U);
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	331d      	adds	r3, #29
 8009126:	693a      	ldr	r2, [r7, #16]
 8009128:	f8d2 208c 	ldr.w	r2, [r2, #140]	; 0x8c
 800912c:	3220      	adds	r2, #32
 800912e:	6812      	ldr	r2, [r2, #0]
 8009130:	601a      	str	r2, [r3, #0]
      break;
 8009132:	bf00      	nop
  }

  return error;
 8009134:	7dfb      	ldrb	r3, [r7, #23]
}
 8009136:	4618      	mov	r0, r3
 8009138:	3718      	adds	r7, #24
 800913a:	46bd      	mov	sp, r7
 800913c:	bd80      	pop	{r7, pc}

0800913e <USBH_MSC_SCSI_RequestSense>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_MSC_SCSI_RequestSense(USBH_HandleTypeDef *phost,
                                              uint8_t lun,
                                              SCSI_SenseTypeDef *sense_data)
{
 800913e:	b580      	push	{r7, lr}
 8009140:	b086      	sub	sp, #24
 8009142:	af00      	add	r7, sp, #0
 8009144:	60f8      	str	r0, [r7, #12]
 8009146:	460b      	mov	r3, r1
 8009148:	607a      	str	r2, [r7, #4]
 800914a:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 800914c:	2302      	movs	r3, #2
 800914e:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009156:	69db      	ldr	r3, [r3, #28]
 8009158:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800915a:	693b      	ldr	r3, [r7, #16]
 800915c:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009160:	2b01      	cmp	r3, #1
 8009162:	d002      	beq.n	800916a <USBH_MSC_SCSI_RequestSense+0x2c>
 8009164:	2b02      	cmp	r3, #2
 8009166:	d03d      	beq.n	80091e4 <USBH_MSC_SCSI_RequestSense+0xa6>
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
      }
      break;

    default:
      break;
 8009168:	e05d      	b.n	8009226 <USBH_MSC_SCSI_RequestSense+0xe8>
      MSC_Handle->hbot.cbw.field.DataTransferLength = DATA_LEN_REQUEST_SENSE;
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	220e      	movs	r2, #14
 800916e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009170:	693b      	ldr	r3, [r7, #16]
 8009172:	2280      	movs	r2, #128	; 0x80
 8009174:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009178:	693b      	ldr	r3, [r7, #16]
 800917a:	220a      	movs	r2, #10
 800917c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	3363      	adds	r3, #99	; 0x63
 8009184:	2210      	movs	r2, #16
 8009186:	2100      	movs	r1, #0
 8009188:	4618      	mov	r0, r3
 800918a:	f004 fcd5 	bl	800db38 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_REQUEST_SENSE;
 800918e:	693b      	ldr	r3, [r7, #16]
 8009190:	2203      	movs	r2, #3
 8009192:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[1]  = (lun << 5);
 8009196:	7afb      	ldrb	r3, [r7, #11]
 8009198:	015b      	lsls	r3, r3, #5
 800919a:	b2da      	uxtb	r2, r3
 800919c:	693b      	ldr	r3, [r7, #16]
 800919e:	f883 2064 	strb.w	r2, [r3, #100]	; 0x64
      MSC_Handle->hbot.cbw.field.CB[2]  = 0U;
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	2200      	movs	r2, #0
 80091a6:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = 0U;
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	2200      	movs	r2, #0
 80091ae:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = DATA_LEN_REQUEST_SENSE;
 80091b2:	693b      	ldr	r3, [r7, #16]
 80091b4:	220e      	movs	r2, #14
 80091b6:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = 0U;
 80091ba:	693b      	ldr	r3, [r7, #16]
 80091bc:	2200      	movs	r2, #0
 80091be:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80091c2:	693b      	ldr	r3, [r7, #16]
 80091c4:	2201      	movs	r2, #1
 80091c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	2202      	movs	r2, #2
 80091ce:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = (uint8_t *)(void *)MSC_Handle->hbot.data;
 80091d2:	693b      	ldr	r3, [r7, #16]
 80091d4:	f103 0210 	add.w	r2, r3, #16
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80091de:	2301      	movs	r3, #1
 80091e0:	75fb      	strb	r3, [r7, #23]
      break;
 80091e2:	e020      	b.n	8009226 <USBH_MSC_SCSI_RequestSense+0xe8>
      error = USBH_MSC_BOT_Process(phost, lun);
 80091e4:	7afb      	ldrb	r3, [r7, #11]
 80091e6:	4619      	mov	r1, r3
 80091e8:	68f8      	ldr	r0, [r7, #12]
 80091ea:	f7ff fc07 	bl	80089fc <USBH_MSC_BOT_Process>
 80091ee:	4603      	mov	r3, r0
 80091f0:	75fb      	strb	r3, [r7, #23]
      if (error == USBH_OK)
 80091f2:	7dfb      	ldrb	r3, [r7, #23]
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d115      	bne.n	8009224 <USBH_MSC_SCSI_RequestSense+0xe6>
        sense_data->key  = MSC_Handle->hbot.pbuf[2] & 0x0FU;
 80091f8:	693b      	ldr	r3, [r7, #16]
 80091fa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80091fe:	3302      	adds	r3, #2
 8009200:	781b      	ldrb	r3, [r3, #0]
 8009202:	f003 030f 	and.w	r3, r3, #15
 8009206:	b2da      	uxtb	r2, r3
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	701a      	strb	r2, [r3, #0]
        sense_data->asc  = MSC_Handle->hbot.pbuf[12];
 800920c:	693b      	ldr	r3, [r7, #16]
 800920e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009212:	7b1a      	ldrb	r2, [r3, #12]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	705a      	strb	r2, [r3, #1]
        sense_data->ascq = MSC_Handle->hbot.pbuf[13];
 8009218:	693b      	ldr	r3, [r7, #16]
 800921a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800921e:	7b5a      	ldrb	r2, [r3, #13]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	709a      	strb	r2, [r3, #2]
      break;
 8009224:	bf00      	nop
  }

  return error;
 8009226:	7dfb      	ldrb	r3, [r7, #23]
}
 8009228:	4618      	mov	r0, r3
 800922a:	3718      	adds	r7, #24
 800922c:	46bd      	mov	sp, r7
 800922e:	bd80      	pop	{r7, pc}

08009230 <USBH_MSC_SCSI_Write>:
USBH_StatusTypeDef USBH_MSC_SCSI_Write(USBH_HandleTypeDef *phost,
                                       uint8_t lun,
                                       uint32_t address,
                                       uint8_t *pbuf,
                                       uint32_t length)
{
 8009230:	b580      	push	{r7, lr}
 8009232:	b086      	sub	sp, #24
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	607a      	str	r2, [r7, #4]
 800923a:	603b      	str	r3, [r7, #0]
 800923c:	460b      	mov	r3, r1
 800923e:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009240:	2302      	movs	r3, #2
 8009242:	75fb      	strb	r3, [r7, #23]

  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800924a:	69db      	ldr	r3, [r3, #28]
 800924c:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 800924e:	693b      	ldr	r3, [r7, #16]
 8009250:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 8009254:	2b01      	cmp	r3, #1
 8009256:	d002      	beq.n	800925e <USBH_MSC_SCSI_Write+0x2e>
 8009258:	2b02      	cmp	r3, #2
 800925a:	d047      	beq.n	80092ec <USBH_MSC_SCSI_Write+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 800925c:	e04e      	b.n	80092fc <USBH_MSC_SCSI_Write+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 800925e:	693b      	ldr	r3, [r7, #16]
 8009260:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 8009264:	461a      	mov	r2, r3
 8009266:	6a3b      	ldr	r3, [r7, #32]
 8009268:	fb03 f202 	mul.w	r2, r3, r2
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_OUT;
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	2200      	movs	r2, #0
 8009274:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 8009278:	693b      	ldr	r3, [r7, #16]
 800927a:	220a      	movs	r2, #10
 800927c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009280:	693b      	ldr	r3, [r7, #16]
 8009282:	3363      	adds	r3, #99	; 0x63
 8009284:	2210      	movs	r2, #16
 8009286:	2100      	movs	r1, #0
 8009288:	4618      	mov	r0, r3
 800928a:	f004 fc55 	bl	800db38 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_WRITE10;
 800928e:	693b      	ldr	r3, [r7, #16]
 8009290:	222a      	movs	r2, #42	; 0x2a
 8009292:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 8009296:	79fa      	ldrb	r2, [r7, #7]
 8009298:	693b      	ldr	r3, [r7, #16]
 800929a:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 800929e:	79ba      	ldrb	r2, [r7, #6]
 80092a0:	693b      	ldr	r3, [r7, #16]
 80092a2:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 80092a6:	797a      	ldrb	r2, [r7, #5]
 80092a8:	693b      	ldr	r3, [r7, #16]
 80092aa:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 80092ae:	1d3b      	adds	r3, r7, #4
 80092b0:	781a      	ldrb	r2, [r3, #0]
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 80092b8:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 80092c2:	f107 0320 	add.w	r3, r7, #32
 80092c6:	781a      	ldrb	r2, [r3, #0]
 80092c8:	693b      	ldr	r3, [r7, #16]
 80092ca:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80092ce:	693b      	ldr	r3, [r7, #16]
 80092d0:	2201      	movs	r2, #1
 80092d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	2202      	movs	r2, #2
 80092da:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80092de:	693b      	ldr	r3, [r7, #16]
 80092e0:	683a      	ldr	r2, [r7, #0]
 80092e2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80092e6:	2301      	movs	r3, #1
 80092e8:	75fb      	strb	r3, [r7, #23]
      break;
 80092ea:	e007      	b.n	80092fc <USBH_MSC_SCSI_Write+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80092ec:	7afb      	ldrb	r3, [r7, #11]
 80092ee:	4619      	mov	r1, r3
 80092f0:	68f8      	ldr	r0, [r7, #12]
 80092f2:	f7ff fb83 	bl	80089fc <USBH_MSC_BOT_Process>
 80092f6:	4603      	mov	r3, r0
 80092f8:	75fb      	strb	r3, [r7, #23]
      break;
 80092fa:	bf00      	nop
  }

  return error;
 80092fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80092fe:	4618      	mov	r0, r3
 8009300:	3718      	adds	r7, #24
 8009302:	46bd      	mov	sp, r7
 8009304:	bd80      	pop	{r7, pc}

08009306 <USBH_MSC_SCSI_Read>:
USBH_StatusTypeDef USBH_MSC_SCSI_Read(USBH_HandleTypeDef *phost,
                                      uint8_t lun,
                                      uint32_t address,
                                      uint8_t *pbuf,
                                      uint32_t length)
{
 8009306:	b580      	push	{r7, lr}
 8009308:	b086      	sub	sp, #24
 800930a:	af00      	add	r7, sp, #0
 800930c:	60f8      	str	r0, [r7, #12]
 800930e:	607a      	str	r2, [r7, #4]
 8009310:	603b      	str	r3, [r7, #0]
 8009312:	460b      	mov	r3, r1
 8009314:	72fb      	strb	r3, [r7, #11]
  USBH_StatusTypeDef    error = USBH_FAIL ;
 8009316:	2302      	movs	r3, #2
 8009318:	75fb      	strb	r3, [r7, #23]
  MSC_HandleTypeDef *MSC_Handle = (MSC_HandleTypeDef *) phost->pActiveClass->pData;
 800931a:	68fb      	ldr	r3, [r7, #12]
 800931c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009320:	69db      	ldr	r3, [r3, #28]
 8009322:	613b      	str	r3, [r7, #16]

  switch (MSC_Handle->hbot.cmd_state)
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	f893 3052 	ldrb.w	r3, [r3, #82]	; 0x52
 800932a:	2b01      	cmp	r3, #1
 800932c:	d002      	beq.n	8009334 <USBH_MSC_SCSI_Read+0x2e>
 800932e:	2b02      	cmp	r3, #2
 8009330:	d047      	beq.n	80093c2 <USBH_MSC_SCSI_Read+0xbc>
    case BOT_CMD_WAIT:
      error = USBH_MSC_BOT_Process(phost, lun);
      break;

    default:
      break;
 8009332:	e04e      	b.n	80093d2 <USBH_MSC_SCSI_Read+0xcc>
      MSC_Handle->hbot.cbw.field.DataTransferLength = length * MSC_Handle->unit[0].capacity.block_size;
 8009334:	693b      	ldr	r3, [r7, #16]
 8009336:	f8b3 3098 	ldrh.w	r3, [r3, #152]	; 0x98
 800933a:	461a      	mov	r2, r3
 800933c:	6a3b      	ldr	r3, [r7, #32]
 800933e:	fb03 f202 	mul.w	r2, r3, r2
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	65da      	str	r2, [r3, #92]	; 0x5c
      MSC_Handle->hbot.cbw.field.Flags = USB_EP_DIR_IN;
 8009346:	693b      	ldr	r3, [r7, #16]
 8009348:	2280      	movs	r2, #128	; 0x80
 800934a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60
      MSC_Handle->hbot.cbw.field.CBLength = CBW_LENGTH;
 800934e:	693b      	ldr	r3, [r7, #16]
 8009350:	220a      	movs	r2, #10
 8009352:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
      (void)USBH_memset(MSC_Handle->hbot.cbw.field.CB, 0, CBW_CB_LENGTH);
 8009356:	693b      	ldr	r3, [r7, #16]
 8009358:	3363      	adds	r3, #99	; 0x63
 800935a:	2210      	movs	r2, #16
 800935c:	2100      	movs	r1, #0
 800935e:	4618      	mov	r0, r3
 8009360:	f004 fbea 	bl	800db38 <memset>
      MSC_Handle->hbot.cbw.field.CB[0]  = OPCODE_READ10;
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	2228      	movs	r2, #40	; 0x28
 8009368:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
      MSC_Handle->hbot.cbw.field.CB[2]  = (((uint8_t *)(void *)&address)[3]);
 800936c:	79fa      	ldrb	r2, [r7, #7]
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	f883 2065 	strb.w	r2, [r3, #101]	; 0x65
      MSC_Handle->hbot.cbw.field.CB[3]  = (((uint8_t *)(void *)&address)[2]);
 8009374:	79ba      	ldrb	r2, [r7, #6]
 8009376:	693b      	ldr	r3, [r7, #16]
 8009378:	f883 2066 	strb.w	r2, [r3, #102]	; 0x66
      MSC_Handle->hbot.cbw.field.CB[4]  = (((uint8_t *)(void *)&address)[1]);
 800937c:	797a      	ldrb	r2, [r7, #5]
 800937e:	693b      	ldr	r3, [r7, #16]
 8009380:	f883 2067 	strb.w	r2, [r3, #103]	; 0x67
      MSC_Handle->hbot.cbw.field.CB[5]  = (((uint8_t *)(void *)&address)[0]);
 8009384:	1d3b      	adds	r3, r7, #4
 8009386:	781a      	ldrb	r2, [r3, #0]
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
      MSC_Handle->hbot.cbw.field.CB[7]  = (((uint8_t *)(void *)&length)[1]) ;
 800938e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
      MSC_Handle->hbot.cbw.field.CB[8]  = (((uint8_t *)(void *)&length)[0]) ;
 8009398:	f107 0320 	add.w	r3, r7, #32
 800939c:	781a      	ldrb	r2, [r3, #0]
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	f883 206b 	strb.w	r2, [r3, #107]	; 0x6b
      MSC_Handle->hbot.state = BOT_SEND_CBW;
 80093a4:	693b      	ldr	r3, [r7, #16]
 80093a6:	2201      	movs	r2, #1
 80093a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
      MSC_Handle->hbot.cmd_state = BOT_CMD_WAIT;
 80093ac:	693b      	ldr	r3, [r7, #16]
 80093ae:	2202      	movs	r2, #2
 80093b0:	f883 2052 	strb.w	r2, [r3, #82]	; 0x52
      MSC_Handle->hbot.pbuf = pbuf;
 80093b4:	693b      	ldr	r3, [r7, #16]
 80093b6:	683a      	ldr	r2, [r7, #0]
 80093b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      error = USBH_BUSY;
 80093bc:	2301      	movs	r3, #1
 80093be:	75fb      	strb	r3, [r7, #23]
      break;
 80093c0:	e007      	b.n	80093d2 <USBH_MSC_SCSI_Read+0xcc>
      error = USBH_MSC_BOT_Process(phost, lun);
 80093c2:	7afb      	ldrb	r3, [r7, #11]
 80093c4:	4619      	mov	r1, r3
 80093c6:	68f8      	ldr	r0, [r7, #12]
 80093c8:	f7ff fb18 	bl	80089fc <USBH_MSC_BOT_Process>
 80093cc:	4603      	mov	r3, r0
 80093ce:	75fb      	strb	r3, [r7, #23]
      break;
 80093d0:	bf00      	nop
  }

  return error;
 80093d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80093d4:	4618      	mov	r0, r3
 80093d6:	3718      	adds	r7, #24
 80093d8:	46bd      	mov	sp, r7
 80093da:	bd80      	pop	{r7, pc}

080093dc <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80093dc:	b580      	push	{r7, lr}
 80093de:	b084      	sub	sp, #16
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	60f8      	str	r0, [r7, #12]
 80093e4:	60b9      	str	r1, [r7, #8]
 80093e6:	4613      	mov	r3, r2
 80093e8:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d101      	bne.n	80093f4 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80093f0:	2302      	movs	r3, #2
 80093f2:	e029      	b.n	8009448 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	79fa      	ldrb	r2, [r7, #7]
 80093f8:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	2200      	movs	r2, #0
 8009400:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8009404:	68fb      	ldr	r3, [r7, #12]
 8009406:	2200      	movs	r2, #0
 8009408:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800940c:	68f8      	ldr	r0, [r7, #12]
 800940e:	f000 f81f 	bl	8009450 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2200      	movs	r2, #0
 8009416:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 800941a:	68fb      	ldr	r3, [r7, #12]
 800941c:	2200      	movs	r2, #0
 800941e:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2200      	movs	r2, #0
 8009426:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8009432:	68bb      	ldr	r3, [r7, #8]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d003      	beq.n	8009440 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8009440:	68f8      	ldr	r0, [r7, #12]
 8009442:	f004 f8bf 	bl	800d5c4 <USBH_LL_Init>

  return USBH_OK;
 8009446:	2300      	movs	r3, #0
}
 8009448:	4618      	mov	r0, r3
 800944a:	3710      	adds	r7, #16
 800944c:	46bd      	mov	sp, r7
 800944e:	bd80      	pop	{r7, pc}

08009450 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8009450:	b480      	push	{r7}
 8009452:	b085      	sub	sp, #20
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8009458:	2300      	movs	r3, #0
 800945a:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800945c:	2300      	movs	r3, #0
 800945e:	60fb      	str	r3, [r7, #12]
 8009460:	e009      	b.n	8009476 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8009462:	687a      	ldr	r2, [r7, #4]
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	33e0      	adds	r3, #224	; 0xe0
 8009468:	009b      	lsls	r3, r3, #2
 800946a:	4413      	add	r3, r2
 800946c:	2200      	movs	r2, #0
 800946e:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	3301      	adds	r3, #1
 8009474:	60fb      	str	r3, [r7, #12]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	2b0f      	cmp	r3, #15
 800947a:	d9f2      	bls.n	8009462 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800947c:	2300      	movs	r3, #0
 800947e:	60fb      	str	r3, [r7, #12]
 8009480:	e009      	b.n	8009496 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8009482:	687a      	ldr	r2, [r7, #4]
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	4413      	add	r3, r2
 8009488:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 800948c:	2200      	movs	r2, #0
 800948e:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8009490:	68fb      	ldr	r3, [r7, #12]
 8009492:	3301      	adds	r3, #1
 8009494:	60fb      	str	r3, [r7, #12]
 8009496:	68fb      	ldr	r3, [r7, #12]
 8009498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800949c:	d3f1      	bcc.n	8009482 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	2200      	movs	r2, #0
 80094a8:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2201      	movs	r2, #1
 80094ae:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2200      	movs	r2, #0
 80094b4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2201      	movs	r2, #1
 80094bc:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2240      	movs	r2, #64	; 0x40
 80094c2:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2200      	movs	r2, #0
 80094ce:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	2201      	movs	r2, #1
 80094d6:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	2200      	movs	r2, #0
 80094de:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	2200      	movs	r2, #0
 80094e6:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80094ea:	2300      	movs	r3, #0
}
 80094ec:	4618      	mov	r0, r3
 80094ee:	3714      	adds	r7, #20
 80094f0:	46bd      	mov	sp, r7
 80094f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f6:	4770      	bx	lr

080094f8 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]
 8009500:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8009502:	2300      	movs	r3, #0
 8009504:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	2b00      	cmp	r3, #0
 800950a:	d016      	beq.n	800953a <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009512:	2b00      	cmp	r3, #0
 8009514:	d10e      	bne.n	8009534 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800951c:	1c59      	adds	r1, r3, #1
 800951e:	687a      	ldr	r2, [r7, #4]
 8009520:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8009524:	687a      	ldr	r2, [r7, #4]
 8009526:	33de      	adds	r3, #222	; 0xde
 8009528:	6839      	ldr	r1, [r7, #0]
 800952a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800952e:	2300      	movs	r3, #0
 8009530:	73fb      	strb	r3, [r7, #15]
 8009532:	e004      	b.n	800953e <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8009534:	2302      	movs	r3, #2
 8009536:	73fb      	strb	r3, [r7, #15]
 8009538:	e001      	b.n	800953e <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800953a:	2302      	movs	r3, #2
 800953c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800953e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009540:	4618      	mov	r0, r3
 8009542:	3714      	adds	r7, #20
 8009544:	46bd      	mov	sp, r7
 8009546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800954a:	4770      	bx	lr

0800954c <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800954c:	b480      	push	{r7}
 800954e:	b085      	sub	sp, #20
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	460b      	mov	r3, r1
 8009556:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8009558:	2300      	movs	r3, #0
 800955a:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8009562:	78fa      	ldrb	r2, [r7, #3]
 8009564:	429a      	cmp	r2, r3
 8009566:	d204      	bcs.n	8009572 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	78fa      	ldrb	r2, [r7, #3]
 800956c:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8009570:	e001      	b.n	8009576 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8009572:	2302      	movs	r3, #2
 8009574:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009576:	7bfb      	ldrb	r3, [r7, #15]
}
 8009578:	4618      	mov	r0, r3
 800957a:	3714      	adds	r7, #20
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8009584:	b480      	push	{r7}
 8009586:	b087      	sub	sp, #28
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	4608      	mov	r0, r1
 800958e:	4611      	mov	r1, r2
 8009590:	461a      	mov	r2, r3
 8009592:	4603      	mov	r3, r0
 8009594:	70fb      	strb	r3, [r7, #3]
 8009596:	460b      	mov	r3, r1
 8009598:	70bb      	strb	r3, [r7, #2]
 800959a:	4613      	mov	r3, r2
 800959c:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800959e:	2300      	movs	r3, #0
 80095a0:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80095a2:	2300      	movs	r3, #0
 80095a4:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80095ac:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80095ae:	e025      	b.n	80095fc <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80095b0:	7dfb      	ldrb	r3, [r7, #23]
 80095b2:	221a      	movs	r2, #26
 80095b4:	fb02 f303 	mul.w	r3, r2, r3
 80095b8:	3308      	adds	r3, #8
 80095ba:	68fa      	ldr	r2, [r7, #12]
 80095bc:	4413      	add	r3, r2
 80095be:	3302      	adds	r3, #2
 80095c0:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	795b      	ldrb	r3, [r3, #5]
 80095c6:	78fa      	ldrb	r2, [r7, #3]
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d002      	beq.n	80095d2 <USBH_FindInterface+0x4e>
 80095cc:	78fb      	ldrb	r3, [r7, #3]
 80095ce:	2bff      	cmp	r3, #255	; 0xff
 80095d0:	d111      	bne.n	80095f6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80095d2:	693b      	ldr	r3, [r7, #16]
 80095d4:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80095d6:	78ba      	ldrb	r2, [r7, #2]
 80095d8:	429a      	cmp	r2, r3
 80095da:	d002      	beq.n	80095e2 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80095dc:	78bb      	ldrb	r3, [r7, #2]
 80095de:	2bff      	cmp	r3, #255	; 0xff
 80095e0:	d109      	bne.n	80095f6 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80095e2:	693b      	ldr	r3, [r7, #16]
 80095e4:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80095e6:	787a      	ldrb	r2, [r7, #1]
 80095e8:	429a      	cmp	r2, r3
 80095ea:	d002      	beq.n	80095f2 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80095ec:	787b      	ldrb	r3, [r7, #1]
 80095ee:	2bff      	cmp	r3, #255	; 0xff
 80095f0:	d101      	bne.n	80095f6 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80095f2:	7dfb      	ldrb	r3, [r7, #23]
 80095f4:	e006      	b.n	8009604 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80095f6:	7dfb      	ldrb	r3, [r7, #23]
 80095f8:	3301      	adds	r3, #1
 80095fa:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80095fc:	7dfb      	ldrb	r3, [r7, #23]
 80095fe:	2b01      	cmp	r3, #1
 8009600:	d9d6      	bls.n	80095b0 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8009602:	23ff      	movs	r3, #255	; 0xff
}
 8009604:	4618      	mov	r0, r3
 8009606:	371c      	adds	r7, #28
 8009608:	46bd      	mov	sp, r7
 800960a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800960e:	4770      	bx	lr

08009610 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8009610:	b580      	push	{r7, lr}
 8009612:	b082      	sub	sp, #8
 8009614:	af00      	add	r7, sp, #0
 8009616:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f004 f80f 	bl	800d63c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800961e:	2101      	movs	r1, #1
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f004 f928 	bl	800d876 <USBH_LL_DriverVBUS>

  return USBH_OK;
 8009626:	2300      	movs	r3, #0
}
 8009628:	4618      	mov	r0, r3
 800962a:	3708      	adds	r7, #8
 800962c:	46bd      	mov	sp, r7
 800962e:	bd80      	pop	{r7, pc}

08009630 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 8009630:	b580      	push	{r7, lr}
 8009632:	b088      	sub	sp, #32
 8009634:	af04      	add	r7, sp, #16
 8009636:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8009638:	2302      	movs	r3, #2
 800963a:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800963c:	2300      	movs	r3, #0
 800963e:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 8009646:	b2db      	uxtb	r3, r3
 8009648:	2b01      	cmp	r3, #1
 800964a:	d102      	bne.n	8009652 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	2203      	movs	r2, #3
 8009650:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	781b      	ldrb	r3, [r3, #0]
 8009656:	b2db      	uxtb	r3, r3
 8009658:	2b0b      	cmp	r3, #11
 800965a:	f200 81be 	bhi.w	80099da <USBH_Process+0x3aa>
 800965e:	a201      	add	r2, pc, #4	; (adr r2, 8009664 <USBH_Process+0x34>)
 8009660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009664:	08009695 	.word	0x08009695
 8009668:	080096c7 	.word	0x080096c7
 800966c:	0800972f 	.word	0x0800972f
 8009670:	08009975 	.word	0x08009975
 8009674:	080099db 	.word	0x080099db
 8009678:	080097d3 	.word	0x080097d3
 800967c:	0800991b 	.word	0x0800991b
 8009680:	08009809 	.word	0x08009809
 8009684:	08009829 	.word	0x08009829
 8009688:	08009849 	.word	0x08009849
 800968c:	0800988d 	.word	0x0800988d
 8009690:	0800995d 	.word	0x0800995d
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 800969a:	b2db      	uxtb	r3, r3
 800969c:	2b00      	cmp	r3, #0
 800969e:	f000 819e 	beq.w	80099de <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2201      	movs	r2, #1
 80096a6:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 80096a8:	20c8      	movs	r0, #200	; 0xc8
 80096aa:	f004 f952 	bl	800d952 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f004 f821 	bl	800d6f6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2200      	movs	r2, #0
 80096c0:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80096c4:	e18b      	b.n	80099de <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 80096cc:	2b01      	cmp	r3, #1
 80096ce:	d107      	bne.n	80096e0 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	2200      	movs	r2, #0
 80096d4:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2202      	movs	r2, #2
 80096dc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80096de:	e18d      	b.n	80099fc <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 80096e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80096ea:	d914      	bls.n	8009716 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 80096f2:	3301      	adds	r3, #1
 80096f4:	b2da      	uxtb	r2, r3
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8009702:	2b03      	cmp	r3, #3
 8009704:	d903      	bls.n	800970e <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	220d      	movs	r2, #13
 800970a:	701a      	strb	r2, [r3, #0]
      break;
 800970c:	e176      	b.n	80099fc <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	2200      	movs	r2, #0
 8009712:	701a      	strb	r2, [r3, #0]
      break;
 8009714:	e172      	b.n	80099fc <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 800971c:	f103 020a 	add.w	r2, r3, #10
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8009726:	200a      	movs	r0, #10
 8009728:	f004 f913 	bl	800d952 <USBH_Delay>
      break;
 800972c:	e166      	b.n	80099fc <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009734:	2b00      	cmp	r3, #0
 8009736:	d005      	beq.n	8009744 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800973e:	2104      	movs	r1, #4
 8009740:	6878      	ldr	r0, [r7, #4]
 8009742:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8009744:	2064      	movs	r0, #100	; 0x64
 8009746:	f004 f904 	bl	800d952 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f003 ffac 	bl	800d6a8 <USBH_LL_GetSpeed>
 8009750:	4603      	mov	r3, r0
 8009752:	461a      	mov	r2, r3
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2205      	movs	r2, #5
 800975e:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8009760:	2100      	movs	r1, #0
 8009762:	6878      	ldr	r0, [r7, #4]
 8009764:	f001 fa2b 	bl	800abbe <USBH_AllocPipe>
 8009768:	4603      	mov	r3, r0
 800976a:	461a      	mov	r2, r3
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8009770:	2180      	movs	r1, #128	; 0x80
 8009772:	6878      	ldr	r0, [r7, #4]
 8009774:	f001 fa23 	bl	800abbe <USBH_AllocPipe>
 8009778:	4603      	mov	r3, r0
 800977a:	461a      	mov	r2, r3
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	7919      	ldrb	r1, [r3, #4]
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8009790:	687a      	ldr	r2, [r7, #4]
 8009792:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8009794:	b292      	uxth	r2, r2
 8009796:	9202      	str	r2, [sp, #8]
 8009798:	2200      	movs	r2, #0
 800979a:	9201      	str	r2, [sp, #4]
 800979c:	9300      	str	r3, [sp, #0]
 800979e:	4603      	mov	r3, r0
 80097a0:	2280      	movs	r2, #128	; 0x80
 80097a2:	6878      	ldr	r0, [r7, #4]
 80097a4:	f001 f9dc 	bl	800ab60 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	7959      	ldrb	r1, [r3, #5]
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 80097bc:	b292      	uxth	r2, r2
 80097be:	9202      	str	r2, [sp, #8]
 80097c0:	2200      	movs	r2, #0
 80097c2:	9201      	str	r2, [sp, #4]
 80097c4:	9300      	str	r3, [sp, #0]
 80097c6:	4603      	mov	r3, r0
 80097c8:	2200      	movs	r2, #0
 80097ca:	6878      	ldr	r0, [r7, #4]
 80097cc:	f001 f9c8 	bl	800ab60 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80097d0:	e114      	b.n	80099fc <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 80097d2:	6878      	ldr	r0, [r7, #4]
 80097d4:	f000 f918 	bl	8009a08 <USBH_HandleEnum>
 80097d8:	4603      	mov	r3, r0
 80097da:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 80097dc:	7bbb      	ldrb	r3, [r7, #14]
 80097de:	b2db      	uxtb	r3, r3
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	f040 80fe 	bne.w	80099e2 <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2200      	movs	r2, #0
 80097ea:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d103      	bne.n	8009800 <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2208      	movs	r2, #8
 80097fc:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80097fe:	e0f0      	b.n	80099e2 <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2207      	movs	r2, #7
 8009804:	701a      	strb	r2, [r3, #0]
      break;
 8009806:	e0ec      	b.n	80099e2 <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800980e:	2b00      	cmp	r3, #0
 8009810:	f000 80e9 	beq.w	80099e6 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800981a:	2101      	movs	r1, #1
 800981c:	6878      	ldr	r0, [r7, #4]
 800981e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	2208      	movs	r2, #8
 8009824:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8009826:	e0de      	b.n	80099e6 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 800982e:	b29b      	uxth	r3, r3
 8009830:	4619      	mov	r1, r3
 8009832:	6878      	ldr	r0, [r7, #4]
 8009834:	f000 fc2c 	bl	800a090 <USBH_SetCfg>
 8009838:	4603      	mov	r3, r0
 800983a:	2b00      	cmp	r3, #0
 800983c:	f040 80d5 	bne.w	80099ea <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8009840:	687b      	ldr	r3, [r7, #4]
 8009842:	2209      	movs	r2, #9
 8009844:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009846:	e0d0      	b.n	80099ea <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 800984e:	f003 0320 	and.w	r3, r3, #32
 8009852:	2b00      	cmp	r3, #0
 8009854:	d016      	beq.n	8009884 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8009856:	2101      	movs	r1, #1
 8009858:	6878      	ldr	r0, [r7, #4]
 800985a:	f000 fc3c 	bl	800a0d6 <USBH_SetFeature>
 800985e:	4603      	mov	r3, r0
 8009860:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009862:	7bbb      	ldrb	r3, [r7, #14]
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d103      	bne.n	8009872 <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	220a      	movs	r2, #10
 800986e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009870:	e0bd      	b.n	80099ee <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8009872:	7bbb      	ldrb	r3, [r7, #14]
 8009874:	b2db      	uxtb	r3, r3
 8009876:	2b03      	cmp	r3, #3
 8009878:	f040 80b9 	bne.w	80099ee <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	220a      	movs	r2, #10
 8009880:	701a      	strb	r2, [r3, #0]
      break;
 8009882:	e0b4      	b.n	80099ee <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	220a      	movs	r2, #10
 8009888:	701a      	strb	r2, [r3, #0]
      break;
 800988a:	e0b0      	b.n	80099ee <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8009892:	2b00      	cmp	r3, #0
 8009894:	f000 80ad 	beq.w	80099f2 <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8009898:	687b      	ldr	r3, [r7, #4]
 800989a:	2200      	movs	r2, #0
 800989c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80098a0:	2300      	movs	r3, #0
 80098a2:	73fb      	strb	r3, [r7, #15]
 80098a4:	e016      	b.n	80098d4 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 80098a6:	7bfa      	ldrb	r2, [r7, #15]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	32de      	adds	r2, #222	; 0xde
 80098ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80098b0:	791a      	ldrb	r2, [r3, #4]
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d108      	bne.n	80098ce <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 80098bc:	7bfa      	ldrb	r2, [r7, #15]
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	32de      	adds	r2, #222	; 0xde
 80098c2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 80098cc:	e005      	b.n	80098da <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 80098ce:	7bfb      	ldrb	r3, [r7, #15]
 80098d0:	3301      	adds	r3, #1
 80098d2:	73fb      	strb	r3, [r7, #15]
 80098d4:	7bfb      	ldrb	r3, [r7, #15]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d0e5      	beq.n	80098a6 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d016      	beq.n	8009912 <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80098ea:	689b      	ldr	r3, [r3, #8]
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	4798      	blx	r3
 80098f0:	4603      	mov	r3, r0
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d109      	bne.n	800990a <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	2206      	movs	r2, #6
 80098fa:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8009902:	2103      	movs	r1, #3
 8009904:	6878      	ldr	r0, [r7, #4]
 8009906:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009908:	e073      	b.n	80099f2 <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	220d      	movs	r2, #13
 800990e:	701a      	strb	r2, [r3, #0]
      break;
 8009910:	e06f      	b.n	80099f2 <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	220d      	movs	r2, #13
 8009916:	701a      	strb	r2, [r3, #0]
      break;
 8009918:	e06b      	b.n	80099f2 <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009920:	2b00      	cmp	r3, #0
 8009922:	d017      	beq.n	8009954 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800992a:	691b      	ldr	r3, [r3, #16]
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	4798      	blx	r3
 8009930:	4603      	mov	r3, r0
 8009932:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8009934:	7bbb      	ldrb	r3, [r7, #14]
 8009936:	b2db      	uxtb	r3, r3
 8009938:	2b00      	cmp	r3, #0
 800993a:	d103      	bne.n	8009944 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	220b      	movs	r2, #11
 8009940:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009942:	e058      	b.n	80099f6 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8009944:	7bbb      	ldrb	r3, [r7, #14]
 8009946:	b2db      	uxtb	r3, r3
 8009948:	2b02      	cmp	r3, #2
 800994a:	d154      	bne.n	80099f6 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	220d      	movs	r2, #13
 8009950:	701a      	strb	r2, [r3, #0]
      break;
 8009952:	e050      	b.n	80099f6 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	220d      	movs	r2, #13
 8009958:	701a      	strb	r2, [r3, #0]
      break;
 800995a:	e04c      	b.n	80099f6 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009962:	2b00      	cmp	r3, #0
 8009964:	d049      	beq.n	80099fa <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800996c:	695b      	ldr	r3, [r3, #20]
 800996e:	6878      	ldr	r0, [r7, #4]
 8009970:	4798      	blx	r3
      }
      break;
 8009972:	e042      	b.n	80099fa <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2200      	movs	r2, #0
 8009978:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	f7ff fd67 	bl	8009450 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009988:	2b00      	cmp	r3, #0
 800998a:	d009      	beq.n	80099a0 <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009992:	68db      	ldr	r3, [r3, #12]
 8009994:	6878      	ldr	r0, [r7, #4]
 8009996:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d005      	beq.n	80099b6 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80099b0:	2105      	movs	r1, #5
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 80099bc:	b2db      	uxtb	r3, r3
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d107      	bne.n	80099d2 <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2200      	movs	r2, #0
 80099c6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 80099ca:	6878      	ldr	r0, [r7, #4]
 80099cc:	f7ff fe20 	bl	8009610 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80099d0:	e014      	b.n	80099fc <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 80099d2:	6878      	ldr	r0, [r7, #4]
 80099d4:	f003 fe32 	bl	800d63c <USBH_LL_Start>
      break;
 80099d8:	e010      	b.n	80099fc <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 80099da:	bf00      	nop
 80099dc:	e00e      	b.n	80099fc <USBH_Process+0x3cc>
      break;
 80099de:	bf00      	nop
 80099e0:	e00c      	b.n	80099fc <USBH_Process+0x3cc>
      break;
 80099e2:	bf00      	nop
 80099e4:	e00a      	b.n	80099fc <USBH_Process+0x3cc>
    break;
 80099e6:	bf00      	nop
 80099e8:	e008      	b.n	80099fc <USBH_Process+0x3cc>
      break;
 80099ea:	bf00      	nop
 80099ec:	e006      	b.n	80099fc <USBH_Process+0x3cc>
      break;
 80099ee:	bf00      	nop
 80099f0:	e004      	b.n	80099fc <USBH_Process+0x3cc>
      break;
 80099f2:	bf00      	nop
 80099f4:	e002      	b.n	80099fc <USBH_Process+0x3cc>
      break;
 80099f6:	bf00      	nop
 80099f8:	e000      	b.n	80099fc <USBH_Process+0x3cc>
      break;
 80099fa:	bf00      	nop
  }
  return USBH_OK;
 80099fc:	2300      	movs	r3, #0
}
 80099fe:	4618      	mov	r0, r3
 8009a00:	3710      	adds	r7, #16
 8009a02:	46bd      	mov	sp, r7
 8009a04:	bd80      	pop	{r7, pc}
 8009a06:	bf00      	nop

08009a08 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8009a08:	b580      	push	{r7, lr}
 8009a0a:	b088      	sub	sp, #32
 8009a0c:	af04      	add	r7, sp, #16
 8009a0e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009a10:	2301      	movs	r3, #1
 8009a12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009a14:	2301      	movs	r3, #1
 8009a16:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	785b      	ldrb	r3, [r3, #1]
 8009a1c:	2b07      	cmp	r3, #7
 8009a1e:	f200 81c1 	bhi.w	8009da4 <USBH_HandleEnum+0x39c>
 8009a22:	a201      	add	r2, pc, #4	; (adr r2, 8009a28 <USBH_HandleEnum+0x20>)
 8009a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a28:	08009a49 	.word	0x08009a49
 8009a2c:	08009b07 	.word	0x08009b07
 8009a30:	08009b71 	.word	0x08009b71
 8009a34:	08009bff 	.word	0x08009bff
 8009a38:	08009c69 	.word	0x08009c69
 8009a3c:	08009cd9 	.word	0x08009cd9
 8009a40:	08009d1f 	.word	0x08009d1f
 8009a44:	08009d65 	.word	0x08009d65
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8009a48:	2108      	movs	r1, #8
 8009a4a:	6878      	ldr	r0, [r7, #4]
 8009a4c:	f000 fa50 	bl	8009ef0 <USBH_Get_DevDesc>
 8009a50:	4603      	mov	r3, r0
 8009a52:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009a54:	7bbb      	ldrb	r3, [r7, #14]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d130      	bne.n	8009abc <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	2201      	movs	r2, #1
 8009a68:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	7919      	ldrb	r1, [r3, #4]
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009a7a:	687a      	ldr	r2, [r7, #4]
 8009a7c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8009a7e:	b292      	uxth	r2, r2
 8009a80:	9202      	str	r2, [sp, #8]
 8009a82:	2200      	movs	r2, #0
 8009a84:	9201      	str	r2, [sp, #4]
 8009a86:	9300      	str	r3, [sp, #0]
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2280      	movs	r2, #128	; 0x80
 8009a8c:	6878      	ldr	r0, [r7, #4]
 8009a8e:	f001 f867 	bl	800ab60 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	7959      	ldrb	r1, [r3, #5]
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009aa6:	b292      	uxth	r2, r2
 8009aa8:	9202      	str	r2, [sp, #8]
 8009aaa:	2200      	movs	r2, #0
 8009aac:	9201      	str	r2, [sp, #4]
 8009aae:	9300      	str	r3, [sp, #0]
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	6878      	ldr	r0, [r7, #4]
 8009ab6:	f001 f853 	bl	800ab60 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009aba:	e175      	b.n	8009da8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009abc:	7bbb      	ldrb	r3, [r7, #14]
 8009abe:	2b03      	cmp	r3, #3
 8009ac0:	f040 8172 	bne.w	8009da8 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009aca:	3301      	adds	r3, #1
 8009acc:	b2da      	uxtb	r2, r3
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ada:	2b03      	cmp	r3, #3
 8009adc:	d903      	bls.n	8009ae6 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	220d      	movs	r2, #13
 8009ae2:	701a      	strb	r2, [r3, #0]
      break;
 8009ae4:	e160      	b.n	8009da8 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	795b      	ldrb	r3, [r3, #5]
 8009aea:	4619      	mov	r1, r3
 8009aec:	6878      	ldr	r0, [r7, #4]
 8009aee:	f001 f887 	bl	800ac00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	791b      	ldrb	r3, [r3, #4]
 8009af6:	4619      	mov	r1, r3
 8009af8:	6878      	ldr	r0, [r7, #4]
 8009afa:	f001 f881 	bl	800ac00 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2200      	movs	r2, #0
 8009b02:	701a      	strb	r2, [r3, #0]
      break;
 8009b04:	e150      	b.n	8009da8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009b06:	2112      	movs	r1, #18
 8009b08:	6878      	ldr	r0, [r7, #4]
 8009b0a:	f000 f9f1 	bl	8009ef0 <USBH_Get_DevDesc>
 8009b0e:	4603      	mov	r3, r0
 8009b10:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b12:	7bbb      	ldrb	r3, [r7, #14]
 8009b14:	2b00      	cmp	r3, #0
 8009b16:	d103      	bne.n	8009b20 <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	2202      	movs	r2, #2
 8009b1c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009b1e:	e145      	b.n	8009dac <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009b20:	7bbb      	ldrb	r3, [r7, #14]
 8009b22:	2b03      	cmp	r3, #3
 8009b24:	f040 8142 	bne.w	8009dac <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b2e:	3301      	adds	r3, #1
 8009b30:	b2da      	uxtb	r2, r3
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009b3e:	2b03      	cmp	r3, #3
 8009b40:	d903      	bls.n	8009b4a <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	220d      	movs	r2, #13
 8009b46:	701a      	strb	r2, [r3, #0]
      break;
 8009b48:	e130      	b.n	8009dac <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	795b      	ldrb	r3, [r3, #5]
 8009b4e:	4619      	mov	r1, r3
 8009b50:	6878      	ldr	r0, [r7, #4]
 8009b52:	f001 f855 	bl	800ac00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	791b      	ldrb	r3, [r3, #4]
 8009b5a:	4619      	mov	r1, r3
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f001 f84f 	bl	800ac00 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	2200      	movs	r2, #0
 8009b66:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	2200      	movs	r2, #0
 8009b6c:	701a      	strb	r2, [r3, #0]
      break;
 8009b6e:	e11d      	b.n	8009dac <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8009b70:	2101      	movs	r1, #1
 8009b72:	6878      	ldr	r0, [r7, #4]
 8009b74:	f000 fa68 	bl	800a048 <USBH_SetAddress>
 8009b78:	4603      	mov	r3, r0
 8009b7a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009b7c:	7bbb      	ldrb	r3, [r7, #14]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d132      	bne.n	8009be8 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8009b82:	2002      	movs	r0, #2
 8009b84:	f003 fee5 	bl	800d952 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2201      	movs	r2, #1
 8009b8c:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	2203      	movs	r2, #3
 8009b94:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	7919      	ldrb	r1, [r3, #4]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8009baa:	b292      	uxth	r2, r2
 8009bac:	9202      	str	r2, [sp, #8]
 8009bae:	2200      	movs	r2, #0
 8009bb0:	9201      	str	r2, [sp, #4]
 8009bb2:	9300      	str	r3, [sp, #0]
 8009bb4:	4603      	mov	r3, r0
 8009bb6:	2280      	movs	r2, #128	; 0x80
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	f000 ffd1 	bl	800ab60 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	7959      	ldrb	r1, [r3, #5]
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009bd2:	b292      	uxth	r2, r2
 8009bd4:	9202      	str	r2, [sp, #8]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	9201      	str	r2, [sp, #4]
 8009bda:	9300      	str	r3, [sp, #0]
 8009bdc:	4603      	mov	r3, r0
 8009bde:	2200      	movs	r2, #0
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 ffbd 	bl	800ab60 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009be6:	e0e3      	b.n	8009db0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009be8:	7bbb      	ldrb	r3, [r7, #14]
 8009bea:	2b03      	cmp	r3, #3
 8009bec:	f040 80e0 	bne.w	8009db0 <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	220d      	movs	r2, #13
 8009bf4:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	2200      	movs	r2, #0
 8009bfa:	705a      	strb	r2, [r3, #1]
      break;
 8009bfc:	e0d8      	b.n	8009db0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8009bfe:	2109      	movs	r1, #9
 8009c00:	6878      	ldr	r0, [r7, #4]
 8009c02:	f000 f99d 	bl	8009f40 <USBH_Get_CfgDesc>
 8009c06:	4603      	mov	r3, r0
 8009c08:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009c0a:	7bbb      	ldrb	r3, [r7, #14]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d103      	bne.n	8009c18 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2204      	movs	r2, #4
 8009c14:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009c16:	e0cd      	b.n	8009db4 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c18:	7bbb      	ldrb	r3, [r7, #14]
 8009c1a:	2b03      	cmp	r3, #3
 8009c1c:	f040 80ca 	bne.w	8009db4 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c26:	3301      	adds	r3, #1
 8009c28:	b2da      	uxtb	r2, r3
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c36:	2b03      	cmp	r3, #3
 8009c38:	d903      	bls.n	8009c42 <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	220d      	movs	r2, #13
 8009c3e:	701a      	strb	r2, [r3, #0]
      break;
 8009c40:	e0b8      	b.n	8009db4 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c42:	687b      	ldr	r3, [r7, #4]
 8009c44:	795b      	ldrb	r3, [r3, #5]
 8009c46:	4619      	mov	r1, r3
 8009c48:	6878      	ldr	r0, [r7, #4]
 8009c4a:	f000 ffd9 	bl	800ac00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	791b      	ldrb	r3, [r3, #4]
 8009c52:	4619      	mov	r1, r3
 8009c54:	6878      	ldr	r0, [r7, #4]
 8009c56:	f000 ffd3 	bl	800ac00 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	2200      	movs	r2, #0
 8009c5e:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	2200      	movs	r2, #0
 8009c64:	701a      	strb	r2, [r3, #0]
      break;
 8009c66:	e0a5      	b.n	8009db4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8009c6e:	4619      	mov	r1, r3
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	f000 f965 	bl	8009f40 <USBH_Get_CfgDesc>
 8009c76:	4603      	mov	r3, r0
 8009c78:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009c7a:	7bbb      	ldrb	r3, [r7, #14]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d103      	bne.n	8009c88 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	2205      	movs	r2, #5
 8009c84:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009c86:	e097      	b.n	8009db8 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009c88:	7bbb      	ldrb	r3, [r7, #14]
 8009c8a:	2b03      	cmp	r3, #3
 8009c8c:	f040 8094 	bne.w	8009db8 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009c96:	3301      	adds	r3, #1
 8009c98:	b2da      	uxtb	r2, r3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8009ca0:	687b      	ldr	r3, [r7, #4]
 8009ca2:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8009ca6:	2b03      	cmp	r3, #3
 8009ca8:	d903      	bls.n	8009cb2 <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	220d      	movs	r2, #13
 8009cae:	701a      	strb	r2, [r3, #0]
      break;
 8009cb0:	e082      	b.n	8009db8 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009cb2:	687b      	ldr	r3, [r7, #4]
 8009cb4:	795b      	ldrb	r3, [r3, #5]
 8009cb6:	4619      	mov	r1, r3
 8009cb8:	6878      	ldr	r0, [r7, #4]
 8009cba:	f000 ffa1 	bl	800ac00 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	791b      	ldrb	r3, [r3, #4]
 8009cc2:	4619      	mov	r1, r3
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	f000 ff9b 	bl	800ac00 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	2200      	movs	r2, #0
 8009cce:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	701a      	strb	r2, [r3, #0]
      break;
 8009cd6:	e06f      	b.n	8009db8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d019      	beq.n	8009d16 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8009cee:	23ff      	movs	r3, #255	; 0xff
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 f949 	bl	8009f88 <USBH_Get_StringDesc>
 8009cf6:	4603      	mov	r3, r0
 8009cf8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009cfa:	7bbb      	ldrb	r3, [r7, #14]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d103      	bne.n	8009d08 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	2206      	movs	r2, #6
 8009d04:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009d06:	e059      	b.n	8009dbc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d08:	7bbb      	ldrb	r3, [r7, #14]
 8009d0a:	2b03      	cmp	r3, #3
 8009d0c:	d156      	bne.n	8009dbc <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	2206      	movs	r2, #6
 8009d12:	705a      	strb	r2, [r3, #1]
      break;
 8009d14:	e052      	b.n	8009dbc <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2206      	movs	r2, #6
 8009d1a:	705a      	strb	r2, [r3, #1]
      break;
 8009d1c:	e04e      	b.n	8009dbc <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d019      	beq.n	8009d5c <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009d34:	23ff      	movs	r3, #255	; 0xff
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 f926 	bl	8009f88 <USBH_Get_StringDesc>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009d40:	7bbb      	ldrb	r3, [r7, #14]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d103      	bne.n	8009d4e <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2207      	movs	r2, #7
 8009d4a:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009d4c:	e038      	b.n	8009dc0 <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d4e:	7bbb      	ldrb	r3, [r7, #14]
 8009d50:	2b03      	cmp	r3, #3
 8009d52:	d135      	bne.n	8009dc0 <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2207      	movs	r2, #7
 8009d58:	705a      	strb	r2, [r3, #1]
      break;
 8009d5a:	e031      	b.n	8009dc0 <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	2207      	movs	r2, #7
 8009d60:	705a      	strb	r2, [r3, #1]
      break;
 8009d62:	e02d      	b.n	8009dc0 <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d017      	beq.n	8009d9e <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8009d7a:	23ff      	movs	r3, #255	; 0xff
 8009d7c:	6878      	ldr	r0, [r7, #4]
 8009d7e:	f000 f903 	bl	8009f88 <USBH_Get_StringDesc>
 8009d82:	4603      	mov	r3, r0
 8009d84:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009d86:	7bbb      	ldrb	r3, [r7, #14]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d102      	bne.n	8009d92 <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8009d90:	e018      	b.n	8009dc4 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009d92:	7bbb      	ldrb	r3, [r7, #14]
 8009d94:	2b03      	cmp	r3, #3
 8009d96:	d115      	bne.n	8009dc4 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	73fb      	strb	r3, [r7, #15]
      break;
 8009d9c:	e012      	b.n	8009dc4 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 8009d9e:	2300      	movs	r3, #0
 8009da0:	73fb      	strb	r3, [r7, #15]
      break;
 8009da2:	e00f      	b.n	8009dc4 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8009da4:	bf00      	nop
 8009da6:	e00e      	b.n	8009dc6 <USBH_HandleEnum+0x3be>
      break;
 8009da8:	bf00      	nop
 8009daa:	e00c      	b.n	8009dc6 <USBH_HandleEnum+0x3be>
      break;
 8009dac:	bf00      	nop
 8009dae:	e00a      	b.n	8009dc6 <USBH_HandleEnum+0x3be>
      break;
 8009db0:	bf00      	nop
 8009db2:	e008      	b.n	8009dc6 <USBH_HandleEnum+0x3be>
      break;
 8009db4:	bf00      	nop
 8009db6:	e006      	b.n	8009dc6 <USBH_HandleEnum+0x3be>
      break;
 8009db8:	bf00      	nop
 8009dba:	e004      	b.n	8009dc6 <USBH_HandleEnum+0x3be>
      break;
 8009dbc:	bf00      	nop
 8009dbe:	e002      	b.n	8009dc6 <USBH_HandleEnum+0x3be>
      break;
 8009dc0:	bf00      	nop
 8009dc2:	e000      	b.n	8009dc6 <USBH_HandleEnum+0x3be>
      break;
 8009dc4:	bf00      	nop
  }
  return Status;
 8009dc6:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dc8:	4618      	mov	r0, r3
 8009dca:	3710      	adds	r7, #16
 8009dcc:	46bd      	mov	sp, r7
 8009dce:	bd80      	pop	{r7, pc}

08009dd0 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8009dd0:	b480      	push	{r7}
 8009dd2:	b083      	sub	sp, #12
 8009dd4:	af00      	add	r7, sp, #0
 8009dd6:	6078      	str	r0, [r7, #4]
 8009dd8:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	683a      	ldr	r2, [r7, #0]
 8009dde:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8009de2:	bf00      	nop
 8009de4:	370c      	adds	r7, #12
 8009de6:	46bd      	mov	sp, r7
 8009de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dec:	4770      	bx	lr

08009dee <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8009dee:	b580      	push	{r7, lr}
 8009df0:	b082      	sub	sp, #8
 8009df2:	af00      	add	r7, sp, #0
 8009df4:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8009dfc:	1c5a      	adds	r2, r3, #1
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8009e04:	6878      	ldr	r0, [r7, #4]
 8009e06:	f000 f804 	bl	8009e12 <USBH_HandleSof>
}
 8009e0a:	bf00      	nop
 8009e0c:	3708      	adds	r7, #8
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b082      	sub	sp, #8
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	b2db      	uxtb	r3, r3
 8009e20:	2b0b      	cmp	r3, #11
 8009e22:	d10a      	bne.n	8009e3a <USBH_HandleSof+0x28>
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e2a:	2b00      	cmp	r3, #0
 8009e2c:	d005      	beq.n	8009e3a <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8009e2e:	687b      	ldr	r3, [r7, #4]
 8009e30:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8009e34:	699b      	ldr	r3, [r3, #24]
 8009e36:	6878      	ldr	r0, [r7, #4]
 8009e38:	4798      	blx	r3
  }
}
 8009e3a:	bf00      	nop
 8009e3c:	3708      	adds	r7, #8
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	bd80      	pop	{r7, pc}

08009e42 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8009e42:	b480      	push	{r7}
 8009e44:	b083      	sub	sp, #12
 8009e46:	af00      	add	r7, sp, #0
 8009e48:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	2201      	movs	r2, #1
 8009e4e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8009e52:	bf00      	nop
}
 8009e54:	370c      	adds	r7, #12
 8009e56:	46bd      	mov	sp, r7
 8009e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5c:	4770      	bx	lr

08009e5e <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8009e5e:	b480      	push	{r7}
 8009e60:	b083      	sub	sp, #12
 8009e62:	af00      	add	r7, sp, #0
 8009e64:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8009e6e:	bf00      	nop
}
 8009e70:	370c      	adds	r7, #12
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	b083      	sub	sp, #12
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	2201      	movs	r2, #1
 8009e86:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	2200      	movs	r2, #0
 8009e8e:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	2200      	movs	r2, #0
 8009e96:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009e9a:	2300      	movs	r3, #0
}
 8009e9c:	4618      	mov	r0, r3
 8009e9e:	370c      	adds	r7, #12
 8009ea0:	46bd      	mov	sp, r7
 8009ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ea6:	4770      	bx	lr

08009ea8 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009ea8:	b580      	push	{r7, lr}
 8009eaa:	b082      	sub	sp, #8
 8009eac:	af00      	add	r7, sp, #0
 8009eae:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	2200      	movs	r2, #0
 8009ebc:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009ec8:	6878      	ldr	r0, [r7, #4]
 8009eca:	f003 fbd2 	bl	800d672 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	791b      	ldrb	r3, [r3, #4]
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 fe93 	bl	800ac00 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	795b      	ldrb	r3, [r3, #5]
 8009ede:	4619      	mov	r1, r3
 8009ee0:	6878      	ldr	r0, [r7, #4]
 8009ee2:	f000 fe8d 	bl	800ac00 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009ee6:	2300      	movs	r3, #0
}
 8009ee8:	4618      	mov	r0, r3
 8009eea:	3708      	adds	r7, #8
 8009eec:	46bd      	mov	sp, r7
 8009eee:	bd80      	pop	{r7, pc}

08009ef0 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 8009ef0:	b580      	push	{r7, lr}
 8009ef2:	b086      	sub	sp, #24
 8009ef4:	af02      	add	r7, sp, #8
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	460b      	mov	r3, r1
 8009efa:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009f02:	78fb      	ldrb	r3, [r7, #3]
 8009f04:	b29b      	uxth	r3, r3
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	4613      	mov	r3, r2
 8009f0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009f0e:	2100      	movs	r1, #0
 8009f10:	6878      	ldr	r0, [r7, #4]
 8009f12:	f000 f864 	bl	8009fde <USBH_GetDescriptor>
 8009f16:	4603      	mov	r3, r0
 8009f18:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 8009f1a:	7bfb      	ldrb	r3, [r7, #15]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d10a      	bne.n	8009f36 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f203 3026 	addw	r0, r3, #806	; 0x326
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009f2c:	78fa      	ldrb	r2, [r7, #3]
 8009f2e:	b292      	uxth	r2, r2
 8009f30:	4619      	mov	r1, r3
 8009f32:	f000 f919 	bl	800a168 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 8009f36:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f38:	4618      	mov	r0, r3
 8009f3a:	3710      	adds	r7, #16
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}

08009f40 <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af02      	add	r7, sp, #8
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	460b      	mov	r3, r1
 8009f4a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	331c      	adds	r3, #28
 8009f50:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009f52:	887b      	ldrh	r3, [r7, #2]
 8009f54:	9300      	str	r3, [sp, #0]
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009f5c:	2100      	movs	r1, #0
 8009f5e:	6878      	ldr	r0, [r7, #4]
 8009f60:	f000 f83d 	bl	8009fde <USBH_GetDescriptor>
 8009f64:	4603      	mov	r3, r0
 8009f66:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009f68:	7bfb      	ldrb	r3, [r7, #15]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d107      	bne.n	8009f7e <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 8009f6e:	887b      	ldrh	r3, [r7, #2]
 8009f70:	461a      	mov	r2, r3
 8009f72:	68b9      	ldr	r1, [r7, #8]
 8009f74:	6878      	ldr	r0, [r7, #4]
 8009f76:	f000 f989 	bl	800a28c <USBH_ParseCfgDesc>
 8009f7a:	4603      	mov	r3, r0
 8009f7c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8009f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f80:	4618      	mov	r0, r3
 8009f82:	3710      	adds	r7, #16
 8009f84:	46bd      	mov	sp, r7
 8009f86:	bd80      	pop	{r7, pc}

08009f88 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8009f88:	b580      	push	{r7, lr}
 8009f8a:	b088      	sub	sp, #32
 8009f8c:	af02      	add	r7, sp, #8
 8009f8e:	60f8      	str	r0, [r7, #12]
 8009f90:	607a      	str	r2, [r7, #4]
 8009f92:	461a      	mov	r2, r3
 8009f94:	460b      	mov	r3, r1
 8009f96:	72fb      	strb	r3, [r7, #11]
 8009f98:	4613      	mov	r3, r2
 8009f9a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8009f9c:	7afb      	ldrb	r3, [r7, #11]
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009fa4:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8009fac:	893b      	ldrh	r3, [r7, #8]
 8009fae:	9300      	str	r3, [sp, #0]
 8009fb0:	460b      	mov	r3, r1
 8009fb2:	2100      	movs	r1, #0
 8009fb4:	68f8      	ldr	r0, [r7, #12]
 8009fb6:	f000 f812 	bl	8009fde <USBH_GetDescriptor>
 8009fba:	4603      	mov	r3, r0
 8009fbc:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009fbe:	7dfb      	ldrb	r3, [r7, #23]
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d107      	bne.n	8009fd4 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8009fca:	893a      	ldrh	r2, [r7, #8]
 8009fcc:	6879      	ldr	r1, [r7, #4]
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f000 fb26 	bl	800a620 <USBH_ParseStringDesc>
  }

  return status;
 8009fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009fd6:	4618      	mov	r0, r3
 8009fd8:	3718      	adds	r7, #24
 8009fda:	46bd      	mov	sp, r7
 8009fdc:	bd80      	pop	{r7, pc}

08009fde <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 8009fde:	b580      	push	{r7, lr}
 8009fe0:	b084      	sub	sp, #16
 8009fe2:	af00      	add	r7, sp, #0
 8009fe4:	60f8      	str	r0, [r7, #12]
 8009fe6:	607b      	str	r3, [r7, #4]
 8009fe8:	460b      	mov	r3, r1
 8009fea:	72fb      	strb	r3, [r7, #11]
 8009fec:	4613      	mov	r3, r2
 8009fee:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	789b      	ldrb	r3, [r3, #2]
 8009ff4:	2b01      	cmp	r3, #1
 8009ff6:	d11c      	bne.n	800a032 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8009ff8:	7afb      	ldrb	r3, [r7, #11]
 8009ffa:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009ffe:	b2da      	uxtb	r2, r3
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	2206      	movs	r2, #6
 800a008:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	893a      	ldrh	r2, [r7, #8]
 800a00e:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800a010:	893b      	ldrh	r3, [r7, #8]
 800a012:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a016:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a01a:	d104      	bne.n	800a026 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800a01c:	68fb      	ldr	r3, [r7, #12]
 800a01e:	f240 4209 	movw	r2, #1033	; 0x409
 800a022:	829a      	strh	r2, [r3, #20]
 800a024:	e002      	b.n	800a02c <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800a026:	68fb      	ldr	r3, [r7, #12]
 800a028:	2200      	movs	r2, #0
 800a02a:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800a02c:	68fb      	ldr	r3, [r7, #12]
 800a02e:	8b3a      	ldrh	r2, [r7, #24]
 800a030:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800a032:	8b3b      	ldrh	r3, [r7, #24]
 800a034:	461a      	mov	r2, r3
 800a036:	6879      	ldr	r1, [r7, #4]
 800a038:	68f8      	ldr	r0, [r7, #12]
 800a03a:	f000 fb3f 	bl	800a6bc <USBH_CtlReq>
 800a03e:	4603      	mov	r3, r0
}
 800a040:	4618      	mov	r0, r3
 800a042:	3710      	adds	r7, #16
 800a044:	46bd      	mov	sp, r7
 800a046:	bd80      	pop	{r7, pc}

0800a048 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800a048:	b580      	push	{r7, lr}
 800a04a:	b082      	sub	sp, #8
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
 800a050:	460b      	mov	r3, r1
 800a052:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	789b      	ldrb	r3, [r3, #2]
 800a058:	2b01      	cmp	r3, #1
 800a05a:	d10f      	bne.n	800a07c <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2200      	movs	r2, #0
 800a060:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	2205      	movs	r2, #5
 800a066:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800a068:	78fb      	ldrb	r3, [r7, #3]
 800a06a:	b29a      	uxth	r2, r3
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	2200      	movs	r2, #0
 800a074:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a07c:	2200      	movs	r2, #0
 800a07e:	2100      	movs	r1, #0
 800a080:	6878      	ldr	r0, [r7, #4]
 800a082:	f000 fb1b 	bl	800a6bc <USBH_CtlReq>
 800a086:	4603      	mov	r3, r0
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3708      	adds	r7, #8
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800a090:	b580      	push	{r7, lr}
 800a092:	b082      	sub	sp, #8
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
 800a098:	460b      	mov	r3, r1
 800a09a:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	789b      	ldrb	r3, [r3, #2]
 800a0a0:	2b01      	cmp	r3, #1
 800a0a2:	d10e      	bne.n	800a0c2 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	2209      	movs	r2, #9
 800a0ae:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	887a      	ldrh	r2, [r7, #2]
 800a0b4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	2200      	movs	r2, #0
 800a0ba:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	2100      	movs	r1, #0
 800a0c6:	6878      	ldr	r0, [r7, #4]
 800a0c8:	f000 faf8 	bl	800a6bc <USBH_CtlReq>
 800a0cc:	4603      	mov	r3, r0
}
 800a0ce:	4618      	mov	r0, r3
 800a0d0:	3708      	adds	r7, #8
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	bd80      	pop	{r7, pc}

0800a0d6 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800a0d6:	b580      	push	{r7, lr}
 800a0d8:	b082      	sub	sp, #8
 800a0da:	af00      	add	r7, sp, #0
 800a0dc:	6078      	str	r0, [r7, #4]
 800a0de:	460b      	mov	r3, r1
 800a0e0:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	789b      	ldrb	r3, [r3, #2]
 800a0e6:	2b01      	cmp	r3, #1
 800a0e8:	d10f      	bne.n	800a10a <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	2200      	movs	r2, #0
 800a0ee:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	2203      	movs	r2, #3
 800a0f4:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800a0f6:	78fb      	ldrb	r3, [r7, #3]
 800a0f8:	b29a      	uxth	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2200      	movs	r2, #0
 800a102:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	2200      	movs	r2, #0
 800a108:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800a10a:	2200      	movs	r2, #0
 800a10c:	2100      	movs	r1, #0
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 fad4 	bl	800a6bc <USBH_CtlReq>
 800a114:	4603      	mov	r3, r0
}
 800a116:	4618      	mov	r0, r3
 800a118:	3708      	adds	r7, #8
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bd80      	pop	{r7, pc}

0800a11e <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800a11e:	b580      	push	{r7, lr}
 800a120:	b082      	sub	sp, #8
 800a122:	af00      	add	r7, sp, #0
 800a124:	6078      	str	r0, [r7, #4]
 800a126:	460b      	mov	r3, r1
 800a128:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	789b      	ldrb	r3, [r3, #2]
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d10f      	bne.n	800a152 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	2202      	movs	r2, #2
 800a136:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	2201      	movs	r2, #1
 800a13c:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	2200      	movs	r2, #0
 800a142:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800a144:	78fb      	ldrb	r3, [r7, #3]
 800a146:	b29a      	uxth	r2, r3
 800a148:	687b      	ldr	r3, [r7, #4]
 800a14a:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	2200      	movs	r2, #0
 800a150:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 800a152:	2200      	movs	r2, #0
 800a154:	2100      	movs	r1, #0
 800a156:	6878      	ldr	r0, [r7, #4]
 800a158:	f000 fab0 	bl	800a6bc <USBH_CtlReq>
 800a15c:	4603      	mov	r3, r0
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3708      	adds	r7, #8
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
	...

0800a168 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 800a168:	b480      	push	{r7}
 800a16a:	b085      	sub	sp, #20
 800a16c:	af00      	add	r7, sp, #0
 800a16e:	60f8      	str	r0, [r7, #12]
 800a170:	60b9      	str	r1, [r7, #8]
 800a172:	4613      	mov	r3, r2
 800a174:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 800a176:	68bb      	ldr	r3, [r7, #8]
 800a178:	781a      	ldrb	r2, [r3, #0]
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 800a17e:	68bb      	ldr	r3, [r7, #8]
 800a180:	785a      	ldrb	r2, [r3, #1]
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 800a186:	68bb      	ldr	r3, [r7, #8]
 800a188:	3302      	adds	r3, #2
 800a18a:	781b      	ldrb	r3, [r3, #0]
 800a18c:	b29a      	uxth	r2, r3
 800a18e:	68bb      	ldr	r3, [r7, #8]
 800a190:	3303      	adds	r3, #3
 800a192:	781b      	ldrb	r3, [r3, #0]
 800a194:	b29b      	uxth	r3, r3
 800a196:	021b      	lsls	r3, r3, #8
 800a198:	b29b      	uxth	r3, r3
 800a19a:	4313      	orrs	r3, r2
 800a19c:	b29a      	uxth	r2, r3
 800a19e:	68fb      	ldr	r3, [r7, #12]
 800a1a0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800a1a2:	68bb      	ldr	r3, [r7, #8]
 800a1a4:	791a      	ldrb	r2, [r3, #4]
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 800a1aa:	68bb      	ldr	r3, [r7, #8]
 800a1ac:	795a      	ldrb	r2, [r3, #5]
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800a1b2:	68bb      	ldr	r3, [r7, #8]
 800a1b4:	799a      	ldrb	r2, [r3, #6]
 800a1b6:	68fb      	ldr	r3, [r7, #12]
 800a1b8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 800a1ba:	68bb      	ldr	r3, [r7, #8]
 800a1bc:	79da      	ldrb	r2, [r3, #7]
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	79db      	ldrb	r3, [r3, #7]
 800a1c6:	2b20      	cmp	r3, #32
 800a1c8:	dc0f      	bgt.n	800a1ea <USBH_ParseDevDesc+0x82>
 800a1ca:	2b08      	cmp	r3, #8
 800a1cc:	db14      	blt.n	800a1f8 <USBH_ParseDevDesc+0x90>
 800a1ce:	3b08      	subs	r3, #8
 800a1d0:	4a2d      	ldr	r2, [pc, #180]	; (800a288 <USBH_ParseDevDesc+0x120>)
 800a1d2:	fa22 f303 	lsr.w	r3, r2, r3
 800a1d6:	f003 0301 	and.w	r3, r3, #1
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	bf14      	ite	ne
 800a1de:	2301      	movne	r3, #1
 800a1e0:	2300      	moveq	r3, #0
 800a1e2:	b2db      	uxtb	r3, r3
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d102      	bne.n	800a1ee <USBH_ParseDevDesc+0x86>
 800a1e8:	e006      	b.n	800a1f8 <USBH_ParseDevDesc+0x90>
 800a1ea:	2b40      	cmp	r3, #64	; 0x40
 800a1ec:	d104      	bne.n	800a1f8 <USBH_ParseDevDesc+0x90>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	79da      	ldrb	r2, [r3, #7]
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	71da      	strb	r2, [r3, #7]
      break;
 800a1f6:	e003      	b.n	800a200 <USBH_ParseDevDesc+0x98>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2240      	movs	r2, #64	; 0x40
 800a1fc:	71da      	strb	r2, [r3, #7]
      break;
 800a1fe:	bf00      	nop
  }

  if (length > 8U)
 800a200:	88fb      	ldrh	r3, [r7, #6]
 800a202:	2b08      	cmp	r3, #8
 800a204:	d939      	bls.n	800a27a <USBH_ParseDevDesc+0x112>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	3308      	adds	r3, #8
 800a20a:	781b      	ldrb	r3, [r3, #0]
 800a20c:	b29a      	uxth	r2, r3
 800a20e:	68bb      	ldr	r3, [r7, #8]
 800a210:	3309      	adds	r3, #9
 800a212:	781b      	ldrb	r3, [r3, #0]
 800a214:	b29b      	uxth	r3, r3
 800a216:	021b      	lsls	r3, r3, #8
 800a218:	b29b      	uxth	r3, r3
 800a21a:	4313      	orrs	r3, r2
 800a21c:	b29a      	uxth	r2, r3
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	330a      	adds	r3, #10
 800a226:	781b      	ldrb	r3, [r3, #0]
 800a228:	b29a      	uxth	r2, r3
 800a22a:	68bb      	ldr	r3, [r7, #8]
 800a22c:	330b      	adds	r3, #11
 800a22e:	781b      	ldrb	r3, [r3, #0]
 800a230:	b29b      	uxth	r3, r3
 800a232:	021b      	lsls	r3, r3, #8
 800a234:	b29b      	uxth	r3, r3
 800a236:	4313      	orrs	r3, r2
 800a238:	b29a      	uxth	r2, r3
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 800a23e:	68bb      	ldr	r3, [r7, #8]
 800a240:	330c      	adds	r3, #12
 800a242:	781b      	ldrb	r3, [r3, #0]
 800a244:	b29a      	uxth	r2, r3
 800a246:	68bb      	ldr	r3, [r7, #8]
 800a248:	330d      	adds	r3, #13
 800a24a:	781b      	ldrb	r3, [r3, #0]
 800a24c:	b29b      	uxth	r3, r3
 800a24e:	021b      	lsls	r3, r3, #8
 800a250:	b29b      	uxth	r3, r3
 800a252:	4313      	orrs	r3, r2
 800a254:	b29a      	uxth	r2, r3
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	7b9a      	ldrb	r2, [r3, #14]
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 800a262:	68bb      	ldr	r3, [r7, #8]
 800a264:	7bda      	ldrb	r2, [r3, #15]
 800a266:	68fb      	ldr	r3, [r7, #12]
 800a268:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 800a26a:	68bb      	ldr	r3, [r7, #8]
 800a26c:	7c1a      	ldrb	r2, [r3, #16]
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 800a272:	68bb      	ldr	r3, [r7, #8]
 800a274:	7c5a      	ldrb	r2, [r3, #17]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	745a      	strb	r2, [r3, #17]
  }
}
 800a27a:	bf00      	nop
 800a27c:	3714      	adds	r7, #20
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	01000101 	.word	0x01000101

0800a28c <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b08c      	sub	sp, #48	; 0x30
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	4613      	mov	r3, r2
 800a298:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	f503 734e 	add.w	r3, r3, #824	; 0x338
 800a2a0:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800a2ac:	2300      	movs	r3, #0
 800a2ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 800a2bc:	68bb      	ldr	r3, [r7, #8]
 800a2be:	781a      	ldrb	r2, [r3, #0]
 800a2c0:	6a3b      	ldr	r3, [r7, #32]
 800a2c2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	785a      	ldrb	r2, [r3, #1]
 800a2c8:	6a3b      	ldr	r3, [r7, #32]
 800a2ca:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	3302      	adds	r3, #2
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	b29a      	uxth	r2, r3
 800a2d4:	68bb      	ldr	r3, [r7, #8]
 800a2d6:	3303      	adds	r3, #3
 800a2d8:	781b      	ldrb	r3, [r3, #0]
 800a2da:	b29b      	uxth	r3, r3
 800a2dc:	021b      	lsls	r3, r3, #8
 800a2de:	b29b      	uxth	r3, r3
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	b29b      	uxth	r3, r3
 800a2e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a2e8:	bf28      	it	cs
 800a2ea:	f44f 7380 	movcs.w	r3, #256	; 0x100
 800a2ee:	b29a      	uxth	r2, r3
 800a2f0:	6a3b      	ldr	r3, [r7, #32]
 800a2f2:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800a2f4:	68bb      	ldr	r3, [r7, #8]
 800a2f6:	791a      	ldrb	r2, [r3, #4]
 800a2f8:	6a3b      	ldr	r3, [r7, #32]
 800a2fa:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	795a      	ldrb	r2, [r3, #5]
 800a300:	6a3b      	ldr	r3, [r7, #32]
 800a302:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800a304:	68bb      	ldr	r3, [r7, #8]
 800a306:	799a      	ldrb	r2, [r3, #6]
 800a308:	6a3b      	ldr	r3, [r7, #32]
 800a30a:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	79da      	ldrb	r2, [r3, #7]
 800a310:	6a3b      	ldr	r3, [r7, #32]
 800a312:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800a314:	68bb      	ldr	r3, [r7, #8]
 800a316:	7a1a      	ldrb	r2, [r3, #8]
 800a318:	6a3b      	ldr	r3, [r7, #32]
 800a31a:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 800a31c:	6a3b      	ldr	r3, [r7, #32]
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	2b09      	cmp	r3, #9
 800a322:	d002      	beq.n	800a32a <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800a324:	6a3b      	ldr	r3, [r7, #32]
 800a326:	2209      	movs	r2, #9
 800a328:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800a32a:	88fb      	ldrh	r3, [r7, #6]
 800a32c:	2b09      	cmp	r3, #9
 800a32e:	f240 809d 	bls.w	800a46c <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 800a332:	2309      	movs	r3, #9
 800a334:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800a336:	2300      	movs	r3, #0
 800a338:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a33a:	e081      	b.n	800a440 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a33c:	f107 0316 	add.w	r3, r7, #22
 800a340:	4619      	mov	r1, r3
 800a342:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a344:	f000 f99f 	bl	800a686 <USBH_GetNextDesc>
 800a348:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800a34a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a34c:	785b      	ldrb	r3, [r3, #1]
 800a34e:	2b04      	cmp	r3, #4
 800a350:	d176      	bne.n	800a440 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800a352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a354:	781b      	ldrb	r3, [r3, #0]
 800a356:	2b09      	cmp	r3, #9
 800a358:	d002      	beq.n	800a360 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800a35a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a35c:	2209      	movs	r2, #9
 800a35e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800a360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a364:	221a      	movs	r2, #26
 800a366:	fb02 f303 	mul.w	r3, r2, r3
 800a36a:	3308      	adds	r3, #8
 800a36c:	6a3a      	ldr	r2, [r7, #32]
 800a36e:	4413      	add	r3, r2
 800a370:	3302      	adds	r3, #2
 800a372:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800a374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a376:	69f8      	ldr	r0, [r7, #28]
 800a378:	f000 f87e 	bl	800a478 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800a37c:	2300      	movs	r3, #0
 800a37e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800a382:	2300      	movs	r3, #0
 800a384:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a386:	e043      	b.n	800a410 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800a388:	f107 0316 	add.w	r3, r7, #22
 800a38c:	4619      	mov	r1, r3
 800a38e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a390:	f000 f979 	bl	800a686 <USBH_GetNextDesc>
 800a394:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a398:	785b      	ldrb	r3, [r3, #1]
 800a39a:	2b05      	cmp	r3, #5
 800a39c:	d138      	bne.n	800a410 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	795b      	ldrb	r3, [r3, #5]
 800a3a2:	2b01      	cmp	r3, #1
 800a3a4:	d10f      	bne.n	800a3c6 <USBH_ParseCfgDesc+0x13a>
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	799b      	ldrb	r3, [r3, #6]
 800a3aa:	2b02      	cmp	r3, #2
 800a3ac:	d10b      	bne.n	800a3c6 <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	79db      	ldrb	r3, [r3, #7]
 800a3b2:	2b00      	cmp	r3, #0
 800a3b4:	d10f      	bne.n	800a3d6 <USBH_ParseCfgDesc+0x14a>
 800a3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b8:	781b      	ldrb	r3, [r3, #0]
 800a3ba:	2b09      	cmp	r3, #9
 800a3bc:	d00b      	beq.n	800a3d6 <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 800a3be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c0:	2209      	movs	r2, #9
 800a3c2:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a3c4:	e007      	b.n	800a3d6 <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800a3c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3c8:	781b      	ldrb	r3, [r3, #0]
 800a3ca:	2b07      	cmp	r3, #7
 800a3cc:	d004      	beq.n	800a3d8 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800a3ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3d0:	2207      	movs	r2, #7
 800a3d2:	701a      	strb	r2, [r3, #0]
 800a3d4:	e000      	b.n	800a3d8 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800a3d6:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800a3d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a3dc:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a3e0:	3201      	adds	r2, #1
 800a3e2:	00d2      	lsls	r2, r2, #3
 800a3e4:	211a      	movs	r1, #26
 800a3e6:	fb01 f303 	mul.w	r3, r1, r3
 800a3ea:	4413      	add	r3, r2
 800a3ec:	3308      	adds	r3, #8
 800a3ee:	6a3a      	ldr	r2, [r7, #32]
 800a3f0:	4413      	add	r3, r2
 800a3f2:	3304      	adds	r3, #4
 800a3f4:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800a3f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a3f8:	69b9      	ldr	r1, [r7, #24]
 800a3fa:	68f8      	ldr	r0, [r7, #12]
 800a3fc:	f000 f86b 	bl	800a4d6 <USBH_ParseEPDesc>
 800a400:	4603      	mov	r3, r0
 800a402:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800a406:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800a40a:	3301      	adds	r3, #1
 800a40c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800a410:	69fb      	ldr	r3, [r7, #28]
 800a412:	791b      	ldrb	r3, [r3, #4]
 800a414:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a418:	429a      	cmp	r2, r3
 800a41a:	d204      	bcs.n	800a426 <USBH_ParseCfgDesc+0x19a>
 800a41c:	6a3b      	ldr	r3, [r7, #32]
 800a41e:	885a      	ldrh	r2, [r3, #2]
 800a420:	8afb      	ldrh	r3, [r7, #22]
 800a422:	429a      	cmp	r2, r3
 800a424:	d8b0      	bhi.n	800a388 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	791b      	ldrb	r3, [r3, #4]
 800a42a:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 800a42e:	429a      	cmp	r2, r3
 800a430:	d201      	bcs.n	800a436 <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 800a432:	2303      	movs	r3, #3
 800a434:	e01c      	b.n	800a470 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 800a436:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a43a:	3301      	adds	r3, #1
 800a43c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800a440:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a444:	2b01      	cmp	r3, #1
 800a446:	d805      	bhi.n	800a454 <USBH_ParseCfgDesc+0x1c8>
 800a448:	6a3b      	ldr	r3, [r7, #32]
 800a44a:	885a      	ldrh	r2, [r3, #2]
 800a44c:	8afb      	ldrh	r3, [r7, #22]
 800a44e:	429a      	cmp	r2, r3
 800a450:	f63f af74 	bhi.w	800a33c <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800a454:	6a3b      	ldr	r3, [r7, #32]
 800a456:	791b      	ldrb	r3, [r3, #4]
 800a458:	2b02      	cmp	r3, #2
 800a45a:	bf28      	it	cs
 800a45c:	2302      	movcs	r3, #2
 800a45e:	b2db      	uxtb	r3, r3
 800a460:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800a464:	429a      	cmp	r2, r3
 800a466:	d201      	bcs.n	800a46c <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 800a468:	2303      	movs	r3, #3
 800a46a:	e001      	b.n	800a470 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 800a46c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800a470:	4618      	mov	r0, r3
 800a472:	3730      	adds	r7, #48	; 0x30
 800a474:	46bd      	mov	sp, r7
 800a476:	bd80      	pop	{r7, pc}

0800a478 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 800a478:	b480      	push	{r7}
 800a47a:	b083      	sub	sp, #12
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
 800a480:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800a482:	683b      	ldr	r3, [r7, #0]
 800a484:	781a      	ldrb	r2, [r3, #0]
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 800a48a:	683b      	ldr	r3, [r7, #0]
 800a48c:	785a      	ldrb	r2, [r3, #1]
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800a492:	683b      	ldr	r3, [r7, #0]
 800a494:	789a      	ldrb	r2, [r3, #2]
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 800a49a:	683b      	ldr	r3, [r7, #0]
 800a49c:	78da      	ldrb	r2, [r3, #3]
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800a4a2:	683b      	ldr	r3, [r7, #0]
 800a4a4:	791a      	ldrb	r2, [r3, #4]
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 800a4aa:	683b      	ldr	r3, [r7, #0]
 800a4ac:	795a      	ldrb	r2, [r3, #5]
 800a4ae:	687b      	ldr	r3, [r7, #4]
 800a4b0:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	799a      	ldrb	r2, [r3, #6]
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 800a4ba:	683b      	ldr	r3, [r7, #0]
 800a4bc:	79da      	ldrb	r2, [r3, #7]
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800a4c2:	683b      	ldr	r3, [r7, #0]
 800a4c4:	7a1a      	ldrb	r2, [r3, #8]
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	721a      	strb	r2, [r3, #8]
}
 800a4ca:	bf00      	nop
 800a4cc:	370c      	adds	r7, #12
 800a4ce:	46bd      	mov	sp, r7
 800a4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d4:	4770      	bx	lr

0800a4d6 <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800a4d6:	b480      	push	{r7}
 800a4d8:	b087      	sub	sp, #28
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	60f8      	str	r0, [r7, #12]
 800a4de:	60b9      	str	r1, [r7, #8]
 800a4e0:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800a4e2:	2300      	movs	r3, #0
 800a4e4:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	781a      	ldrb	r2, [r3, #0]
 800a4ea:	68bb      	ldr	r3, [r7, #8]
 800a4ec:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	785a      	ldrb	r2, [r3, #1]
 800a4f2:	68bb      	ldr	r3, [r7, #8]
 800a4f4:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	789a      	ldrb	r2, [r3, #2]
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	78da      	ldrb	r2, [r3, #3]
 800a502:	68bb      	ldr	r3, [r7, #8]
 800a504:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800a506:	687b      	ldr	r3, [r7, #4]
 800a508:	3304      	adds	r3, #4
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	b29a      	uxth	r2, r3
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	3305      	adds	r3, #5
 800a512:	781b      	ldrb	r3, [r3, #0]
 800a514:	b29b      	uxth	r3, r3
 800a516:	021b      	lsls	r3, r3, #8
 800a518:	b29b      	uxth	r3, r3
 800a51a:	4313      	orrs	r3, r2
 800a51c:	b29a      	uxth	r2, r3
 800a51e:	68bb      	ldr	r3, [r7, #8]
 800a520:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	799a      	ldrb	r2, [r3, #6]
 800a526:	68bb      	ldr	r3, [r7, #8]
 800a528:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 800a52a:	68bb      	ldr	r3, [r7, #8]
 800a52c:	889b      	ldrh	r3, [r3, #4]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d102      	bne.n	800a538 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 800a532:	2303      	movs	r3, #3
 800a534:	75fb      	strb	r3, [r7, #23]
 800a536:	e033      	b.n	800a5a0 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 800a538:	68bb      	ldr	r3, [r7, #8]
 800a53a:	889b      	ldrh	r3, [r3, #4]
 800a53c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a540:	f023 0307 	bic.w	r3, r3, #7
 800a544:	b29a      	uxth	r2, r3
 800a546:	68bb      	ldr	r3, [r7, #8]
 800a548:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 800a54a:	68bb      	ldr	r3, [r7, #8]
 800a54c:	889b      	ldrh	r3, [r3, #4]
 800a54e:	b21a      	sxth	r2, r3
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	3304      	adds	r3, #4
 800a554:	781b      	ldrb	r3, [r3, #0]
 800a556:	b299      	uxth	r1, r3
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	3305      	adds	r3, #5
 800a55c:	781b      	ldrb	r3, [r3, #0]
 800a55e:	b29b      	uxth	r3, r3
 800a560:	021b      	lsls	r3, r3, #8
 800a562:	b29b      	uxth	r3, r3
 800a564:	430b      	orrs	r3, r1
 800a566:	b29b      	uxth	r3, r3
 800a568:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d110      	bne.n	800a592 <USBH_ParseEPDesc+0xbc>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	3304      	adds	r3, #4
 800a574:	781b      	ldrb	r3, [r3, #0]
 800a576:	b299      	uxth	r1, r3
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	3305      	adds	r3, #5
 800a57c:	781b      	ldrb	r3, [r3, #0]
 800a57e:	b29b      	uxth	r3, r3
 800a580:	021b      	lsls	r3, r3, #8
 800a582:	b29b      	uxth	r3, r3
 800a584:	430b      	orrs	r3, r1
 800a586:	b29b      	uxth	r3, r3
 800a588:	b21b      	sxth	r3, r3
 800a58a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a58e:	b21b      	sxth	r3, r3
 800a590:	e001      	b.n	800a596 <USBH_ParseEPDesc+0xc0>
 800a592:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a596:	4313      	orrs	r3, r2
 800a598:	b21b      	sxth	r3, r3
 800a59a:	b29a      	uxth	r2, r3
 800a59c:	68bb      	ldr	r3, [r7, #8]
 800a59e:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d116      	bne.n	800a5d8 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a5aa:	68bb      	ldr	r3, [r7, #8]
 800a5ac:	78db      	ldrb	r3, [r3, #3]
 800a5ae:	f003 0303 	and.w	r3, r3, #3
 800a5b2:	2b01      	cmp	r3, #1
 800a5b4:	d005      	beq.n	800a5c2 <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800a5b6:	68bb      	ldr	r3, [r7, #8]
 800a5b8:	78db      	ldrb	r3, [r3, #3]
 800a5ba:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800a5be:	2b03      	cmp	r3, #3
 800a5c0:	d127      	bne.n	800a612 <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a5c2:	68bb      	ldr	r3, [r7, #8]
 800a5c4:	799b      	ldrb	r3, [r3, #6]
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d003      	beq.n	800a5d2 <USBH_ParseEPDesc+0xfc>
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	799b      	ldrb	r3, [r3, #6]
 800a5ce:	2b10      	cmp	r3, #16
 800a5d0:	d91f      	bls.n	800a612 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a5d2:	2303      	movs	r3, #3
 800a5d4:	75fb      	strb	r3, [r7, #23]
 800a5d6:	e01c      	b.n	800a612 <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	78db      	ldrb	r3, [r3, #3]
 800a5dc:	f003 0303 	and.w	r3, r3, #3
 800a5e0:	2b01      	cmp	r3, #1
 800a5e2:	d10a      	bne.n	800a5fa <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800a5e4:	68bb      	ldr	r3, [r7, #8]
 800a5e6:	799b      	ldrb	r3, [r3, #6]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d003      	beq.n	800a5f4 <USBH_ParseEPDesc+0x11e>
 800a5ec:	68bb      	ldr	r3, [r7, #8]
 800a5ee:	799b      	ldrb	r3, [r3, #6]
 800a5f0:	2b10      	cmp	r3, #16
 800a5f2:	d90e      	bls.n	800a612 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a5f4:	2303      	movs	r3, #3
 800a5f6:	75fb      	strb	r3, [r7, #23]
 800a5f8:	e00b      	b.n	800a612 <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800a5fa:	68bb      	ldr	r3, [r7, #8]
 800a5fc:	78db      	ldrb	r3, [r3, #3]
 800a5fe:	f003 0303 	and.w	r3, r3, #3
 800a602:	2b03      	cmp	r3, #3
 800a604:	d105      	bne.n	800a612 <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800a606:	68bb      	ldr	r3, [r7, #8]
 800a608:	799b      	ldrb	r3, [r3, #6]
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d101      	bne.n	800a612 <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800a60e:	2303      	movs	r3, #3
 800a610:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800a612:	7dfb      	ldrb	r3, [r7, #23]
}
 800a614:	4618      	mov	r0, r3
 800a616:	371c      	adds	r7, #28
 800a618:	46bd      	mov	sp, r7
 800a61a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61e:	4770      	bx	lr

0800a620 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800a620:	b480      	push	{r7}
 800a622:	b087      	sub	sp, #28
 800a624:	af00      	add	r7, sp, #0
 800a626:	60f8      	str	r0, [r7, #12]
 800a628:	60b9      	str	r1, [r7, #8]
 800a62a:	4613      	mov	r3, r2
 800a62c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800a62e:	68fb      	ldr	r3, [r7, #12]
 800a630:	3301      	adds	r3, #1
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	2b03      	cmp	r3, #3
 800a636:	d120      	bne.n	800a67a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800a638:	68fb      	ldr	r3, [r7, #12]
 800a63a:	781b      	ldrb	r3, [r3, #0]
 800a63c:	1e9a      	subs	r2, r3, #2
 800a63e:	88fb      	ldrh	r3, [r7, #6]
 800a640:	4293      	cmp	r3, r2
 800a642:	bf28      	it	cs
 800a644:	4613      	movcs	r3, r2
 800a646:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	3302      	adds	r3, #2
 800a64c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800a64e:	2300      	movs	r3, #0
 800a650:	82fb      	strh	r3, [r7, #22]
 800a652:	e00b      	b.n	800a66c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800a654:	8afb      	ldrh	r3, [r7, #22]
 800a656:	68fa      	ldr	r2, [r7, #12]
 800a658:	4413      	add	r3, r2
 800a65a:	781a      	ldrb	r2, [r3, #0]
 800a65c:	68bb      	ldr	r3, [r7, #8]
 800a65e:	701a      	strb	r2, [r3, #0]
      pdest++;
 800a660:	68bb      	ldr	r3, [r7, #8]
 800a662:	3301      	adds	r3, #1
 800a664:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800a666:	8afb      	ldrh	r3, [r7, #22]
 800a668:	3302      	adds	r3, #2
 800a66a:	82fb      	strh	r3, [r7, #22]
 800a66c:	8afa      	ldrh	r2, [r7, #22]
 800a66e:	8abb      	ldrh	r3, [r7, #20]
 800a670:	429a      	cmp	r2, r3
 800a672:	d3ef      	bcc.n	800a654 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800a674:	68bb      	ldr	r3, [r7, #8]
 800a676:	2200      	movs	r2, #0
 800a678:	701a      	strb	r2, [r3, #0]
  }
}
 800a67a:	bf00      	nop
 800a67c:	371c      	adds	r7, #28
 800a67e:	46bd      	mov	sp, r7
 800a680:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a684:	4770      	bx	lr

0800a686 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 800a686:	b480      	push	{r7}
 800a688:	b085      	sub	sp, #20
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
 800a68e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800a690:	683b      	ldr	r3, [r7, #0]
 800a692:	881a      	ldrh	r2, [r3, #0]
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	781b      	ldrb	r3, [r3, #0]
 800a698:	b29b      	uxth	r3, r3
 800a69a:	4413      	add	r3, r2
 800a69c:	b29a      	uxth	r2, r3
 800a69e:	683b      	ldr	r3, [r7, #0]
 800a6a0:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	781b      	ldrb	r3, [r3, #0]
 800a6a6:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	4413      	add	r3, r2
 800a6ac:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a6ae:	68fb      	ldr	r3, [r7, #12]
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3714      	adds	r7, #20
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr

0800a6bc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b086      	sub	sp, #24
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	60f8      	str	r0, [r7, #12]
 800a6c4:	60b9      	str	r1, [r7, #8]
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800a6ca:	2301      	movs	r3, #1
 800a6cc:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	789b      	ldrb	r3, [r3, #2]
 800a6d2:	2b01      	cmp	r3, #1
 800a6d4:	d002      	beq.n	800a6dc <USBH_CtlReq+0x20>
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d00f      	beq.n	800a6fa <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800a6da:	e027      	b.n	800a72c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	68ba      	ldr	r2, [r7, #8]
 800a6e0:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	88fa      	ldrh	r2, [r7, #6]
 800a6e6:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	2201      	movs	r2, #1
 800a6ec:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	2202      	movs	r2, #2
 800a6f2:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	75fb      	strb	r3, [r7, #23]
      break;
 800a6f8:	e018      	b.n	800a72c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800a6fa:	68f8      	ldr	r0, [r7, #12]
 800a6fc:	f000 f81c 	bl	800a738 <USBH_HandleControl>
 800a700:	4603      	mov	r3, r0
 800a702:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800a704:	7dfb      	ldrb	r3, [r7, #23]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d002      	beq.n	800a710 <USBH_CtlReq+0x54>
 800a70a:	7dfb      	ldrb	r3, [r7, #23]
 800a70c:	2b03      	cmp	r3, #3
 800a70e:	d106      	bne.n	800a71e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	2201      	movs	r2, #1
 800a714:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	2200      	movs	r2, #0
 800a71a:	761a      	strb	r2, [r3, #24]
      break;
 800a71c:	e005      	b.n	800a72a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800a71e:	7dfb      	ldrb	r3, [r7, #23]
 800a720:	2b02      	cmp	r3, #2
 800a722:	d102      	bne.n	800a72a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	2201      	movs	r2, #1
 800a728:	709a      	strb	r2, [r3, #2]
      break;
 800a72a:	bf00      	nop
  }
  return status;
 800a72c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a72e:	4618      	mov	r0, r3
 800a730:	3718      	adds	r7, #24
 800a732:	46bd      	mov	sp, r7
 800a734:	bd80      	pop	{r7, pc}
	...

0800a738 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800a738:	b580      	push	{r7, lr}
 800a73a:	b086      	sub	sp, #24
 800a73c:	af02      	add	r7, sp, #8
 800a73e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800a740:	2301      	movs	r3, #1
 800a742:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800a744:	2300      	movs	r3, #0
 800a746:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	7e1b      	ldrb	r3, [r3, #24]
 800a74c:	3b01      	subs	r3, #1
 800a74e:	2b0a      	cmp	r3, #10
 800a750:	f200 8156 	bhi.w	800aa00 <USBH_HandleControl+0x2c8>
 800a754:	a201      	add	r2, pc, #4	; (adr r2, 800a75c <USBH_HandleControl+0x24>)
 800a756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a75a:	bf00      	nop
 800a75c:	0800a789 	.word	0x0800a789
 800a760:	0800a7a3 	.word	0x0800a7a3
 800a764:	0800a80d 	.word	0x0800a80d
 800a768:	0800a833 	.word	0x0800a833
 800a76c:	0800a86b 	.word	0x0800a86b
 800a770:	0800a895 	.word	0x0800a895
 800a774:	0800a8e7 	.word	0x0800a8e7
 800a778:	0800a909 	.word	0x0800a909
 800a77c:	0800a945 	.word	0x0800a945
 800a780:	0800a96b 	.word	0x0800a96b
 800a784:	0800a9a9 	.word	0x0800a9a9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f103 0110 	add.w	r1, r3, #16
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	795b      	ldrb	r3, [r3, #5]
 800a792:	461a      	mov	r2, r3
 800a794:	6878      	ldr	r0, [r7, #4]
 800a796:	f000 f943 	bl	800aa20 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2202      	movs	r2, #2
 800a79e:	761a      	strb	r2, [r3, #24]
      break;
 800a7a0:	e139      	b.n	800aa16 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	795b      	ldrb	r3, [r3, #5]
 800a7a6:	4619      	mov	r1, r3
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f003 f851 	bl	800d850 <USBH_LL_GetURBState>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800a7b2:	7bbb      	ldrb	r3, [r7, #14]
 800a7b4:	2b01      	cmp	r3, #1
 800a7b6:	d11e      	bne.n	800a7f6 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	7c1b      	ldrb	r3, [r3, #16]
 800a7bc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a7c0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	8adb      	ldrh	r3, [r3, #22]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00a      	beq.n	800a7e0 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800a7ca:	7b7b      	ldrb	r3, [r7, #13]
 800a7cc:	2b80      	cmp	r3, #128	; 0x80
 800a7ce:	d103      	bne.n	800a7d8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2203      	movs	r2, #3
 800a7d4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a7d6:	e115      	b.n	800aa04 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	2205      	movs	r2, #5
 800a7dc:	761a      	strb	r2, [r3, #24]
      break;
 800a7de:	e111      	b.n	800aa04 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800a7e0:	7b7b      	ldrb	r3, [r7, #13]
 800a7e2:	2b80      	cmp	r3, #128	; 0x80
 800a7e4:	d103      	bne.n	800a7ee <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	2209      	movs	r2, #9
 800a7ea:	761a      	strb	r2, [r3, #24]
      break;
 800a7ec:	e10a      	b.n	800aa04 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	2207      	movs	r2, #7
 800a7f2:	761a      	strb	r2, [r3, #24]
      break;
 800a7f4:	e106      	b.n	800aa04 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800a7f6:	7bbb      	ldrb	r3, [r7, #14]
 800a7f8:	2b04      	cmp	r3, #4
 800a7fa:	d003      	beq.n	800a804 <USBH_HandleControl+0xcc>
 800a7fc:	7bbb      	ldrb	r3, [r7, #14]
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	f040 8100 	bne.w	800aa04 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	220b      	movs	r2, #11
 800a808:	761a      	strb	r2, [r3, #24]
      break;
 800a80a:	e0fb      	b.n	800aa04 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800a80c:	687b      	ldr	r3, [r7, #4]
 800a80e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a812:	b29a      	uxth	r2, r3
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	6899      	ldr	r1, [r3, #8]
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	899a      	ldrh	r2, [r3, #12]
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	791b      	ldrb	r3, [r3, #4]
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 f93a 	bl	800aa9e <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800a82a:	687b      	ldr	r3, [r7, #4]
 800a82c:	2204      	movs	r2, #4
 800a82e:	761a      	strb	r2, [r3, #24]
      break;
 800a830:	e0f1      	b.n	800aa16 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	791b      	ldrb	r3, [r3, #4]
 800a836:	4619      	mov	r1, r3
 800a838:	6878      	ldr	r0, [r7, #4]
 800a83a:	f003 f809 	bl	800d850 <USBH_LL_GetURBState>
 800a83e:	4603      	mov	r3, r0
 800a840:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800a842:	7bbb      	ldrb	r3, [r7, #14]
 800a844:	2b01      	cmp	r3, #1
 800a846:	d102      	bne.n	800a84e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2209      	movs	r2, #9
 800a84c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800a84e:	7bbb      	ldrb	r3, [r7, #14]
 800a850:	2b05      	cmp	r3, #5
 800a852:	d102      	bne.n	800a85a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800a854:	2303      	movs	r3, #3
 800a856:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a858:	e0d6      	b.n	800aa08 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800a85a:	7bbb      	ldrb	r3, [r7, #14]
 800a85c:	2b04      	cmp	r3, #4
 800a85e:	f040 80d3 	bne.w	800aa08 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	220b      	movs	r2, #11
 800a866:	761a      	strb	r2, [r3, #24]
      break;
 800a868:	e0ce      	b.n	800aa08 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	6899      	ldr	r1, [r3, #8]
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	899a      	ldrh	r2, [r3, #12]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	795b      	ldrb	r3, [r3, #5]
 800a876:	2001      	movs	r0, #1
 800a878:	9000      	str	r0, [sp, #0]
 800a87a:	6878      	ldr	r0, [r7, #4]
 800a87c:	f000 f8ea 	bl	800aa54 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a886:	b29a      	uxth	r2, r3
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	2206      	movs	r2, #6
 800a890:	761a      	strb	r2, [r3, #24]
      break;
 800a892:	e0c0      	b.n	800aa16 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	795b      	ldrb	r3, [r3, #5]
 800a898:	4619      	mov	r1, r3
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f002 ffd8 	bl	800d850 <USBH_LL_GetURBState>
 800a8a0:	4603      	mov	r3, r0
 800a8a2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a8a4:	7bbb      	ldrb	r3, [r7, #14]
 800a8a6:	2b01      	cmp	r3, #1
 800a8a8:	d103      	bne.n	800a8b2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	2207      	movs	r2, #7
 800a8ae:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a8b0:	e0ac      	b.n	800aa0c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800a8b2:	7bbb      	ldrb	r3, [r7, #14]
 800a8b4:	2b05      	cmp	r3, #5
 800a8b6:	d105      	bne.n	800a8c4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	220c      	movs	r2, #12
 800a8bc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800a8be:	2303      	movs	r3, #3
 800a8c0:	73fb      	strb	r3, [r7, #15]
      break;
 800a8c2:	e0a3      	b.n	800aa0c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a8c4:	7bbb      	ldrb	r3, [r7, #14]
 800a8c6:	2b02      	cmp	r3, #2
 800a8c8:	d103      	bne.n	800a8d2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	2205      	movs	r2, #5
 800a8ce:	761a      	strb	r2, [r3, #24]
      break;
 800a8d0:	e09c      	b.n	800aa0c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800a8d2:	7bbb      	ldrb	r3, [r7, #14]
 800a8d4:	2b04      	cmp	r3, #4
 800a8d6:	f040 8099 	bne.w	800aa0c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	220b      	movs	r2, #11
 800a8de:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a8e0:	2302      	movs	r3, #2
 800a8e2:	73fb      	strb	r3, [r7, #15]
      break;
 800a8e4:	e092      	b.n	800aa0c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	791b      	ldrb	r3, [r3, #4]
 800a8ea:	2200      	movs	r2, #0
 800a8ec:	2100      	movs	r1, #0
 800a8ee:	6878      	ldr	r0, [r7, #4]
 800a8f0:	f000 f8d5 	bl	800aa9e <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a8fa:	b29a      	uxth	r2, r3
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2208      	movs	r2, #8
 800a904:	761a      	strb	r2, [r3, #24]

      break;
 800a906:	e086      	b.n	800aa16 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	791b      	ldrb	r3, [r3, #4]
 800a90c:	4619      	mov	r1, r3
 800a90e:	6878      	ldr	r0, [r7, #4]
 800a910:	f002 ff9e 	bl	800d850 <USBH_LL_GetURBState>
 800a914:	4603      	mov	r3, r0
 800a916:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a918:	7bbb      	ldrb	r3, [r7, #14]
 800a91a:	2b01      	cmp	r3, #1
 800a91c:	d105      	bne.n	800a92a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a91e:	687b      	ldr	r3, [r7, #4]
 800a920:	220d      	movs	r2, #13
 800a922:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a924:	2300      	movs	r3, #0
 800a926:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a928:	e072      	b.n	800aa10 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a92a:	7bbb      	ldrb	r3, [r7, #14]
 800a92c:	2b04      	cmp	r3, #4
 800a92e:	d103      	bne.n	800a938 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	220b      	movs	r2, #11
 800a934:	761a      	strb	r2, [r3, #24]
      break;
 800a936:	e06b      	b.n	800aa10 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a938:	7bbb      	ldrb	r3, [r7, #14]
 800a93a:	2b05      	cmp	r3, #5
 800a93c:	d168      	bne.n	800aa10 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a93e:	2303      	movs	r3, #3
 800a940:	73fb      	strb	r3, [r7, #15]
      break;
 800a942:	e065      	b.n	800aa10 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	795b      	ldrb	r3, [r3, #5]
 800a948:	2201      	movs	r2, #1
 800a94a:	9200      	str	r2, [sp, #0]
 800a94c:	2200      	movs	r2, #0
 800a94e:	2100      	movs	r1, #0
 800a950:	6878      	ldr	r0, [r7, #4]
 800a952:	f000 f87f 	bl	800aa54 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800a95c:	b29a      	uxth	r2, r3
 800a95e:	687b      	ldr	r3, [r7, #4]
 800a960:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	220a      	movs	r2, #10
 800a966:	761a      	strb	r2, [r3, #24]
      break;
 800a968:	e055      	b.n	800aa16 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	795b      	ldrb	r3, [r3, #5]
 800a96e:	4619      	mov	r1, r3
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f002 ff6d 	bl	800d850 <USBH_LL_GetURBState>
 800a976:	4603      	mov	r3, r0
 800a978:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a97a:	7bbb      	ldrb	r3, [r7, #14]
 800a97c:	2b01      	cmp	r3, #1
 800a97e:	d105      	bne.n	800a98c <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a980:	2300      	movs	r3, #0
 800a982:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	220d      	movs	r2, #13
 800a988:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a98a:	e043      	b.n	800aa14 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a98c:	7bbb      	ldrb	r3, [r7, #14]
 800a98e:	2b02      	cmp	r3, #2
 800a990:	d103      	bne.n	800a99a <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	2209      	movs	r2, #9
 800a996:	761a      	strb	r2, [r3, #24]
      break;
 800a998:	e03c      	b.n	800aa14 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a99a:	7bbb      	ldrb	r3, [r7, #14]
 800a99c:	2b04      	cmp	r3, #4
 800a99e:	d139      	bne.n	800aa14 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	220b      	movs	r2, #11
 800a9a4:	761a      	strb	r2, [r3, #24]
      break;
 800a9a6:	e035      	b.n	800aa14 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	7e5b      	ldrb	r3, [r3, #25]
 800a9ac:	3301      	adds	r3, #1
 800a9ae:	b2da      	uxtb	r2, r3
 800a9b0:	687b      	ldr	r3, [r7, #4]
 800a9b2:	765a      	strb	r2, [r3, #25]
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	7e5b      	ldrb	r3, [r3, #25]
 800a9b8:	2b02      	cmp	r3, #2
 800a9ba:	d806      	bhi.n	800a9ca <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a9c8:	e025      	b.n	800aa16 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800a9d0:	2106      	movs	r1, #6
 800a9d2:	6878      	ldr	r0, [r7, #4]
 800a9d4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	2200      	movs	r2, #0
 800a9da:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	795b      	ldrb	r3, [r3, #5]
 800a9e0:	4619      	mov	r1, r3
 800a9e2:	6878      	ldr	r0, [r7, #4]
 800a9e4:	f000 f90c 	bl	800ac00 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	791b      	ldrb	r3, [r3, #4]
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	6878      	ldr	r0, [r7, #4]
 800a9f0:	f000 f906 	bl	800ac00 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a9fa:	2302      	movs	r3, #2
 800a9fc:	73fb      	strb	r3, [r7, #15]
      break;
 800a9fe:	e00a      	b.n	800aa16 <USBH_HandleControl+0x2de>

    default:
      break;
 800aa00:	bf00      	nop
 800aa02:	e008      	b.n	800aa16 <USBH_HandleControl+0x2de>
      break;
 800aa04:	bf00      	nop
 800aa06:	e006      	b.n	800aa16 <USBH_HandleControl+0x2de>
      break;
 800aa08:	bf00      	nop
 800aa0a:	e004      	b.n	800aa16 <USBH_HandleControl+0x2de>
      break;
 800aa0c:	bf00      	nop
 800aa0e:	e002      	b.n	800aa16 <USBH_HandleControl+0x2de>
      break;
 800aa10:	bf00      	nop
 800aa12:	e000      	b.n	800aa16 <USBH_HandleControl+0x2de>
      break;
 800aa14:	bf00      	nop
  }

  return status;
 800aa16:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa18:	4618      	mov	r0, r3
 800aa1a:	3710      	adds	r7, #16
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b088      	sub	sp, #32
 800aa24:	af04      	add	r7, sp, #16
 800aa26:	60f8      	str	r0, [r7, #12]
 800aa28:	60b9      	str	r1, [r7, #8]
 800aa2a:	4613      	mov	r3, r2
 800aa2c:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa2e:	79f9      	ldrb	r1, [r7, #7]
 800aa30:	2300      	movs	r3, #0
 800aa32:	9303      	str	r3, [sp, #12]
 800aa34:	2308      	movs	r3, #8
 800aa36:	9302      	str	r3, [sp, #8]
 800aa38:	68bb      	ldr	r3, [r7, #8]
 800aa3a:	9301      	str	r3, [sp, #4]
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	9300      	str	r3, [sp, #0]
 800aa40:	2300      	movs	r3, #0
 800aa42:	2200      	movs	r2, #0
 800aa44:	68f8      	ldr	r0, [r7, #12]
 800aa46:	f002 fed2 	bl	800d7ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800aa4a:	2300      	movs	r3, #0
}
 800aa4c:	4618      	mov	r0, r3
 800aa4e:	3710      	adds	r7, #16
 800aa50:	46bd      	mov	sp, r7
 800aa52:	bd80      	pop	{r7, pc}

0800aa54 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800aa54:	b580      	push	{r7, lr}
 800aa56:	b088      	sub	sp, #32
 800aa58:	af04      	add	r7, sp, #16
 800aa5a:	60f8      	str	r0, [r7, #12]
 800aa5c:	60b9      	str	r1, [r7, #8]
 800aa5e:	4611      	mov	r1, r2
 800aa60:	461a      	mov	r2, r3
 800aa62:	460b      	mov	r3, r1
 800aa64:	80fb      	strh	r3, [r7, #6]
 800aa66:	4613      	mov	r3, r2
 800aa68:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d001      	beq.n	800aa78 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800aa74:	2300      	movs	r3, #0
 800aa76:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aa78:	7979      	ldrb	r1, [r7, #5]
 800aa7a:	7e3b      	ldrb	r3, [r7, #24]
 800aa7c:	9303      	str	r3, [sp, #12]
 800aa7e:	88fb      	ldrh	r3, [r7, #6]
 800aa80:	9302      	str	r3, [sp, #8]
 800aa82:	68bb      	ldr	r3, [r7, #8]
 800aa84:	9301      	str	r3, [sp, #4]
 800aa86:	2301      	movs	r3, #1
 800aa88:	9300      	str	r3, [sp, #0]
 800aa8a:	2300      	movs	r3, #0
 800aa8c:	2200      	movs	r2, #0
 800aa8e:	68f8      	ldr	r0, [r7, #12]
 800aa90:	f002 fead 	bl	800d7ee <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800aa94:	2300      	movs	r3, #0
}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3710      	adds	r7, #16
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b088      	sub	sp, #32
 800aaa2:	af04      	add	r7, sp, #16
 800aaa4:	60f8      	str	r0, [r7, #12]
 800aaa6:	60b9      	str	r1, [r7, #8]
 800aaa8:	4611      	mov	r1, r2
 800aaaa:	461a      	mov	r2, r3
 800aaac:	460b      	mov	r3, r1
 800aaae:	80fb      	strh	r3, [r7, #6]
 800aab0:	4613      	mov	r3, r2
 800aab2:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aab4:	7979      	ldrb	r1, [r7, #5]
 800aab6:	2300      	movs	r3, #0
 800aab8:	9303      	str	r3, [sp, #12]
 800aaba:	88fb      	ldrh	r3, [r7, #6]
 800aabc:	9302      	str	r3, [sp, #8]
 800aabe:	68bb      	ldr	r3, [r7, #8]
 800aac0:	9301      	str	r3, [sp, #4]
 800aac2:	2301      	movs	r3, #1
 800aac4:	9300      	str	r3, [sp, #0]
 800aac6:	2300      	movs	r3, #0
 800aac8:	2201      	movs	r2, #1
 800aaca:	68f8      	ldr	r0, [r7, #12]
 800aacc:	f002 fe8f 	bl	800d7ee <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800aad0:	2300      	movs	r3, #0

}
 800aad2:	4618      	mov	r0, r3
 800aad4:	3710      	adds	r7, #16
 800aad6:	46bd      	mov	sp, r7
 800aad8:	bd80      	pop	{r7, pc}

0800aada <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800aada:	b580      	push	{r7, lr}
 800aadc:	b088      	sub	sp, #32
 800aade:	af04      	add	r7, sp, #16
 800aae0:	60f8      	str	r0, [r7, #12]
 800aae2:	60b9      	str	r1, [r7, #8]
 800aae4:	4611      	mov	r1, r2
 800aae6:	461a      	mov	r2, r3
 800aae8:	460b      	mov	r3, r1
 800aaea:	80fb      	strh	r3, [r7, #6]
 800aaec:	4613      	mov	r3, r2
 800aaee:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800aaf0:	68fb      	ldr	r3, [r7, #12]
 800aaf2:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d001      	beq.n	800aafe <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800aafa:	2300      	movs	r3, #0
 800aafc:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800aafe:	7979      	ldrb	r1, [r7, #5]
 800ab00:	7e3b      	ldrb	r3, [r7, #24]
 800ab02:	9303      	str	r3, [sp, #12]
 800ab04:	88fb      	ldrh	r3, [r7, #6]
 800ab06:	9302      	str	r3, [sp, #8]
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	9301      	str	r3, [sp, #4]
 800ab0c:	2301      	movs	r3, #1
 800ab0e:	9300      	str	r3, [sp, #0]
 800ab10:	2302      	movs	r3, #2
 800ab12:	2200      	movs	r2, #0
 800ab14:	68f8      	ldr	r0, [r7, #12]
 800ab16:	f002 fe6a 	bl	800d7ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ab1a:	2300      	movs	r3, #0
}
 800ab1c:	4618      	mov	r0, r3
 800ab1e:	3710      	adds	r7, #16
 800ab20:	46bd      	mov	sp, r7
 800ab22:	bd80      	pop	{r7, pc}

0800ab24 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ab24:	b580      	push	{r7, lr}
 800ab26:	b088      	sub	sp, #32
 800ab28:	af04      	add	r7, sp, #16
 800ab2a:	60f8      	str	r0, [r7, #12]
 800ab2c:	60b9      	str	r1, [r7, #8]
 800ab2e:	4611      	mov	r1, r2
 800ab30:	461a      	mov	r2, r3
 800ab32:	460b      	mov	r3, r1
 800ab34:	80fb      	strh	r3, [r7, #6]
 800ab36:	4613      	mov	r3, r2
 800ab38:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ab3a:	7979      	ldrb	r1, [r7, #5]
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	9303      	str	r3, [sp, #12]
 800ab40:	88fb      	ldrh	r3, [r7, #6]
 800ab42:	9302      	str	r3, [sp, #8]
 800ab44:	68bb      	ldr	r3, [r7, #8]
 800ab46:	9301      	str	r3, [sp, #4]
 800ab48:	2301      	movs	r3, #1
 800ab4a:	9300      	str	r3, [sp, #0]
 800ab4c:	2302      	movs	r3, #2
 800ab4e:	2201      	movs	r2, #1
 800ab50:	68f8      	ldr	r0, [r7, #12]
 800ab52:	f002 fe4c 	bl	800d7ee <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ab56:	2300      	movs	r3, #0
}
 800ab58:	4618      	mov	r0, r3
 800ab5a:	3710      	adds	r7, #16
 800ab5c:	46bd      	mov	sp, r7
 800ab5e:	bd80      	pop	{r7, pc}

0800ab60 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b086      	sub	sp, #24
 800ab64:	af04      	add	r7, sp, #16
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	4608      	mov	r0, r1
 800ab6a:	4611      	mov	r1, r2
 800ab6c:	461a      	mov	r2, r3
 800ab6e:	4603      	mov	r3, r0
 800ab70:	70fb      	strb	r3, [r7, #3]
 800ab72:	460b      	mov	r3, r1
 800ab74:	70bb      	strb	r3, [r7, #2]
 800ab76:	4613      	mov	r3, r2
 800ab78:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ab7a:	7878      	ldrb	r0, [r7, #1]
 800ab7c:	78ba      	ldrb	r2, [r7, #2]
 800ab7e:	78f9      	ldrb	r1, [r7, #3]
 800ab80:	8b3b      	ldrh	r3, [r7, #24]
 800ab82:	9302      	str	r3, [sp, #8]
 800ab84:	7d3b      	ldrb	r3, [r7, #20]
 800ab86:	9301      	str	r3, [sp, #4]
 800ab88:	7c3b      	ldrb	r3, [r7, #16]
 800ab8a:	9300      	str	r3, [sp, #0]
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	6878      	ldr	r0, [r7, #4]
 800ab90:	f002 fddf 	bl	800d752 <USBH_LL_OpenPipe>

  return USBH_OK;
 800ab94:	2300      	movs	r3, #0
}
 800ab96:	4618      	mov	r0, r3
 800ab98:	3708      	adds	r7, #8
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}

0800ab9e <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ab9e:	b580      	push	{r7, lr}
 800aba0:	b082      	sub	sp, #8
 800aba2:	af00      	add	r7, sp, #0
 800aba4:	6078      	str	r0, [r7, #4]
 800aba6:	460b      	mov	r3, r1
 800aba8:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800abaa:	78fb      	ldrb	r3, [r7, #3]
 800abac:	4619      	mov	r1, r3
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f002 fdfe 	bl	800d7b0 <USBH_LL_ClosePipe>

  return USBH_OK;
 800abb4:	2300      	movs	r3, #0
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3708      	adds	r7, #8
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}

0800abbe <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800abbe:	b580      	push	{r7, lr}
 800abc0:	b084      	sub	sp, #16
 800abc2:	af00      	add	r7, sp, #0
 800abc4:	6078      	str	r0, [r7, #4]
 800abc6:	460b      	mov	r3, r1
 800abc8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800abca:	6878      	ldr	r0, [r7, #4]
 800abcc:	f000 f836 	bl	800ac3c <USBH_GetFreePipe>
 800abd0:	4603      	mov	r3, r0
 800abd2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800abd4:	89fb      	ldrh	r3, [r7, #14]
 800abd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800abda:	4293      	cmp	r3, r2
 800abdc:	d00a      	beq.n	800abf4 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800abde:	78fa      	ldrb	r2, [r7, #3]
 800abe0:	89fb      	ldrh	r3, [r7, #14]
 800abe2:	f003 030f 	and.w	r3, r3, #15
 800abe6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800abea:	6879      	ldr	r1, [r7, #4]
 800abec:	33e0      	adds	r3, #224	; 0xe0
 800abee:	009b      	lsls	r3, r3, #2
 800abf0:	440b      	add	r3, r1
 800abf2:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800abf4:	89fb      	ldrh	r3, [r7, #14]
 800abf6:	b2db      	uxtb	r3, r3
}
 800abf8:	4618      	mov	r0, r3
 800abfa:	3710      	adds	r7, #16
 800abfc:	46bd      	mov	sp, r7
 800abfe:	bd80      	pop	{r7, pc}

0800ac00 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ac00:	b480      	push	{r7}
 800ac02:	b083      	sub	sp, #12
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	460b      	mov	r3, r1
 800ac0a:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ac0c:	78fb      	ldrb	r3, [r7, #3]
 800ac0e:	2b0f      	cmp	r3, #15
 800ac10:	d80d      	bhi.n	800ac2e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ac12:	78fb      	ldrb	r3, [r7, #3]
 800ac14:	687a      	ldr	r2, [r7, #4]
 800ac16:	33e0      	adds	r3, #224	; 0xe0
 800ac18:	009b      	lsls	r3, r3, #2
 800ac1a:	4413      	add	r3, r2
 800ac1c:	685a      	ldr	r2, [r3, #4]
 800ac1e:	78fb      	ldrb	r3, [r7, #3]
 800ac20:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ac24:	6879      	ldr	r1, [r7, #4]
 800ac26:	33e0      	adds	r3, #224	; 0xe0
 800ac28:	009b      	lsls	r3, r3, #2
 800ac2a:	440b      	add	r3, r1
 800ac2c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ac2e:	2300      	movs	r3, #0
}
 800ac30:	4618      	mov	r0, r3
 800ac32:	370c      	adds	r7, #12
 800ac34:	46bd      	mov	sp, r7
 800ac36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac3a:	4770      	bx	lr

0800ac3c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ac3c:	b480      	push	{r7}
 800ac3e:	b085      	sub	sp, #20
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ac44:	2300      	movs	r3, #0
 800ac46:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ac48:	2300      	movs	r3, #0
 800ac4a:	73fb      	strb	r3, [r7, #15]
 800ac4c:	e00f      	b.n	800ac6e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ac4e:	7bfb      	ldrb	r3, [r7, #15]
 800ac50:	687a      	ldr	r2, [r7, #4]
 800ac52:	33e0      	adds	r3, #224	; 0xe0
 800ac54:	009b      	lsls	r3, r3, #2
 800ac56:	4413      	add	r3, r2
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d102      	bne.n	800ac68 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ac62:	7bfb      	ldrb	r3, [r7, #15]
 800ac64:	b29b      	uxth	r3, r3
 800ac66:	e007      	b.n	800ac78 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800ac68:	7bfb      	ldrb	r3, [r7, #15]
 800ac6a:	3301      	adds	r3, #1
 800ac6c:	73fb      	strb	r3, [r7, #15]
 800ac6e:	7bfb      	ldrb	r3, [r7, #15]
 800ac70:	2b0f      	cmp	r3, #15
 800ac72:	d9ec      	bls.n	800ac4e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ac74:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800ac78:	4618      	mov	r0, r3
 800ac7a:	3714      	adds	r7, #20
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac82:	4770      	bx	lr

0800ac84 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800ac84:	b580      	push	{r7, lr}
 800ac86:	b084      	sub	sp, #16
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	4603      	mov	r3, r0
 800ac8c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800ac8e:	79fb      	ldrb	r3, [r7, #7]
 800ac90:	4a08      	ldr	r2, [pc, #32]	; (800acb4 <disk_status+0x30>)
 800ac92:	009b      	lsls	r3, r3, #2
 800ac94:	4413      	add	r3, r2
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	685b      	ldr	r3, [r3, #4]
 800ac9a:	79fa      	ldrb	r2, [r7, #7]
 800ac9c:	4905      	ldr	r1, [pc, #20]	; (800acb4 <disk_status+0x30>)
 800ac9e:	440a      	add	r2, r1
 800aca0:	7a12      	ldrb	r2, [r2, #8]
 800aca2:	4610      	mov	r0, r2
 800aca4:	4798      	blx	r3
 800aca6:	4603      	mov	r3, r0
 800aca8:	73fb      	strb	r3, [r7, #15]
  return stat;
 800acaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800acac:	4618      	mov	r0, r3
 800acae:	3710      	adds	r7, #16
 800acb0:	46bd      	mov	sp, r7
 800acb2:	bd80      	pop	{r7, pc}
 800acb4:	20001698 	.word	0x20001698

0800acb8 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800acb8:	b580      	push	{r7, lr}
 800acba:	b084      	sub	sp, #16
 800acbc:	af00      	add	r7, sp, #0
 800acbe:	4603      	mov	r3, r0
 800acc0:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800acc2:	2300      	movs	r3, #0
 800acc4:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800acc6:	79fb      	ldrb	r3, [r7, #7]
 800acc8:	4a0d      	ldr	r2, [pc, #52]	; (800ad00 <disk_initialize+0x48>)
 800acca:	5cd3      	ldrb	r3, [r2, r3]
 800accc:	2b00      	cmp	r3, #0
 800acce:	d111      	bne.n	800acf4 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800acd0:	79fb      	ldrb	r3, [r7, #7]
 800acd2:	4a0b      	ldr	r2, [pc, #44]	; (800ad00 <disk_initialize+0x48>)
 800acd4:	2101      	movs	r1, #1
 800acd6:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800acd8:	79fb      	ldrb	r3, [r7, #7]
 800acda:	4a09      	ldr	r2, [pc, #36]	; (800ad00 <disk_initialize+0x48>)
 800acdc:	009b      	lsls	r3, r3, #2
 800acde:	4413      	add	r3, r2
 800ace0:	685b      	ldr	r3, [r3, #4]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	79fa      	ldrb	r2, [r7, #7]
 800ace6:	4906      	ldr	r1, [pc, #24]	; (800ad00 <disk_initialize+0x48>)
 800ace8:	440a      	add	r2, r1
 800acea:	7a12      	ldrb	r2, [r2, #8]
 800acec:	4610      	mov	r0, r2
 800acee:	4798      	blx	r3
 800acf0:	4603      	mov	r3, r0
 800acf2:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800acf4:	7bfb      	ldrb	r3, [r7, #15]
}
 800acf6:	4618      	mov	r0, r3
 800acf8:	3710      	adds	r7, #16
 800acfa:	46bd      	mov	sp, r7
 800acfc:	bd80      	pop	{r7, pc}
 800acfe:	bf00      	nop
 800ad00:	20001698 	.word	0x20001698

0800ad04 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800ad04:	b590      	push	{r4, r7, lr}
 800ad06:	b087      	sub	sp, #28
 800ad08:	af00      	add	r7, sp, #0
 800ad0a:	60b9      	str	r1, [r7, #8]
 800ad0c:	607a      	str	r2, [r7, #4]
 800ad0e:	603b      	str	r3, [r7, #0]
 800ad10:	4603      	mov	r3, r0
 800ad12:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800ad14:	7bfb      	ldrb	r3, [r7, #15]
 800ad16:	4a0a      	ldr	r2, [pc, #40]	; (800ad40 <disk_read+0x3c>)
 800ad18:	009b      	lsls	r3, r3, #2
 800ad1a:	4413      	add	r3, r2
 800ad1c:	685b      	ldr	r3, [r3, #4]
 800ad1e:	689c      	ldr	r4, [r3, #8]
 800ad20:	7bfb      	ldrb	r3, [r7, #15]
 800ad22:	4a07      	ldr	r2, [pc, #28]	; (800ad40 <disk_read+0x3c>)
 800ad24:	4413      	add	r3, r2
 800ad26:	7a18      	ldrb	r0, [r3, #8]
 800ad28:	683b      	ldr	r3, [r7, #0]
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	68b9      	ldr	r1, [r7, #8]
 800ad2e:	47a0      	blx	r4
 800ad30:	4603      	mov	r3, r0
 800ad32:	75fb      	strb	r3, [r7, #23]
  return res;
 800ad34:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad36:	4618      	mov	r0, r3
 800ad38:	371c      	adds	r7, #28
 800ad3a:	46bd      	mov	sp, r7
 800ad3c:	bd90      	pop	{r4, r7, pc}
 800ad3e:	bf00      	nop
 800ad40:	20001698 	.word	0x20001698

0800ad44 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800ad44:	b590      	push	{r4, r7, lr}
 800ad46:	b087      	sub	sp, #28
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	60b9      	str	r1, [r7, #8]
 800ad4c:	607a      	str	r2, [r7, #4]
 800ad4e:	603b      	str	r3, [r7, #0]
 800ad50:	4603      	mov	r3, r0
 800ad52:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800ad54:	7bfb      	ldrb	r3, [r7, #15]
 800ad56:	4a0a      	ldr	r2, [pc, #40]	; (800ad80 <disk_write+0x3c>)
 800ad58:	009b      	lsls	r3, r3, #2
 800ad5a:	4413      	add	r3, r2
 800ad5c:	685b      	ldr	r3, [r3, #4]
 800ad5e:	68dc      	ldr	r4, [r3, #12]
 800ad60:	7bfb      	ldrb	r3, [r7, #15]
 800ad62:	4a07      	ldr	r2, [pc, #28]	; (800ad80 <disk_write+0x3c>)
 800ad64:	4413      	add	r3, r2
 800ad66:	7a18      	ldrb	r0, [r3, #8]
 800ad68:	683b      	ldr	r3, [r7, #0]
 800ad6a:	687a      	ldr	r2, [r7, #4]
 800ad6c:	68b9      	ldr	r1, [r7, #8]
 800ad6e:	47a0      	blx	r4
 800ad70:	4603      	mov	r3, r0
 800ad72:	75fb      	strb	r3, [r7, #23]
  return res;
 800ad74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ad76:	4618      	mov	r0, r3
 800ad78:	371c      	adds	r7, #28
 800ad7a:	46bd      	mov	sp, r7
 800ad7c:	bd90      	pop	{r4, r7, pc}
 800ad7e:	bf00      	nop
 800ad80:	20001698 	.word	0x20001698

0800ad84 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800ad84:	b580      	push	{r7, lr}
 800ad86:	b084      	sub	sp, #16
 800ad88:	af00      	add	r7, sp, #0
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	603a      	str	r2, [r7, #0]
 800ad8e:	71fb      	strb	r3, [r7, #7]
 800ad90:	460b      	mov	r3, r1
 800ad92:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800ad94:	79fb      	ldrb	r3, [r7, #7]
 800ad96:	4a09      	ldr	r2, [pc, #36]	; (800adbc <disk_ioctl+0x38>)
 800ad98:	009b      	lsls	r3, r3, #2
 800ad9a:	4413      	add	r3, r2
 800ad9c:	685b      	ldr	r3, [r3, #4]
 800ad9e:	691b      	ldr	r3, [r3, #16]
 800ada0:	79fa      	ldrb	r2, [r7, #7]
 800ada2:	4906      	ldr	r1, [pc, #24]	; (800adbc <disk_ioctl+0x38>)
 800ada4:	440a      	add	r2, r1
 800ada6:	7a10      	ldrb	r0, [r2, #8]
 800ada8:	79b9      	ldrb	r1, [r7, #6]
 800adaa:	683a      	ldr	r2, [r7, #0]
 800adac:	4798      	blx	r3
 800adae:	4603      	mov	r3, r0
 800adb0:	73fb      	strb	r3, [r7, #15]
  return res;
 800adb2:	7bfb      	ldrb	r3, [r7, #15]
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3710      	adds	r7, #16
 800adb8:	46bd      	mov	sp, r7
 800adba:	bd80      	pop	{r7, pc}
 800adbc:	20001698 	.word	0x20001698

0800adc0 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800adc0:	b480      	push	{r7}
 800adc2:	b085      	sub	sp, #20
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	3301      	adds	r3, #1
 800adcc:	781b      	ldrb	r3, [r3, #0]
 800adce:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800add0:	89fb      	ldrh	r3, [r7, #14]
 800add2:	021b      	lsls	r3, r3, #8
 800add4:	b21a      	sxth	r2, r3
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	b21b      	sxth	r3, r3
 800addc:	4313      	orrs	r3, r2
 800adde:	b21b      	sxth	r3, r3
 800ade0:	81fb      	strh	r3, [r7, #14]
	return rv;
 800ade2:	89fb      	ldrh	r3, [r7, #14]
}
 800ade4:	4618      	mov	r0, r3
 800ade6:	3714      	adds	r7, #20
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr

0800adf0 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800adf0:	b480      	push	{r7}
 800adf2:	b085      	sub	sp, #20
 800adf4:	af00      	add	r7, sp, #0
 800adf6:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	3303      	adds	r3, #3
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800ae00:	68fb      	ldr	r3, [r7, #12]
 800ae02:	021b      	lsls	r3, r3, #8
 800ae04:	687a      	ldr	r2, [r7, #4]
 800ae06:	3202      	adds	r2, #2
 800ae08:	7812      	ldrb	r2, [r2, #0]
 800ae0a:	4313      	orrs	r3, r2
 800ae0c:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	021b      	lsls	r3, r3, #8
 800ae12:	687a      	ldr	r2, [r7, #4]
 800ae14:	3201      	adds	r2, #1
 800ae16:	7812      	ldrb	r2, [r2, #0]
 800ae18:	4313      	orrs	r3, r2
 800ae1a:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800ae1c:	68fb      	ldr	r3, [r7, #12]
 800ae1e:	021b      	lsls	r3, r3, #8
 800ae20:	687a      	ldr	r2, [r7, #4]
 800ae22:	7812      	ldrb	r2, [r2, #0]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	60fb      	str	r3, [r7, #12]
	return rv;
 800ae28:	68fb      	ldr	r3, [r7, #12]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3714      	adds	r7, #20
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae34:	4770      	bx	lr

0800ae36 <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800ae36:	b480      	push	{r7}
 800ae38:	b083      	sub	sp, #12
 800ae3a:	af00      	add	r7, sp, #0
 800ae3c:	6078      	str	r0, [r7, #4]
 800ae3e:	460b      	mov	r3, r1
 800ae40:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	1c5a      	adds	r2, r3, #1
 800ae46:	607a      	str	r2, [r7, #4]
 800ae48:	887a      	ldrh	r2, [r7, #2]
 800ae4a:	b2d2      	uxtb	r2, r2
 800ae4c:	701a      	strb	r2, [r3, #0]
 800ae4e:	887b      	ldrh	r3, [r7, #2]
 800ae50:	0a1b      	lsrs	r3, r3, #8
 800ae52:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	1c5a      	adds	r2, r3, #1
 800ae58:	607a      	str	r2, [r7, #4]
 800ae5a:	887a      	ldrh	r2, [r7, #2]
 800ae5c:	b2d2      	uxtb	r2, r2
 800ae5e:	701a      	strb	r2, [r3, #0]
}
 800ae60:	bf00      	nop
 800ae62:	370c      	adds	r7, #12
 800ae64:	46bd      	mov	sp, r7
 800ae66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae6a:	4770      	bx	lr

0800ae6c <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800ae6c:	b480      	push	{r7}
 800ae6e:	b083      	sub	sp, #12
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	1c5a      	adds	r2, r3, #1
 800ae7a:	607a      	str	r2, [r7, #4]
 800ae7c:	683a      	ldr	r2, [r7, #0]
 800ae7e:	b2d2      	uxtb	r2, r2
 800ae80:	701a      	strb	r2, [r3, #0]
 800ae82:	683b      	ldr	r3, [r7, #0]
 800ae84:	0a1b      	lsrs	r3, r3, #8
 800ae86:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	1c5a      	adds	r2, r3, #1
 800ae8c:	607a      	str	r2, [r7, #4]
 800ae8e:	683a      	ldr	r2, [r7, #0]
 800ae90:	b2d2      	uxtb	r2, r2
 800ae92:	701a      	strb	r2, [r3, #0]
 800ae94:	683b      	ldr	r3, [r7, #0]
 800ae96:	0a1b      	lsrs	r3, r3, #8
 800ae98:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	1c5a      	adds	r2, r3, #1
 800ae9e:	607a      	str	r2, [r7, #4]
 800aea0:	683a      	ldr	r2, [r7, #0]
 800aea2:	b2d2      	uxtb	r2, r2
 800aea4:	701a      	strb	r2, [r3, #0]
 800aea6:	683b      	ldr	r3, [r7, #0]
 800aea8:	0a1b      	lsrs	r3, r3, #8
 800aeaa:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	1c5a      	adds	r2, r3, #1
 800aeb0:	607a      	str	r2, [r7, #4]
 800aeb2:	683a      	ldr	r2, [r7, #0]
 800aeb4:	b2d2      	uxtb	r2, r2
 800aeb6:	701a      	strb	r2, [r3, #0]
}
 800aeb8:	bf00      	nop
 800aeba:	370c      	adds	r7, #12
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr

0800aec4 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800aec4:	b480      	push	{r7}
 800aec6:	b087      	sub	sp, #28
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800aed4:	68bb      	ldr	r3, [r7, #8]
 800aed6:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	2b00      	cmp	r3, #0
 800aedc:	d00d      	beq.n	800aefa <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800aede:	693a      	ldr	r2, [r7, #16]
 800aee0:	1c53      	adds	r3, r2, #1
 800aee2:	613b      	str	r3, [r7, #16]
 800aee4:	697b      	ldr	r3, [r7, #20]
 800aee6:	1c59      	adds	r1, r3, #1
 800aee8:	6179      	str	r1, [r7, #20]
 800aeea:	7812      	ldrb	r2, [r2, #0]
 800aeec:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	3b01      	subs	r3, #1
 800aef2:	607b      	str	r3, [r7, #4]
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d1f1      	bne.n	800aede <mem_cpy+0x1a>
	}
}
 800aefa:	bf00      	nop
 800aefc:	371c      	adds	r7, #28
 800aefe:	46bd      	mov	sp, r7
 800af00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af04:	4770      	bx	lr

0800af06 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800af06:	b480      	push	{r7}
 800af08:	b087      	sub	sp, #28
 800af0a:	af00      	add	r7, sp, #0
 800af0c:	60f8      	str	r0, [r7, #12]
 800af0e:	60b9      	str	r1, [r7, #8]
 800af10:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800af12:	68fb      	ldr	r3, [r7, #12]
 800af14:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800af16:	697b      	ldr	r3, [r7, #20]
 800af18:	1c5a      	adds	r2, r3, #1
 800af1a:	617a      	str	r2, [r7, #20]
 800af1c:	68ba      	ldr	r2, [r7, #8]
 800af1e:	b2d2      	uxtb	r2, r2
 800af20:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	3b01      	subs	r3, #1
 800af26:	607b      	str	r3, [r7, #4]
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	2b00      	cmp	r3, #0
 800af2c:	d1f3      	bne.n	800af16 <mem_set+0x10>
}
 800af2e:	bf00      	nop
 800af30:	bf00      	nop
 800af32:	371c      	adds	r7, #28
 800af34:	46bd      	mov	sp, r7
 800af36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3a:	4770      	bx	lr

0800af3c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800af3c:	b480      	push	{r7}
 800af3e:	b089      	sub	sp, #36	; 0x24
 800af40:	af00      	add	r7, sp, #0
 800af42:	60f8      	str	r0, [r7, #12]
 800af44:	60b9      	str	r1, [r7, #8]
 800af46:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	61fb      	str	r3, [r7, #28]
 800af4c:	68bb      	ldr	r3, [r7, #8]
 800af4e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800af50:	2300      	movs	r3, #0
 800af52:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800af54:	69fb      	ldr	r3, [r7, #28]
 800af56:	1c5a      	adds	r2, r3, #1
 800af58:	61fa      	str	r2, [r7, #28]
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	4619      	mov	r1, r3
 800af5e:	69bb      	ldr	r3, [r7, #24]
 800af60:	1c5a      	adds	r2, r3, #1
 800af62:	61ba      	str	r2, [r7, #24]
 800af64:	781b      	ldrb	r3, [r3, #0]
 800af66:	1acb      	subs	r3, r1, r3
 800af68:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	3b01      	subs	r3, #1
 800af6e:	607b      	str	r3, [r7, #4]
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	2b00      	cmp	r3, #0
 800af74:	d002      	beq.n	800af7c <mem_cmp+0x40>
 800af76:	697b      	ldr	r3, [r7, #20]
 800af78:	2b00      	cmp	r3, #0
 800af7a:	d0eb      	beq.n	800af54 <mem_cmp+0x18>

	return r;
 800af7c:	697b      	ldr	r3, [r7, #20]
}
 800af7e:	4618      	mov	r0, r3
 800af80:	3724      	adds	r7, #36	; 0x24
 800af82:	46bd      	mov	sp, r7
 800af84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af88:	4770      	bx	lr

0800af8a <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800af8a:	b480      	push	{r7}
 800af8c:	b083      	sub	sp, #12
 800af8e:	af00      	add	r7, sp, #0
 800af90:	6078      	str	r0, [r7, #4]
 800af92:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800af94:	e002      	b.n	800af9c <chk_chr+0x12>
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	3301      	adds	r3, #1
 800af9a:	607b      	str	r3, [r7, #4]
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	781b      	ldrb	r3, [r3, #0]
 800afa0:	2b00      	cmp	r3, #0
 800afa2:	d005      	beq.n	800afb0 <chk_chr+0x26>
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	781b      	ldrb	r3, [r3, #0]
 800afa8:	461a      	mov	r2, r3
 800afaa:	683b      	ldr	r3, [r7, #0]
 800afac:	4293      	cmp	r3, r2
 800afae:	d1f2      	bne.n	800af96 <chk_chr+0xc>
	return *str;
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	781b      	ldrb	r3, [r3, #0]
}
 800afb4:	4618      	mov	r0, r3
 800afb6:	370c      	adds	r7, #12
 800afb8:	46bd      	mov	sp, r7
 800afba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afbe:	4770      	bx	lr

0800afc0 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800afc0:	b480      	push	{r7}
 800afc2:	b085      	sub	sp, #20
 800afc4:	af00      	add	r7, sp, #0
 800afc6:	6078      	str	r0, [r7, #4]
 800afc8:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800afca:	2300      	movs	r3, #0
 800afcc:	60bb      	str	r3, [r7, #8]
 800afce:	68bb      	ldr	r3, [r7, #8]
 800afd0:	60fb      	str	r3, [r7, #12]
 800afd2:	e029      	b.n	800b028 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800afd4:	4a27      	ldr	r2, [pc, #156]	; (800b074 <chk_lock+0xb4>)
 800afd6:	68fb      	ldr	r3, [r7, #12]
 800afd8:	011b      	lsls	r3, r3, #4
 800afda:	4413      	add	r3, r2
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d01d      	beq.n	800b01e <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800afe2:	4a24      	ldr	r2, [pc, #144]	; (800b074 <chk_lock+0xb4>)
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	011b      	lsls	r3, r3, #4
 800afe8:	4413      	add	r3, r2
 800afea:	681a      	ldr	r2, [r3, #0]
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	429a      	cmp	r2, r3
 800aff2:	d116      	bne.n	800b022 <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800aff4:	4a1f      	ldr	r2, [pc, #124]	; (800b074 <chk_lock+0xb4>)
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	011b      	lsls	r3, r3, #4
 800affa:	4413      	add	r3, r2
 800affc:	3304      	adds	r3, #4
 800affe:	681a      	ldr	r2, [r3, #0]
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800b004:	429a      	cmp	r2, r3
 800b006:	d10c      	bne.n	800b022 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b008:	4a1a      	ldr	r2, [pc, #104]	; (800b074 <chk_lock+0xb4>)
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	011b      	lsls	r3, r3, #4
 800b00e:	4413      	add	r3, r2
 800b010:	3308      	adds	r3, #8
 800b012:	681a      	ldr	r2, [r3, #0]
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800b018:	429a      	cmp	r2, r3
 800b01a:	d102      	bne.n	800b022 <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800b01c:	e007      	b.n	800b02e <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800b01e:	2301      	movs	r3, #1
 800b020:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800b022:	68fb      	ldr	r3, [r7, #12]
 800b024:	3301      	adds	r3, #1
 800b026:	60fb      	str	r3, [r7, #12]
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	2b01      	cmp	r3, #1
 800b02c:	d9d2      	bls.n	800afd4 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2b02      	cmp	r3, #2
 800b032:	d109      	bne.n	800b048 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	2b00      	cmp	r3, #0
 800b038:	d102      	bne.n	800b040 <chk_lock+0x80>
 800b03a:	683b      	ldr	r3, [r7, #0]
 800b03c:	2b02      	cmp	r3, #2
 800b03e:	d101      	bne.n	800b044 <chk_lock+0x84>
 800b040:	2300      	movs	r3, #0
 800b042:	e010      	b.n	800b066 <chk_lock+0xa6>
 800b044:	2312      	movs	r3, #18
 800b046:	e00e      	b.n	800b066 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d108      	bne.n	800b060 <chk_lock+0xa0>
 800b04e:	4a09      	ldr	r2, [pc, #36]	; (800b074 <chk_lock+0xb4>)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	011b      	lsls	r3, r3, #4
 800b054:	4413      	add	r3, r2
 800b056:	330c      	adds	r3, #12
 800b058:	881b      	ldrh	r3, [r3, #0]
 800b05a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b05e:	d101      	bne.n	800b064 <chk_lock+0xa4>
 800b060:	2310      	movs	r3, #16
 800b062:	e000      	b.n	800b066 <chk_lock+0xa6>
 800b064:	2300      	movs	r3, #0
}
 800b066:	4618      	mov	r0, r3
 800b068:	3714      	adds	r7, #20
 800b06a:	46bd      	mov	sp, r7
 800b06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b070:	4770      	bx	lr
 800b072:	bf00      	nop
 800b074:	20001678 	.word	0x20001678

0800b078 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800b078:	b480      	push	{r7}
 800b07a:	b083      	sub	sp, #12
 800b07c:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b07e:	2300      	movs	r3, #0
 800b080:	607b      	str	r3, [r7, #4]
 800b082:	e002      	b.n	800b08a <enq_lock+0x12>
 800b084:	687b      	ldr	r3, [r7, #4]
 800b086:	3301      	adds	r3, #1
 800b088:	607b      	str	r3, [r7, #4]
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	2b01      	cmp	r3, #1
 800b08e:	d806      	bhi.n	800b09e <enq_lock+0x26>
 800b090:	4a09      	ldr	r2, [pc, #36]	; (800b0b8 <enq_lock+0x40>)
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	011b      	lsls	r3, r3, #4
 800b096:	4413      	add	r3, r2
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d1f2      	bne.n	800b084 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800b09e:	687b      	ldr	r3, [r7, #4]
 800b0a0:	2b02      	cmp	r3, #2
 800b0a2:	bf14      	ite	ne
 800b0a4:	2301      	movne	r3, #1
 800b0a6:	2300      	moveq	r3, #0
 800b0a8:	b2db      	uxtb	r3, r3
}
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	370c      	adds	r7, #12
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0b4:	4770      	bx	lr
 800b0b6:	bf00      	nop
 800b0b8:	20001678 	.word	0x20001678

0800b0bc <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800b0bc:	b480      	push	{r7}
 800b0be:	b085      	sub	sp, #20
 800b0c0:	af00      	add	r7, sp, #0
 800b0c2:	6078      	str	r0, [r7, #4]
 800b0c4:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b0c6:	2300      	movs	r3, #0
 800b0c8:	60fb      	str	r3, [r7, #12]
 800b0ca:	e01f      	b.n	800b10c <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800b0cc:	4a41      	ldr	r2, [pc, #260]	; (800b1d4 <inc_lock+0x118>)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	011b      	lsls	r3, r3, #4
 800b0d2:	4413      	add	r3, r2
 800b0d4:	681a      	ldr	r2, [r3, #0]
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	681b      	ldr	r3, [r3, #0]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d113      	bne.n	800b106 <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800b0de:	4a3d      	ldr	r2, [pc, #244]	; (800b1d4 <inc_lock+0x118>)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	011b      	lsls	r3, r3, #4
 800b0e4:	4413      	add	r3, r2
 800b0e6:	3304      	adds	r3, #4
 800b0e8:	681a      	ldr	r2, [r3, #0]
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800b0ee:	429a      	cmp	r2, r3
 800b0f0:	d109      	bne.n	800b106 <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800b0f2:	4a38      	ldr	r2, [pc, #224]	; (800b1d4 <inc_lock+0x118>)
 800b0f4:	68fb      	ldr	r3, [r7, #12]
 800b0f6:	011b      	lsls	r3, r3, #4
 800b0f8:	4413      	add	r3, r2
 800b0fa:	3308      	adds	r3, #8
 800b0fc:	681a      	ldr	r2, [r3, #0]
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800b102:	429a      	cmp	r2, r3
 800b104:	d006      	beq.n	800b114 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800b106:	68fb      	ldr	r3, [r7, #12]
 800b108:	3301      	adds	r3, #1
 800b10a:	60fb      	str	r3, [r7, #12]
 800b10c:	68fb      	ldr	r3, [r7, #12]
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d9dc      	bls.n	800b0cc <inc_lock+0x10>
 800b112:	e000      	b.n	800b116 <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800b114:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	2b02      	cmp	r3, #2
 800b11a:	d132      	bne.n	800b182 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800b11c:	2300      	movs	r3, #0
 800b11e:	60fb      	str	r3, [r7, #12]
 800b120:	e002      	b.n	800b128 <inc_lock+0x6c>
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	3301      	adds	r3, #1
 800b126:	60fb      	str	r3, [r7, #12]
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	2b01      	cmp	r3, #1
 800b12c:	d806      	bhi.n	800b13c <inc_lock+0x80>
 800b12e:	4a29      	ldr	r2, [pc, #164]	; (800b1d4 <inc_lock+0x118>)
 800b130:	68fb      	ldr	r3, [r7, #12]
 800b132:	011b      	lsls	r3, r3, #4
 800b134:	4413      	add	r3, r2
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d1f2      	bne.n	800b122 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2b02      	cmp	r3, #2
 800b140:	d101      	bne.n	800b146 <inc_lock+0x8a>
 800b142:	2300      	movs	r3, #0
 800b144:	e040      	b.n	800b1c8 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	681a      	ldr	r2, [r3, #0]
 800b14a:	4922      	ldr	r1, [pc, #136]	; (800b1d4 <inc_lock+0x118>)
 800b14c:	68fb      	ldr	r3, [r7, #12]
 800b14e:	011b      	lsls	r3, r3, #4
 800b150:	440b      	add	r3, r1
 800b152:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	689a      	ldr	r2, [r3, #8]
 800b158:	491e      	ldr	r1, [pc, #120]	; (800b1d4 <inc_lock+0x118>)
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	011b      	lsls	r3, r3, #4
 800b15e:	440b      	add	r3, r1
 800b160:	3304      	adds	r3, #4
 800b162:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	695a      	ldr	r2, [r3, #20]
 800b168:	491a      	ldr	r1, [pc, #104]	; (800b1d4 <inc_lock+0x118>)
 800b16a:	68fb      	ldr	r3, [r7, #12]
 800b16c:	011b      	lsls	r3, r3, #4
 800b16e:	440b      	add	r3, r1
 800b170:	3308      	adds	r3, #8
 800b172:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800b174:	4a17      	ldr	r2, [pc, #92]	; (800b1d4 <inc_lock+0x118>)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	011b      	lsls	r3, r3, #4
 800b17a:	4413      	add	r3, r2
 800b17c:	330c      	adds	r3, #12
 800b17e:	2200      	movs	r2, #0
 800b180:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800b182:	683b      	ldr	r3, [r7, #0]
 800b184:	2b00      	cmp	r3, #0
 800b186:	d009      	beq.n	800b19c <inc_lock+0xe0>
 800b188:	4a12      	ldr	r2, [pc, #72]	; (800b1d4 <inc_lock+0x118>)
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	011b      	lsls	r3, r3, #4
 800b18e:	4413      	add	r3, r2
 800b190:	330c      	adds	r3, #12
 800b192:	881b      	ldrh	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d001      	beq.n	800b19c <inc_lock+0xe0>
 800b198:	2300      	movs	r3, #0
 800b19a:	e015      	b.n	800b1c8 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d108      	bne.n	800b1b4 <inc_lock+0xf8>
 800b1a2:	4a0c      	ldr	r2, [pc, #48]	; (800b1d4 <inc_lock+0x118>)
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	011b      	lsls	r3, r3, #4
 800b1a8:	4413      	add	r3, r2
 800b1aa:	330c      	adds	r3, #12
 800b1ac:	881b      	ldrh	r3, [r3, #0]
 800b1ae:	3301      	adds	r3, #1
 800b1b0:	b29a      	uxth	r2, r3
 800b1b2:	e001      	b.n	800b1b8 <inc_lock+0xfc>
 800b1b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 800b1b8:	4906      	ldr	r1, [pc, #24]	; (800b1d4 <inc_lock+0x118>)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	011b      	lsls	r3, r3, #4
 800b1be:	440b      	add	r3, r1
 800b1c0:	330c      	adds	r3, #12
 800b1c2:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800b1c4:	68fb      	ldr	r3, [r7, #12]
 800b1c6:	3301      	adds	r3, #1
}
 800b1c8:	4618      	mov	r0, r3
 800b1ca:	3714      	adds	r7, #20
 800b1cc:	46bd      	mov	sp, r7
 800b1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d2:	4770      	bx	lr
 800b1d4:	20001678 	.word	0x20001678

0800b1d8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800b1d8:	b480      	push	{r7}
 800b1da:	b085      	sub	sp, #20
 800b1dc:	af00      	add	r7, sp, #0
 800b1de:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	3b01      	subs	r3, #1
 800b1e4:	607b      	str	r3, [r7, #4]
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	2b01      	cmp	r3, #1
 800b1ea:	d825      	bhi.n	800b238 <dec_lock+0x60>
		n = Files[i].ctr;
 800b1ec:	4a17      	ldr	r2, [pc, #92]	; (800b24c <dec_lock+0x74>)
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	011b      	lsls	r3, r3, #4
 800b1f2:	4413      	add	r3, r2
 800b1f4:	330c      	adds	r3, #12
 800b1f6:	881b      	ldrh	r3, [r3, #0]
 800b1f8:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800b1fa:	89fb      	ldrh	r3, [r7, #14]
 800b1fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b200:	d101      	bne.n	800b206 <dec_lock+0x2e>
 800b202:	2300      	movs	r3, #0
 800b204:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800b206:	89fb      	ldrh	r3, [r7, #14]
 800b208:	2b00      	cmp	r3, #0
 800b20a:	d002      	beq.n	800b212 <dec_lock+0x3a>
 800b20c:	89fb      	ldrh	r3, [r7, #14]
 800b20e:	3b01      	subs	r3, #1
 800b210:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800b212:	4a0e      	ldr	r2, [pc, #56]	; (800b24c <dec_lock+0x74>)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	011b      	lsls	r3, r3, #4
 800b218:	4413      	add	r3, r2
 800b21a:	330c      	adds	r3, #12
 800b21c:	89fa      	ldrh	r2, [r7, #14]
 800b21e:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800b220:	89fb      	ldrh	r3, [r7, #14]
 800b222:	2b00      	cmp	r3, #0
 800b224:	d105      	bne.n	800b232 <dec_lock+0x5a>
 800b226:	4a09      	ldr	r2, [pc, #36]	; (800b24c <dec_lock+0x74>)
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	011b      	lsls	r3, r3, #4
 800b22c:	4413      	add	r3, r2
 800b22e:	2200      	movs	r2, #0
 800b230:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800b232:	2300      	movs	r3, #0
 800b234:	737b      	strb	r3, [r7, #13]
 800b236:	e001      	b.n	800b23c <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800b238:	2302      	movs	r3, #2
 800b23a:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800b23c:	7b7b      	ldrb	r3, [r7, #13]
}
 800b23e:	4618      	mov	r0, r3
 800b240:	3714      	adds	r7, #20
 800b242:	46bd      	mov	sp, r7
 800b244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b248:	4770      	bx	lr
 800b24a:	bf00      	nop
 800b24c:	20001678 	.word	0x20001678

0800b250 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800b250:	b480      	push	{r7}
 800b252:	b085      	sub	sp, #20
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800b258:	2300      	movs	r3, #0
 800b25a:	60fb      	str	r3, [r7, #12]
 800b25c:	e010      	b.n	800b280 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800b25e:	4a0d      	ldr	r2, [pc, #52]	; (800b294 <clear_lock+0x44>)
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	011b      	lsls	r3, r3, #4
 800b264:	4413      	add	r3, r2
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	687a      	ldr	r2, [r7, #4]
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d105      	bne.n	800b27a <clear_lock+0x2a>
 800b26e:	4a09      	ldr	r2, [pc, #36]	; (800b294 <clear_lock+0x44>)
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	011b      	lsls	r3, r3, #4
 800b274:	4413      	add	r3, r2
 800b276:	2200      	movs	r2, #0
 800b278:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	3301      	adds	r3, #1
 800b27e:	60fb      	str	r3, [r7, #12]
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	2b01      	cmp	r3, #1
 800b284:	d9eb      	bls.n	800b25e <clear_lock+0xe>
	}
}
 800b286:	bf00      	nop
 800b288:	bf00      	nop
 800b28a:	3714      	adds	r7, #20
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr
 800b294:	20001678 	.word	0x20001678

0800b298 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b086      	sub	sp, #24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800b2a0:	2300      	movs	r3, #0
 800b2a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	78db      	ldrb	r3, [r3, #3]
 800b2a8:	2b00      	cmp	r3, #0
 800b2aa:	d034      	beq.n	800b316 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	7858      	ldrb	r0, [r3, #1]
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b2bc:	2301      	movs	r3, #1
 800b2be:	697a      	ldr	r2, [r7, #20]
 800b2c0:	f7ff fd40 	bl	800ad44 <disk_write>
 800b2c4:	4603      	mov	r3, r0
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d002      	beq.n	800b2d0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	73fb      	strb	r3, [r7, #15]
 800b2ce:	e022      	b.n	800b316 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	6a1b      	ldr	r3, [r3, #32]
 800b2da:	697a      	ldr	r2, [r7, #20]
 800b2dc:	1ad2      	subs	r2, r2, r3
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	699b      	ldr	r3, [r3, #24]
 800b2e2:	429a      	cmp	r2, r3
 800b2e4:	d217      	bcs.n	800b316 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	789b      	ldrb	r3, [r3, #2]
 800b2ea:	613b      	str	r3, [r7, #16]
 800b2ec:	e010      	b.n	800b310 <sync_window+0x78>
					wsect += fs->fsize;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	699b      	ldr	r3, [r3, #24]
 800b2f2:	697a      	ldr	r2, [r7, #20]
 800b2f4:	4413      	add	r3, r2
 800b2f6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	7858      	ldrb	r0, [r3, #1]
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b302:	2301      	movs	r3, #1
 800b304:	697a      	ldr	r2, [r7, #20]
 800b306:	f7ff fd1d 	bl	800ad44 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800b30a:	693b      	ldr	r3, [r7, #16]
 800b30c:	3b01      	subs	r3, #1
 800b30e:	613b      	str	r3, [r7, #16]
 800b310:	693b      	ldr	r3, [r7, #16]
 800b312:	2b01      	cmp	r3, #1
 800b314:	d8eb      	bhi.n	800b2ee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800b316:	7bfb      	ldrb	r3, [r7, #15]
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3718      	adds	r7, #24
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800b32a:	2300      	movs	r3, #0
 800b32c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b332:	683a      	ldr	r2, [r7, #0]
 800b334:	429a      	cmp	r2, r3
 800b336:	d01b      	beq.n	800b370 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800b338:	6878      	ldr	r0, [r7, #4]
 800b33a:	f7ff ffad 	bl	800b298 <sync_window>
 800b33e:	4603      	mov	r3, r0
 800b340:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800b342:	7bfb      	ldrb	r3, [r7, #15]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d113      	bne.n	800b370 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	7858      	ldrb	r0, [r3, #1]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b352:	2301      	movs	r3, #1
 800b354:	683a      	ldr	r2, [r7, #0]
 800b356:	f7ff fcd5 	bl	800ad04 <disk_read>
 800b35a:	4603      	mov	r3, r0
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d004      	beq.n	800b36a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800b360:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b364:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800b366:	2301      	movs	r3, #1
 800b368:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	683a      	ldr	r2, [r7, #0]
 800b36e:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 800b370:	7bfb      	ldrb	r3, [r7, #15]
}
 800b372:	4618      	mov	r0, r3
 800b374:	3710      	adds	r7, #16
 800b376:	46bd      	mov	sp, r7
 800b378:	bd80      	pop	{r7, pc}
	...

0800b37c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800b37c:	b580      	push	{r7, lr}
 800b37e:	b084      	sub	sp, #16
 800b380:	af00      	add	r7, sp, #0
 800b382:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800b384:	6878      	ldr	r0, [r7, #4]
 800b386:	f7ff ff87 	bl	800b298 <sync_window>
 800b38a:	4603      	mov	r3, r0
 800b38c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800b38e:	7bfb      	ldrb	r3, [r7, #15]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d158      	bne.n	800b446 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	781b      	ldrb	r3, [r3, #0]
 800b398:	2b03      	cmp	r3, #3
 800b39a:	d148      	bne.n	800b42e <sync_fs+0xb2>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	791b      	ldrb	r3, [r3, #4]
 800b3a0:	2b01      	cmp	r3, #1
 800b3a2:	d144      	bne.n	800b42e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	3330      	adds	r3, #48	; 0x30
 800b3a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b3ac:	2100      	movs	r1, #0
 800b3ae:	4618      	mov	r0, r3
 800b3b0:	f7ff fda9 	bl	800af06 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	3330      	adds	r3, #48	; 0x30
 800b3b8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800b3bc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800b3c0:	4618      	mov	r0, r3
 800b3c2:	f7ff fd38 	bl	800ae36 <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	3330      	adds	r3, #48	; 0x30
 800b3ca:	4921      	ldr	r1, [pc, #132]	; (800b450 <sync_fs+0xd4>)
 800b3cc:	4618      	mov	r0, r3
 800b3ce:	f7ff fd4d 	bl	800ae6c <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	3330      	adds	r3, #48	; 0x30
 800b3d6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800b3da:	491e      	ldr	r1, [pc, #120]	; (800b454 <sync_fs+0xd8>)
 800b3dc:	4618      	mov	r0, r3
 800b3de:	f7ff fd45 	bl	800ae6c <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	3330      	adds	r3, #48	; 0x30
 800b3e6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	691b      	ldr	r3, [r3, #16]
 800b3ee:	4619      	mov	r1, r3
 800b3f0:	4610      	mov	r0, r2
 800b3f2:	f7ff fd3b 	bl	800ae6c <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	3330      	adds	r3, #48	; 0x30
 800b3fa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	68db      	ldr	r3, [r3, #12]
 800b402:	4619      	mov	r1, r3
 800b404:	4610      	mov	r0, r2
 800b406:	f7ff fd31 	bl	800ae6c <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	69db      	ldr	r3, [r3, #28]
 800b40e:	1c5a      	adds	r2, r3, #1
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	7858      	ldrb	r0, [r3, #1]
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b422:	2301      	movs	r3, #1
 800b424:	f7ff fc8e 	bl	800ad44 <disk_write>
			fs->fsi_flag = 0;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	785b      	ldrb	r3, [r3, #1]
 800b432:	2200      	movs	r2, #0
 800b434:	2100      	movs	r1, #0
 800b436:	4618      	mov	r0, r3
 800b438:	f7ff fca4 	bl	800ad84 <disk_ioctl>
 800b43c:	4603      	mov	r3, r0
 800b43e:	2b00      	cmp	r3, #0
 800b440:	d001      	beq.n	800b446 <sync_fs+0xca>
 800b442:	2301      	movs	r3, #1
 800b444:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800b446:	7bfb      	ldrb	r3, [r7, #15]
}
 800b448:	4618      	mov	r0, r3
 800b44a:	3710      	adds	r7, #16
 800b44c:	46bd      	mov	sp, r7
 800b44e:	bd80      	pop	{r7, pc}
 800b450:	41615252 	.word	0x41615252
 800b454:	61417272 	.word	0x61417272

0800b458 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800b458:	b480      	push	{r7}
 800b45a:	b083      	sub	sp, #12
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
 800b460:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800b462:	683b      	ldr	r3, [r7, #0]
 800b464:	3b02      	subs	r3, #2
 800b466:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	695b      	ldr	r3, [r3, #20]
 800b46c:	3b02      	subs	r3, #2
 800b46e:	683a      	ldr	r2, [r7, #0]
 800b470:	429a      	cmp	r2, r3
 800b472:	d301      	bcc.n	800b478 <clust2sect+0x20>
 800b474:	2300      	movs	r3, #0
 800b476:	e008      	b.n	800b48a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	895b      	ldrh	r3, [r3, #10]
 800b47c:	461a      	mov	r2, r3
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	fb03 f202 	mul.w	r2, r3, r2
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b488:	4413      	add	r3, r2
}
 800b48a:	4618      	mov	r0, r3
 800b48c:	370c      	adds	r7, #12
 800b48e:	46bd      	mov	sp, r7
 800b490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b494:	4770      	bx	lr

0800b496 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800b496:	b580      	push	{r7, lr}
 800b498:	b086      	sub	sp, #24
 800b49a:	af00      	add	r7, sp, #0
 800b49c:	6078      	str	r0, [r7, #4]
 800b49e:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800b4a6:	683b      	ldr	r3, [r7, #0]
 800b4a8:	2b01      	cmp	r3, #1
 800b4aa:	d904      	bls.n	800b4b6 <get_fat+0x20>
 800b4ac:	693b      	ldr	r3, [r7, #16]
 800b4ae:	695b      	ldr	r3, [r3, #20]
 800b4b0:	683a      	ldr	r2, [r7, #0]
 800b4b2:	429a      	cmp	r2, r3
 800b4b4:	d302      	bcc.n	800b4bc <get_fat+0x26>
		val = 1;	/* Internal error */
 800b4b6:	2301      	movs	r3, #1
 800b4b8:	617b      	str	r3, [r7, #20]
 800b4ba:	e08f      	b.n	800b5dc <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800b4bc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b4c0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800b4c2:	693b      	ldr	r3, [r7, #16]
 800b4c4:	781b      	ldrb	r3, [r3, #0]
 800b4c6:	2b03      	cmp	r3, #3
 800b4c8:	d062      	beq.n	800b590 <get_fat+0xfa>
 800b4ca:	2b03      	cmp	r3, #3
 800b4cc:	dc7c      	bgt.n	800b5c8 <get_fat+0x132>
 800b4ce:	2b01      	cmp	r3, #1
 800b4d0:	d002      	beq.n	800b4d8 <get_fat+0x42>
 800b4d2:	2b02      	cmp	r3, #2
 800b4d4:	d042      	beq.n	800b55c <get_fat+0xc6>
 800b4d6:	e077      	b.n	800b5c8 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800b4d8:	683b      	ldr	r3, [r7, #0]
 800b4da:	60fb      	str	r3, [r7, #12]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	085b      	lsrs	r3, r3, #1
 800b4e0:	68fa      	ldr	r2, [r7, #12]
 800b4e2:	4413      	add	r3, r2
 800b4e4:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b4e6:	693b      	ldr	r3, [r7, #16]
 800b4e8:	6a1a      	ldr	r2, [r3, #32]
 800b4ea:	68fb      	ldr	r3, [r7, #12]
 800b4ec:	0a5b      	lsrs	r3, r3, #9
 800b4ee:	4413      	add	r3, r2
 800b4f0:	4619      	mov	r1, r3
 800b4f2:	6938      	ldr	r0, [r7, #16]
 800b4f4:	f7ff ff14 	bl	800b320 <move_window>
 800b4f8:	4603      	mov	r3, r0
 800b4fa:	2b00      	cmp	r3, #0
 800b4fc:	d167      	bne.n	800b5ce <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	1c5a      	adds	r2, r3, #1
 800b502:	60fa      	str	r2, [r7, #12]
 800b504:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b508:	693a      	ldr	r2, [r7, #16]
 800b50a:	4413      	add	r3, r2
 800b50c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b510:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b512:	693b      	ldr	r3, [r7, #16]
 800b514:	6a1a      	ldr	r2, [r3, #32]
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	0a5b      	lsrs	r3, r3, #9
 800b51a:	4413      	add	r3, r2
 800b51c:	4619      	mov	r1, r3
 800b51e:	6938      	ldr	r0, [r7, #16]
 800b520:	f7ff fefe 	bl	800b320 <move_window>
 800b524:	4603      	mov	r3, r0
 800b526:	2b00      	cmp	r3, #0
 800b528:	d153      	bne.n	800b5d2 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b530:	693a      	ldr	r2, [r7, #16]
 800b532:	4413      	add	r3, r2
 800b534:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b538:	021b      	lsls	r3, r3, #8
 800b53a:	461a      	mov	r2, r3
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	4313      	orrs	r3, r2
 800b540:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	f003 0301 	and.w	r3, r3, #1
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d002      	beq.n	800b552 <get_fat+0xbc>
 800b54c:	68bb      	ldr	r3, [r7, #8]
 800b54e:	091b      	lsrs	r3, r3, #4
 800b550:	e002      	b.n	800b558 <get_fat+0xc2>
 800b552:	68bb      	ldr	r3, [r7, #8]
 800b554:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b558:	617b      	str	r3, [r7, #20]
			break;
 800b55a:	e03f      	b.n	800b5dc <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b55c:	693b      	ldr	r3, [r7, #16]
 800b55e:	6a1a      	ldr	r2, [r3, #32]
 800b560:	683b      	ldr	r3, [r7, #0]
 800b562:	0a1b      	lsrs	r3, r3, #8
 800b564:	4413      	add	r3, r2
 800b566:	4619      	mov	r1, r3
 800b568:	6938      	ldr	r0, [r7, #16]
 800b56a:	f7ff fed9 	bl	800b320 <move_window>
 800b56e:	4603      	mov	r3, r0
 800b570:	2b00      	cmp	r3, #0
 800b572:	d130      	bne.n	800b5d6 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800b574:	693b      	ldr	r3, [r7, #16]
 800b576:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b57a:	683b      	ldr	r3, [r7, #0]
 800b57c:	005b      	lsls	r3, r3, #1
 800b57e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b582:	4413      	add	r3, r2
 800b584:	4618      	mov	r0, r3
 800b586:	f7ff fc1b 	bl	800adc0 <ld_word>
 800b58a:	4603      	mov	r3, r0
 800b58c:	617b      	str	r3, [r7, #20]
			break;
 800b58e:	e025      	b.n	800b5dc <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b590:	693b      	ldr	r3, [r7, #16]
 800b592:	6a1a      	ldr	r2, [r3, #32]
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	09db      	lsrs	r3, r3, #7
 800b598:	4413      	add	r3, r2
 800b59a:	4619      	mov	r1, r3
 800b59c:	6938      	ldr	r0, [r7, #16]
 800b59e:	f7ff febf 	bl	800b320 <move_window>
 800b5a2:	4603      	mov	r3, r0
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d118      	bne.n	800b5da <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800b5a8:	693b      	ldr	r3, [r7, #16]
 800b5aa:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b5ae:	683b      	ldr	r3, [r7, #0]
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b5b6:	4413      	add	r3, r2
 800b5b8:	4618      	mov	r0, r3
 800b5ba:	f7ff fc19 	bl	800adf0 <ld_dword>
 800b5be:	4603      	mov	r3, r0
 800b5c0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800b5c4:	617b      	str	r3, [r7, #20]
			break;
 800b5c6:	e009      	b.n	800b5dc <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800b5c8:	2301      	movs	r3, #1
 800b5ca:	617b      	str	r3, [r7, #20]
 800b5cc:	e006      	b.n	800b5dc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b5ce:	bf00      	nop
 800b5d0:	e004      	b.n	800b5dc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800b5d2:	bf00      	nop
 800b5d4:	e002      	b.n	800b5dc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800b5d6:	bf00      	nop
 800b5d8:	e000      	b.n	800b5dc <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800b5da:	bf00      	nop
		}
	}

	return val;
 800b5dc:	697b      	ldr	r3, [r7, #20]
}
 800b5de:	4618      	mov	r0, r3
 800b5e0:	3718      	adds	r7, #24
 800b5e2:	46bd      	mov	sp, r7
 800b5e4:	bd80      	pop	{r7, pc}

0800b5e6 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800b5e6:	b590      	push	{r4, r7, lr}
 800b5e8:	b089      	sub	sp, #36	; 0x24
 800b5ea:	af00      	add	r7, sp, #0
 800b5ec:	60f8      	str	r0, [r7, #12]
 800b5ee:	60b9      	str	r1, [r7, #8]
 800b5f0:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800b5f2:	2302      	movs	r3, #2
 800b5f4:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800b5f6:	68bb      	ldr	r3, [r7, #8]
 800b5f8:	2b01      	cmp	r3, #1
 800b5fa:	f240 80d9 	bls.w	800b7b0 <put_fat+0x1ca>
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	695b      	ldr	r3, [r3, #20]
 800b602:	68ba      	ldr	r2, [r7, #8]
 800b604:	429a      	cmp	r2, r3
 800b606:	f080 80d3 	bcs.w	800b7b0 <put_fat+0x1ca>
		switch (fs->fs_type) {
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	2b03      	cmp	r3, #3
 800b610:	f000 8096 	beq.w	800b740 <put_fat+0x15a>
 800b614:	2b03      	cmp	r3, #3
 800b616:	f300 80cb 	bgt.w	800b7b0 <put_fat+0x1ca>
 800b61a:	2b01      	cmp	r3, #1
 800b61c:	d002      	beq.n	800b624 <put_fat+0x3e>
 800b61e:	2b02      	cmp	r3, #2
 800b620:	d06e      	beq.n	800b700 <put_fat+0x11a>
 800b622:	e0c5      	b.n	800b7b0 <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800b624:	68bb      	ldr	r3, [r7, #8]
 800b626:	61bb      	str	r3, [r7, #24]
 800b628:	69bb      	ldr	r3, [r7, #24]
 800b62a:	085b      	lsrs	r3, r3, #1
 800b62c:	69ba      	ldr	r2, [r7, #24]
 800b62e:	4413      	add	r3, r2
 800b630:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b632:	68fb      	ldr	r3, [r7, #12]
 800b634:	6a1a      	ldr	r2, [r3, #32]
 800b636:	69bb      	ldr	r3, [r7, #24]
 800b638:	0a5b      	lsrs	r3, r3, #9
 800b63a:	4413      	add	r3, r2
 800b63c:	4619      	mov	r1, r3
 800b63e:	68f8      	ldr	r0, [r7, #12]
 800b640:	f7ff fe6e 	bl	800b320 <move_window>
 800b644:	4603      	mov	r3, r0
 800b646:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b648:	7ffb      	ldrb	r3, [r7, #31]
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	f040 80a9 	bne.w	800b7a2 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800b650:	68fb      	ldr	r3, [r7, #12]
 800b652:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b656:	69bb      	ldr	r3, [r7, #24]
 800b658:	1c59      	adds	r1, r3, #1
 800b65a:	61b9      	str	r1, [r7, #24]
 800b65c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b660:	4413      	add	r3, r2
 800b662:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	f003 0301 	and.w	r3, r3, #1
 800b66a:	2b00      	cmp	r3, #0
 800b66c:	d00d      	beq.n	800b68a <put_fat+0xa4>
 800b66e:	697b      	ldr	r3, [r7, #20]
 800b670:	781b      	ldrb	r3, [r3, #0]
 800b672:	b25b      	sxtb	r3, r3
 800b674:	f003 030f 	and.w	r3, r3, #15
 800b678:	b25a      	sxtb	r2, r3
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	b2db      	uxtb	r3, r3
 800b67e:	011b      	lsls	r3, r3, #4
 800b680:	b25b      	sxtb	r3, r3
 800b682:	4313      	orrs	r3, r2
 800b684:	b25b      	sxtb	r3, r3
 800b686:	b2db      	uxtb	r3, r3
 800b688:	e001      	b.n	800b68e <put_fat+0xa8>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	697a      	ldr	r2, [r7, #20]
 800b690:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	2201      	movs	r2, #1
 800b696:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6a1a      	ldr	r2, [r3, #32]
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	0a5b      	lsrs	r3, r3, #9
 800b6a0:	4413      	add	r3, r2
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	68f8      	ldr	r0, [r7, #12]
 800b6a6:	f7ff fe3b 	bl	800b320 <move_window>
 800b6aa:	4603      	mov	r3, r0
 800b6ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b6ae:	7ffb      	ldrb	r3, [r7, #31]
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	d178      	bne.n	800b7a6 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b6ba:	69bb      	ldr	r3, [r7, #24]
 800b6bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6c0:	4413      	add	r3, r2
 800b6c2:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800b6c4:	68bb      	ldr	r3, [r7, #8]
 800b6c6:	f003 0301 	and.w	r3, r3, #1
 800b6ca:	2b00      	cmp	r3, #0
 800b6cc:	d003      	beq.n	800b6d6 <put_fat+0xf0>
 800b6ce:	687b      	ldr	r3, [r7, #4]
 800b6d0:	091b      	lsrs	r3, r3, #4
 800b6d2:	b2db      	uxtb	r3, r3
 800b6d4:	e00e      	b.n	800b6f4 <put_fat+0x10e>
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	b25b      	sxtb	r3, r3
 800b6dc:	f023 030f 	bic.w	r3, r3, #15
 800b6e0:	b25a      	sxtb	r2, r3
 800b6e2:	687b      	ldr	r3, [r7, #4]
 800b6e4:	0a1b      	lsrs	r3, r3, #8
 800b6e6:	b25b      	sxtb	r3, r3
 800b6e8:	f003 030f 	and.w	r3, r3, #15
 800b6ec:	b25b      	sxtb	r3, r3
 800b6ee:	4313      	orrs	r3, r2
 800b6f0:	b25b      	sxtb	r3, r3
 800b6f2:	b2db      	uxtb	r3, r3
 800b6f4:	697a      	ldr	r2, [r7, #20]
 800b6f6:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	2201      	movs	r2, #1
 800b6fc:	70da      	strb	r2, [r3, #3]
			break;
 800b6fe:	e057      	b.n	800b7b0 <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	6a1a      	ldr	r2, [r3, #32]
 800b704:	68bb      	ldr	r3, [r7, #8]
 800b706:	0a1b      	lsrs	r3, r3, #8
 800b708:	4413      	add	r3, r2
 800b70a:	4619      	mov	r1, r3
 800b70c:	68f8      	ldr	r0, [r7, #12]
 800b70e:	f7ff fe07 	bl	800b320 <move_window>
 800b712:	4603      	mov	r3, r0
 800b714:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b716:	7ffb      	ldrb	r3, [r7, #31]
 800b718:	2b00      	cmp	r3, #0
 800b71a:	d146      	bne.n	800b7aa <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	005b      	lsls	r3, r3, #1
 800b726:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800b72a:	4413      	add	r3, r2
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	b292      	uxth	r2, r2
 800b730:	4611      	mov	r1, r2
 800b732:	4618      	mov	r0, r3
 800b734:	f7ff fb7f 	bl	800ae36 <st_word>
			fs->wflag = 1;
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	2201      	movs	r2, #1
 800b73c:	70da      	strb	r2, [r3, #3]
			break;
 800b73e:	e037      	b.n	800b7b0 <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800b740:	68fb      	ldr	r3, [r7, #12]
 800b742:	6a1a      	ldr	r2, [r3, #32]
 800b744:	68bb      	ldr	r3, [r7, #8]
 800b746:	09db      	lsrs	r3, r3, #7
 800b748:	4413      	add	r3, r2
 800b74a:	4619      	mov	r1, r3
 800b74c:	68f8      	ldr	r0, [r7, #12]
 800b74e:	f7ff fde7 	bl	800b320 <move_window>
 800b752:	4603      	mov	r3, r0
 800b754:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800b756:	7ffb      	ldrb	r3, [r7, #31]
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d128      	bne.n	800b7ae <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b768:	68bb      	ldr	r3, [r7, #8]
 800b76a:	009b      	lsls	r3, r3, #2
 800b76c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b770:	4413      	add	r3, r2
 800b772:	4618      	mov	r0, r3
 800b774:	f7ff fb3c 	bl	800adf0 <ld_dword>
 800b778:	4603      	mov	r3, r0
 800b77a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b77e:	4323      	orrs	r3, r4
 800b780:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800b788:	68bb      	ldr	r3, [r7, #8]
 800b78a:	009b      	lsls	r3, r3, #2
 800b78c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800b790:	4413      	add	r3, r2
 800b792:	6879      	ldr	r1, [r7, #4]
 800b794:	4618      	mov	r0, r3
 800b796:	f7ff fb69 	bl	800ae6c <st_dword>
			fs->wflag = 1;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	2201      	movs	r2, #1
 800b79e:	70da      	strb	r2, [r3, #3]
			break;
 800b7a0:	e006      	b.n	800b7b0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b7a2:	bf00      	nop
 800b7a4:	e004      	b.n	800b7b0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b7a6:	bf00      	nop
 800b7a8:	e002      	b.n	800b7b0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b7aa:	bf00      	nop
 800b7ac:	e000      	b.n	800b7b0 <put_fat+0x1ca>
			if (res != FR_OK) break;
 800b7ae:	bf00      	nop
		}
	}
	return res;
 800b7b0:	7ffb      	ldrb	r3, [r7, #31]
}
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	3724      	adds	r7, #36	; 0x24
 800b7b6:	46bd      	mov	sp, r7
 800b7b8:	bd90      	pop	{r4, r7, pc}

0800b7ba <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800b7ba:	b580      	push	{r7, lr}
 800b7bc:	b088      	sub	sp, #32
 800b7be:	af00      	add	r7, sp, #0
 800b7c0:	60f8      	str	r0, [r7, #12]
 800b7c2:	60b9      	str	r1, [r7, #8]
 800b7c4:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800b7d0:	68bb      	ldr	r3, [r7, #8]
 800b7d2:	2b01      	cmp	r3, #1
 800b7d4:	d904      	bls.n	800b7e0 <remove_chain+0x26>
 800b7d6:	69bb      	ldr	r3, [r7, #24]
 800b7d8:	695b      	ldr	r3, [r3, #20]
 800b7da:	68ba      	ldr	r2, [r7, #8]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d301      	bcc.n	800b7e4 <remove_chain+0x2a>
 800b7e0:	2302      	movs	r3, #2
 800b7e2:	e04b      	b.n	800b87c <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	d00c      	beq.n	800b804 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800b7ea:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7ee:	6879      	ldr	r1, [r7, #4]
 800b7f0:	69b8      	ldr	r0, [r7, #24]
 800b7f2:	f7ff fef8 	bl	800b5e6 <put_fat>
 800b7f6:	4603      	mov	r3, r0
 800b7f8:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800b7fa:	7ffb      	ldrb	r3, [r7, #31]
 800b7fc:	2b00      	cmp	r3, #0
 800b7fe:	d001      	beq.n	800b804 <remove_chain+0x4a>
 800b800:	7ffb      	ldrb	r3, [r7, #31]
 800b802:	e03b      	b.n	800b87c <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800b804:	68b9      	ldr	r1, [r7, #8]
 800b806:	68f8      	ldr	r0, [r7, #12]
 800b808:	f7ff fe45 	bl	800b496 <get_fat>
 800b80c:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	2b00      	cmp	r3, #0
 800b812:	d031      	beq.n	800b878 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800b814:	697b      	ldr	r3, [r7, #20]
 800b816:	2b01      	cmp	r3, #1
 800b818:	d101      	bne.n	800b81e <remove_chain+0x64>
 800b81a:	2302      	movs	r3, #2
 800b81c:	e02e      	b.n	800b87c <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800b81e:	697b      	ldr	r3, [r7, #20]
 800b820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b824:	d101      	bne.n	800b82a <remove_chain+0x70>
 800b826:	2301      	movs	r3, #1
 800b828:	e028      	b.n	800b87c <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800b82a:	2200      	movs	r2, #0
 800b82c:	68b9      	ldr	r1, [r7, #8]
 800b82e:	69b8      	ldr	r0, [r7, #24]
 800b830:	f7ff fed9 	bl	800b5e6 <put_fat>
 800b834:	4603      	mov	r3, r0
 800b836:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800b838:	7ffb      	ldrb	r3, [r7, #31]
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d001      	beq.n	800b842 <remove_chain+0x88>
 800b83e:	7ffb      	ldrb	r3, [r7, #31]
 800b840:	e01c      	b.n	800b87c <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800b842:	69bb      	ldr	r3, [r7, #24]
 800b844:	691a      	ldr	r2, [r3, #16]
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	695b      	ldr	r3, [r3, #20]
 800b84a:	3b02      	subs	r3, #2
 800b84c:	429a      	cmp	r2, r3
 800b84e:	d20b      	bcs.n	800b868 <remove_chain+0xae>
			fs->free_clst++;
 800b850:	69bb      	ldr	r3, [r7, #24]
 800b852:	691b      	ldr	r3, [r3, #16]
 800b854:	1c5a      	adds	r2, r3, #1
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 800b85a:	69bb      	ldr	r3, [r7, #24]
 800b85c:	791b      	ldrb	r3, [r3, #4]
 800b85e:	f043 0301 	orr.w	r3, r3, #1
 800b862:	b2da      	uxtb	r2, r3
 800b864:	69bb      	ldr	r3, [r7, #24]
 800b866:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800b868:	697b      	ldr	r3, [r7, #20]
 800b86a:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800b86c:	69bb      	ldr	r3, [r7, #24]
 800b86e:	695b      	ldr	r3, [r3, #20]
 800b870:	68ba      	ldr	r2, [r7, #8]
 800b872:	429a      	cmp	r2, r3
 800b874:	d3c6      	bcc.n	800b804 <remove_chain+0x4a>
 800b876:	e000      	b.n	800b87a <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800b878:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3720      	adds	r7, #32
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b088      	sub	sp, #32
 800b888:	af00      	add	r7, sp, #0
 800b88a:	6078      	str	r0, [r7, #4]
 800b88c:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	681b      	ldr	r3, [r3, #0]
 800b892:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	2b00      	cmp	r3, #0
 800b898:	d10d      	bne.n	800b8b6 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	68db      	ldr	r3, [r3, #12]
 800b89e:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800b8a0:	69bb      	ldr	r3, [r7, #24]
 800b8a2:	2b00      	cmp	r3, #0
 800b8a4:	d004      	beq.n	800b8b0 <create_chain+0x2c>
 800b8a6:	693b      	ldr	r3, [r7, #16]
 800b8a8:	695b      	ldr	r3, [r3, #20]
 800b8aa:	69ba      	ldr	r2, [r7, #24]
 800b8ac:	429a      	cmp	r2, r3
 800b8ae:	d31b      	bcc.n	800b8e8 <create_chain+0x64>
 800b8b0:	2301      	movs	r3, #1
 800b8b2:	61bb      	str	r3, [r7, #24]
 800b8b4:	e018      	b.n	800b8e8 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800b8b6:	6839      	ldr	r1, [r7, #0]
 800b8b8:	6878      	ldr	r0, [r7, #4]
 800b8ba:	f7ff fdec 	bl	800b496 <get_fat>
 800b8be:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	2b01      	cmp	r3, #1
 800b8c4:	d801      	bhi.n	800b8ca <create_chain+0x46>
 800b8c6:	2301      	movs	r3, #1
 800b8c8:	e070      	b.n	800b9ac <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b8d0:	d101      	bne.n	800b8d6 <create_chain+0x52>
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	e06a      	b.n	800b9ac <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800b8d6:	693b      	ldr	r3, [r7, #16]
 800b8d8:	695b      	ldr	r3, [r3, #20]
 800b8da:	68fa      	ldr	r2, [r7, #12]
 800b8dc:	429a      	cmp	r2, r3
 800b8de:	d201      	bcs.n	800b8e4 <create_chain+0x60>
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	e063      	b.n	800b9ac <create_chain+0x128>
		scl = clst;
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800b8ec:	69fb      	ldr	r3, [r7, #28]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800b8f2:	693b      	ldr	r3, [r7, #16]
 800b8f4:	695b      	ldr	r3, [r3, #20]
 800b8f6:	69fa      	ldr	r2, [r7, #28]
 800b8f8:	429a      	cmp	r2, r3
 800b8fa:	d307      	bcc.n	800b90c <create_chain+0x88>
				ncl = 2;
 800b8fc:	2302      	movs	r3, #2
 800b8fe:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800b900:	69fa      	ldr	r2, [r7, #28]
 800b902:	69bb      	ldr	r3, [r7, #24]
 800b904:	429a      	cmp	r2, r3
 800b906:	d901      	bls.n	800b90c <create_chain+0x88>
 800b908:	2300      	movs	r3, #0
 800b90a:	e04f      	b.n	800b9ac <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800b90c:	69f9      	ldr	r1, [r7, #28]
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f7ff fdc1 	bl	800b496 <get_fat>
 800b914:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d00e      	beq.n	800b93a <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d003      	beq.n	800b92a <create_chain+0xa6>
 800b922:	68fb      	ldr	r3, [r7, #12]
 800b924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b928:	d101      	bne.n	800b92e <create_chain+0xaa>
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	e03e      	b.n	800b9ac <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800b92e:	69fa      	ldr	r2, [r7, #28]
 800b930:	69bb      	ldr	r3, [r7, #24]
 800b932:	429a      	cmp	r2, r3
 800b934:	d1da      	bne.n	800b8ec <create_chain+0x68>
 800b936:	2300      	movs	r3, #0
 800b938:	e038      	b.n	800b9ac <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800b93a:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800b93c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b940:	69f9      	ldr	r1, [r7, #28]
 800b942:	6938      	ldr	r0, [r7, #16]
 800b944:	f7ff fe4f 	bl	800b5e6 <put_fat>
 800b948:	4603      	mov	r3, r0
 800b94a:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800b94c:	7dfb      	ldrb	r3, [r7, #23]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d109      	bne.n	800b966 <create_chain+0xe2>
 800b952:	683b      	ldr	r3, [r7, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d006      	beq.n	800b966 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800b958:	69fa      	ldr	r2, [r7, #28]
 800b95a:	6839      	ldr	r1, [r7, #0]
 800b95c:	6938      	ldr	r0, [r7, #16]
 800b95e:	f7ff fe42 	bl	800b5e6 <put_fat>
 800b962:	4603      	mov	r3, r0
 800b964:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800b966:	7dfb      	ldrb	r3, [r7, #23]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d116      	bne.n	800b99a <create_chain+0x116>
		fs->last_clst = ncl;
 800b96c:	693b      	ldr	r3, [r7, #16]
 800b96e:	69fa      	ldr	r2, [r7, #28]
 800b970:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800b972:	693b      	ldr	r3, [r7, #16]
 800b974:	691a      	ldr	r2, [r3, #16]
 800b976:	693b      	ldr	r3, [r7, #16]
 800b978:	695b      	ldr	r3, [r3, #20]
 800b97a:	3b02      	subs	r3, #2
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d804      	bhi.n	800b98a <create_chain+0x106>
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	691b      	ldr	r3, [r3, #16]
 800b984:	1e5a      	subs	r2, r3, #1
 800b986:	693b      	ldr	r3, [r7, #16]
 800b988:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 800b98a:	693b      	ldr	r3, [r7, #16]
 800b98c:	791b      	ldrb	r3, [r3, #4]
 800b98e:	f043 0301 	orr.w	r3, r3, #1
 800b992:	b2da      	uxtb	r2, r3
 800b994:	693b      	ldr	r3, [r7, #16]
 800b996:	711a      	strb	r2, [r3, #4]
 800b998:	e007      	b.n	800b9aa <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800b99a:	7dfb      	ldrb	r3, [r7, #23]
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d102      	bne.n	800b9a6 <create_chain+0x122>
 800b9a0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9a4:	e000      	b.n	800b9a8 <create_chain+0x124>
 800b9a6:	2301      	movs	r3, #1
 800b9a8:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800b9aa:	69fb      	ldr	r3, [r7, #28]
}
 800b9ac:	4618      	mov	r0, r3
 800b9ae:	3720      	adds	r7, #32
 800b9b0:	46bd      	mov	sp, r7
 800b9b2:	bd80      	pop	{r7, pc}

0800b9b4 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800b9b4:	b480      	push	{r7}
 800b9b6:	b087      	sub	sp, #28
 800b9b8:	af00      	add	r7, sp, #0
 800b9ba:	6078      	str	r0, [r7, #4]
 800b9bc:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b9c8:	3304      	adds	r3, #4
 800b9ca:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800b9cc:	683b      	ldr	r3, [r7, #0]
 800b9ce:	0a5b      	lsrs	r3, r3, #9
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	8952      	ldrh	r2, [r2, #10]
 800b9d4:	fbb3 f3f2 	udiv	r3, r3, r2
 800b9d8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800b9da:	693b      	ldr	r3, [r7, #16]
 800b9dc:	1d1a      	adds	r2, r3, #4
 800b9de:	613a      	str	r2, [r7, #16]
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800b9e4:	68bb      	ldr	r3, [r7, #8]
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d101      	bne.n	800b9ee <clmt_clust+0x3a>
 800b9ea:	2300      	movs	r3, #0
 800b9ec:	e010      	b.n	800ba10 <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800b9ee:	697a      	ldr	r2, [r7, #20]
 800b9f0:	68bb      	ldr	r3, [r7, #8]
 800b9f2:	429a      	cmp	r2, r3
 800b9f4:	d307      	bcc.n	800ba06 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800b9f6:	697a      	ldr	r2, [r7, #20]
 800b9f8:	68bb      	ldr	r3, [r7, #8]
 800b9fa:	1ad3      	subs	r3, r2, r3
 800b9fc:	617b      	str	r3, [r7, #20]
 800b9fe:	693b      	ldr	r3, [r7, #16]
 800ba00:	3304      	adds	r3, #4
 800ba02:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ba04:	e7e9      	b.n	800b9da <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ba06:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ba08:	693b      	ldr	r3, [r7, #16]
 800ba0a:	681a      	ldr	r2, [r3, #0]
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	4413      	add	r3, r2
}
 800ba10:	4618      	mov	r0, r3
 800ba12:	371c      	adds	r7, #28
 800ba14:	46bd      	mov	sp, r7
 800ba16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba1a:	4770      	bx	lr

0800ba1c <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ba1c:	b580      	push	{r7, lr}
 800ba1e:	b086      	sub	sp, #24
 800ba20:	af00      	add	r7, sp, #0
 800ba22:	6078      	str	r0, [r7, #4]
 800ba24:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	681b      	ldr	r3, [r3, #0]
 800ba2a:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ba2c:	683b      	ldr	r3, [r7, #0]
 800ba2e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ba32:	d204      	bcs.n	800ba3e <dir_sdi+0x22>
 800ba34:	683b      	ldr	r3, [r7, #0]
 800ba36:	f003 031f 	and.w	r3, r3, #31
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d001      	beq.n	800ba42 <dir_sdi+0x26>
		return FR_INT_ERR;
 800ba3e:	2302      	movs	r3, #2
 800ba40:	e063      	b.n	800bb0a <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	683a      	ldr	r2, [r7, #0]
 800ba46:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	689b      	ldr	r3, [r3, #8]
 800ba4c:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ba4e:	697b      	ldr	r3, [r7, #20]
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d106      	bne.n	800ba62 <dir_sdi+0x46>
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	781b      	ldrb	r3, [r3, #0]
 800ba58:	2b02      	cmp	r3, #2
 800ba5a:	d902      	bls.n	800ba62 <dir_sdi+0x46>
		clst = fs->dirbase;
 800ba5c:	693b      	ldr	r3, [r7, #16]
 800ba5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba60:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ba62:	697b      	ldr	r3, [r7, #20]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d10c      	bne.n	800ba82 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	095b      	lsrs	r3, r3, #5
 800ba6c:	693a      	ldr	r2, [r7, #16]
 800ba6e:	8912      	ldrh	r2, [r2, #8]
 800ba70:	4293      	cmp	r3, r2
 800ba72:	d301      	bcc.n	800ba78 <dir_sdi+0x5c>
 800ba74:	2302      	movs	r3, #2
 800ba76:	e048      	b.n	800bb0a <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ba78:	693b      	ldr	r3, [r7, #16]
 800ba7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	61da      	str	r2, [r3, #28]
 800ba80:	e029      	b.n	800bad6 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ba82:	693b      	ldr	r3, [r7, #16]
 800ba84:	895b      	ldrh	r3, [r3, #10]
 800ba86:	025b      	lsls	r3, r3, #9
 800ba88:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ba8a:	e019      	b.n	800bac0 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	6979      	ldr	r1, [r7, #20]
 800ba90:	4618      	mov	r0, r3
 800ba92:	f7ff fd00 	bl	800b496 <get_fat>
 800ba96:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ba98:	697b      	ldr	r3, [r7, #20]
 800ba9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba9e:	d101      	bne.n	800baa4 <dir_sdi+0x88>
 800baa0:	2301      	movs	r3, #1
 800baa2:	e032      	b.n	800bb0a <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800baa4:	697b      	ldr	r3, [r7, #20]
 800baa6:	2b01      	cmp	r3, #1
 800baa8:	d904      	bls.n	800bab4 <dir_sdi+0x98>
 800baaa:	693b      	ldr	r3, [r7, #16]
 800baac:	695b      	ldr	r3, [r3, #20]
 800baae:	697a      	ldr	r2, [r7, #20]
 800bab0:	429a      	cmp	r2, r3
 800bab2:	d301      	bcc.n	800bab8 <dir_sdi+0x9c>
 800bab4:	2302      	movs	r3, #2
 800bab6:	e028      	b.n	800bb0a <dir_sdi+0xee>
			ofs -= csz;
 800bab8:	683a      	ldr	r2, [r7, #0]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	1ad3      	subs	r3, r2, r3
 800babe:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800bac0:	683a      	ldr	r2, [r7, #0]
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	429a      	cmp	r2, r3
 800bac6:	d2e1      	bcs.n	800ba8c <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800bac8:	6979      	ldr	r1, [r7, #20]
 800baca:	6938      	ldr	r0, [r7, #16]
 800bacc:	f7ff fcc4 	bl	800b458 <clust2sect>
 800bad0:	4602      	mov	r2, r0
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	697a      	ldr	r2, [r7, #20]
 800bada:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	69db      	ldr	r3, [r3, #28]
 800bae0:	2b00      	cmp	r3, #0
 800bae2:	d101      	bne.n	800bae8 <dir_sdi+0xcc>
 800bae4:	2302      	movs	r3, #2
 800bae6:	e010      	b.n	800bb0a <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	69da      	ldr	r2, [r3, #28]
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	0a5b      	lsrs	r3, r3, #9
 800baf0:	441a      	add	r2, r3
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800baf6:	693b      	ldr	r3, [r7, #16]
 800baf8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bafc:	683b      	ldr	r3, [r7, #0]
 800bafe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb02:	441a      	add	r2, r3
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bb08:	2300      	movs	r3, #0
}
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	3718      	adds	r7, #24
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b086      	sub	sp, #24
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	6078      	str	r0, [r7, #4]
 800bb1a:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800bb22:	687b      	ldr	r3, [r7, #4]
 800bb24:	695b      	ldr	r3, [r3, #20]
 800bb26:	3320      	adds	r3, #32
 800bb28:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	69db      	ldr	r3, [r3, #28]
 800bb2e:	2b00      	cmp	r3, #0
 800bb30:	d003      	beq.n	800bb3a <dir_next+0x28>
 800bb32:	68bb      	ldr	r3, [r7, #8]
 800bb34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bb38:	d301      	bcc.n	800bb3e <dir_next+0x2c>
 800bb3a:	2304      	movs	r3, #4
 800bb3c:	e0aa      	b.n	800bc94 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	f040 8098 	bne.w	800bc7a <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800bb4a:	687b      	ldr	r3, [r7, #4]
 800bb4c:	69db      	ldr	r3, [r3, #28]
 800bb4e:	1c5a      	adds	r2, r3, #1
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800bb54:	687b      	ldr	r3, [r7, #4]
 800bb56:	699b      	ldr	r3, [r3, #24]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d10b      	bne.n	800bb74 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800bb5c:	68bb      	ldr	r3, [r7, #8]
 800bb5e:	095b      	lsrs	r3, r3, #5
 800bb60:	68fa      	ldr	r2, [r7, #12]
 800bb62:	8912      	ldrh	r2, [r2, #8]
 800bb64:	4293      	cmp	r3, r2
 800bb66:	f0c0 8088 	bcc.w	800bc7a <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	2200      	movs	r2, #0
 800bb6e:	61da      	str	r2, [r3, #28]
 800bb70:	2304      	movs	r3, #4
 800bb72:	e08f      	b.n	800bc94 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	0a5b      	lsrs	r3, r3, #9
 800bb78:	68fa      	ldr	r2, [r7, #12]
 800bb7a:	8952      	ldrh	r2, [r2, #10]
 800bb7c:	3a01      	subs	r2, #1
 800bb7e:	4013      	ands	r3, r2
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d17a      	bne.n	800bc7a <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	699b      	ldr	r3, [r3, #24]
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	4610      	mov	r0, r2
 800bb8e:	f7ff fc82 	bl	800b496 <get_fat>
 800bb92:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800bb94:	697b      	ldr	r3, [r7, #20]
 800bb96:	2b01      	cmp	r3, #1
 800bb98:	d801      	bhi.n	800bb9e <dir_next+0x8c>
 800bb9a:	2302      	movs	r3, #2
 800bb9c:	e07a      	b.n	800bc94 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bba4:	d101      	bne.n	800bbaa <dir_next+0x98>
 800bba6:	2301      	movs	r3, #1
 800bba8:	e074      	b.n	800bc94 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	695b      	ldr	r3, [r3, #20]
 800bbae:	697a      	ldr	r2, [r7, #20]
 800bbb0:	429a      	cmp	r2, r3
 800bbb2:	d358      	bcc.n	800bc66 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800bbb4:	683b      	ldr	r3, [r7, #0]
 800bbb6:	2b00      	cmp	r3, #0
 800bbb8:	d104      	bne.n	800bbc4 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800bbba:	687b      	ldr	r3, [r7, #4]
 800bbbc:	2200      	movs	r2, #0
 800bbbe:	61da      	str	r2, [r3, #28]
 800bbc0:	2304      	movs	r3, #4
 800bbc2:	e067      	b.n	800bc94 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800bbc4:	687a      	ldr	r2, [r7, #4]
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	699b      	ldr	r3, [r3, #24]
 800bbca:	4619      	mov	r1, r3
 800bbcc:	4610      	mov	r0, r2
 800bbce:	f7ff fe59 	bl	800b884 <create_chain>
 800bbd2:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d101      	bne.n	800bbde <dir_next+0xcc>
 800bbda:	2307      	movs	r3, #7
 800bbdc:	e05a      	b.n	800bc94 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800bbde:	697b      	ldr	r3, [r7, #20]
 800bbe0:	2b01      	cmp	r3, #1
 800bbe2:	d101      	bne.n	800bbe8 <dir_next+0xd6>
 800bbe4:	2302      	movs	r3, #2
 800bbe6:	e055      	b.n	800bc94 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800bbe8:	697b      	ldr	r3, [r7, #20]
 800bbea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bbee:	d101      	bne.n	800bbf4 <dir_next+0xe2>
 800bbf0:	2301      	movs	r3, #1
 800bbf2:	e04f      	b.n	800bc94 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800bbf4:	68f8      	ldr	r0, [r7, #12]
 800bbf6:	f7ff fb4f 	bl	800b298 <sync_window>
 800bbfa:	4603      	mov	r3, r0
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	d001      	beq.n	800bc04 <dir_next+0xf2>
 800bc00:	2301      	movs	r3, #1
 800bc02:	e047      	b.n	800bc94 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	3330      	adds	r3, #48	; 0x30
 800bc08:	f44f 7200 	mov.w	r2, #512	; 0x200
 800bc0c:	2100      	movs	r1, #0
 800bc0e:	4618      	mov	r0, r3
 800bc10:	f7ff f979 	bl	800af06 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bc14:	2300      	movs	r3, #0
 800bc16:	613b      	str	r3, [r7, #16]
 800bc18:	6979      	ldr	r1, [r7, #20]
 800bc1a:	68f8      	ldr	r0, [r7, #12]
 800bc1c:	f7ff fc1c 	bl	800b458 <clust2sect>
 800bc20:	4602      	mov	r2, r0
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	62da      	str	r2, [r3, #44]	; 0x2c
 800bc26:	e012      	b.n	800bc4e <dir_next+0x13c>
						fs->wflag = 1;
 800bc28:	68fb      	ldr	r3, [r7, #12]
 800bc2a:	2201      	movs	r2, #1
 800bc2c:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800bc2e:	68f8      	ldr	r0, [r7, #12]
 800bc30:	f7ff fb32 	bl	800b298 <sync_window>
 800bc34:	4603      	mov	r3, r0
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d001      	beq.n	800bc3e <dir_next+0x12c>
 800bc3a:	2301      	movs	r3, #1
 800bc3c:	e02a      	b.n	800bc94 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	3301      	adds	r3, #1
 800bc42:	613b      	str	r3, [r7, #16]
 800bc44:	68fb      	ldr	r3, [r7, #12]
 800bc46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bc48:	1c5a      	adds	r2, r3, #1
 800bc4a:	68fb      	ldr	r3, [r7, #12]
 800bc4c:	62da      	str	r2, [r3, #44]	; 0x2c
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	895b      	ldrh	r3, [r3, #10]
 800bc52:	461a      	mov	r2, r3
 800bc54:	693b      	ldr	r3, [r7, #16]
 800bc56:	4293      	cmp	r3, r2
 800bc58:	d3e6      	bcc.n	800bc28 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	1ad2      	subs	r2, r2, r3
 800bc62:	68fb      	ldr	r3, [r7, #12]
 800bc64:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800bc66:	687b      	ldr	r3, [r7, #4]
 800bc68:	697a      	ldr	r2, [r7, #20]
 800bc6a:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800bc6c:	6979      	ldr	r1, [r7, #20]
 800bc6e:	68f8      	ldr	r0, [r7, #12]
 800bc70:	f7ff fbf2 	bl	800b458 <clust2sect>
 800bc74:	4602      	mov	r2, r0
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	68ba      	ldr	r2, [r7, #8]
 800bc7e:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bc8c:	441a      	add	r2, r3
 800bc8e:	687b      	ldr	r3, [r7, #4]
 800bc90:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800bc92:	2300      	movs	r3, #0
}
 800bc94:	4618      	mov	r0, r3
 800bc96:	3718      	adds	r7, #24
 800bc98:	46bd      	mov	sp, r7
 800bc9a:	bd80      	pop	{r7, pc}

0800bc9c <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800bc9c:	b580      	push	{r7, lr}
 800bc9e:	b086      	sub	sp, #24
 800bca0:	af00      	add	r7, sp, #0
 800bca2:	6078      	str	r0, [r7, #4]
 800bca4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800bcac:	2100      	movs	r1, #0
 800bcae:	6878      	ldr	r0, [r7, #4]
 800bcb0:	f7ff feb4 	bl	800ba1c <dir_sdi>
 800bcb4:	4603      	mov	r3, r0
 800bcb6:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800bcb8:	7dfb      	ldrb	r3, [r7, #23]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	d12b      	bne.n	800bd16 <dir_alloc+0x7a>
		n = 0;
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800bcc2:	687b      	ldr	r3, [r7, #4]
 800bcc4:	69db      	ldr	r3, [r3, #28]
 800bcc6:	4619      	mov	r1, r3
 800bcc8:	68f8      	ldr	r0, [r7, #12]
 800bcca:	f7ff fb29 	bl	800b320 <move_window>
 800bcce:	4603      	mov	r3, r0
 800bcd0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800bcd2:	7dfb      	ldrb	r3, [r7, #23]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d11d      	bne.n	800bd14 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	6a1b      	ldr	r3, [r3, #32]
 800bcdc:	781b      	ldrb	r3, [r3, #0]
 800bcde:	2be5      	cmp	r3, #229	; 0xe5
 800bce0:	d004      	beq.n	800bcec <dir_alloc+0x50>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	6a1b      	ldr	r3, [r3, #32]
 800bce6:	781b      	ldrb	r3, [r3, #0]
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d107      	bne.n	800bcfc <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800bcec:	693b      	ldr	r3, [r7, #16]
 800bcee:	3301      	adds	r3, #1
 800bcf0:	613b      	str	r3, [r7, #16]
 800bcf2:	693a      	ldr	r2, [r7, #16]
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	429a      	cmp	r2, r3
 800bcf8:	d102      	bne.n	800bd00 <dir_alloc+0x64>
 800bcfa:	e00c      	b.n	800bd16 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800bd00:	2101      	movs	r1, #1
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f7ff ff05 	bl	800bb12 <dir_next>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800bd0c:	7dfb      	ldrb	r3, [r7, #23]
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d0d7      	beq.n	800bcc2 <dir_alloc+0x26>
 800bd12:	e000      	b.n	800bd16 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800bd14:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800bd16:	7dfb      	ldrb	r3, [r7, #23]
 800bd18:	2b04      	cmp	r3, #4
 800bd1a:	d101      	bne.n	800bd20 <dir_alloc+0x84>
 800bd1c:	2307      	movs	r3, #7
 800bd1e:	75fb      	strb	r3, [r7, #23]
	return res;
 800bd20:	7dfb      	ldrb	r3, [r7, #23]
}
 800bd22:	4618      	mov	r0, r3
 800bd24:	3718      	adds	r7, #24
 800bd26:	46bd      	mov	sp, r7
 800bd28:	bd80      	pop	{r7, pc}

0800bd2a <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800bd2a:	b580      	push	{r7, lr}
 800bd2c:	b084      	sub	sp, #16
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
 800bd32:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800bd34:	683b      	ldr	r3, [r7, #0]
 800bd36:	331a      	adds	r3, #26
 800bd38:	4618      	mov	r0, r3
 800bd3a:	f7ff f841 	bl	800adc0 <ld_word>
 800bd3e:	4603      	mov	r3, r0
 800bd40:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800bd42:	687b      	ldr	r3, [r7, #4]
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	2b03      	cmp	r3, #3
 800bd48:	d109      	bne.n	800bd5e <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800bd4a:	683b      	ldr	r3, [r7, #0]
 800bd4c:	3314      	adds	r3, #20
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f7ff f836 	bl	800adc0 <ld_word>
 800bd54:	4603      	mov	r3, r0
 800bd56:	041b      	lsls	r3, r3, #16
 800bd58:	68fa      	ldr	r2, [r7, #12]
 800bd5a:	4313      	orrs	r3, r2
 800bd5c:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800bd5e:	68fb      	ldr	r3, [r7, #12]
}
 800bd60:	4618      	mov	r0, r3
 800bd62:	3710      	adds	r7, #16
 800bd64:	46bd      	mov	sp, r7
 800bd66:	bd80      	pop	{r7, pc}

0800bd68 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b084      	sub	sp, #16
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	60f8      	str	r0, [r7, #12]
 800bd70:	60b9      	str	r1, [r7, #8]
 800bd72:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800bd74:	68bb      	ldr	r3, [r7, #8]
 800bd76:	331a      	adds	r3, #26
 800bd78:	687a      	ldr	r2, [r7, #4]
 800bd7a:	b292      	uxth	r2, r2
 800bd7c:	4611      	mov	r1, r2
 800bd7e:	4618      	mov	r0, r3
 800bd80:	f7ff f859 	bl	800ae36 <st_word>
	if (fs->fs_type == FS_FAT32) {
 800bd84:	68fb      	ldr	r3, [r7, #12]
 800bd86:	781b      	ldrb	r3, [r3, #0]
 800bd88:	2b03      	cmp	r3, #3
 800bd8a:	d109      	bne.n	800bda0 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800bd8c:	68bb      	ldr	r3, [r7, #8]
 800bd8e:	f103 0214 	add.w	r2, r3, #20
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	0c1b      	lsrs	r3, r3, #16
 800bd96:	b29b      	uxth	r3, r3
 800bd98:	4619      	mov	r1, r3
 800bd9a:	4610      	mov	r0, r2
 800bd9c:	f7ff f84b 	bl	800ae36 <st_word>
	}
}
 800bda0:	bf00      	nop
 800bda2:	3710      	adds	r7, #16
 800bda4:	46bd      	mov	sp, r7
 800bda6:	bd80      	pop	{r7, pc}

0800bda8 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b086      	sub	sp, #24
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	681b      	ldr	r3, [r3, #0]
 800bdb4:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800bdb6:	2100      	movs	r1, #0
 800bdb8:	6878      	ldr	r0, [r7, #4]
 800bdba:	f7ff fe2f 	bl	800ba1c <dir_sdi>
 800bdbe:	4603      	mov	r3, r0
 800bdc0:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800bdc2:	7dfb      	ldrb	r3, [r7, #23]
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d001      	beq.n	800bdcc <dir_find+0x24>
 800bdc8:	7dfb      	ldrb	r3, [r7, #23]
 800bdca:	e03e      	b.n	800be4a <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 800bdcc:	687b      	ldr	r3, [r7, #4]
 800bdce:	69db      	ldr	r3, [r3, #28]
 800bdd0:	4619      	mov	r1, r3
 800bdd2:	6938      	ldr	r0, [r7, #16]
 800bdd4:	f7ff faa4 	bl	800b320 <move_window>
 800bdd8:	4603      	mov	r3, r0
 800bdda:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800bddc:	7dfb      	ldrb	r3, [r7, #23]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d12f      	bne.n	800be42 <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 800bde2:	687b      	ldr	r3, [r7, #4]
 800bde4:	6a1b      	ldr	r3, [r3, #32]
 800bde6:	781b      	ldrb	r3, [r3, #0]
 800bde8:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800bdea:	7bfb      	ldrb	r3, [r7, #15]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d102      	bne.n	800bdf6 <dir_find+0x4e>
 800bdf0:	2304      	movs	r3, #4
 800bdf2:	75fb      	strb	r3, [r7, #23]
 800bdf4:	e028      	b.n	800be48 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 800bdf6:	687b      	ldr	r3, [r7, #4]
 800bdf8:	6a1b      	ldr	r3, [r3, #32]
 800bdfa:	330b      	adds	r3, #11
 800bdfc:	781b      	ldrb	r3, [r3, #0]
 800bdfe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800be02:	b2da      	uxtb	r2, r3
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	6a1b      	ldr	r3, [r3, #32]
 800be0c:	330b      	adds	r3, #11
 800be0e:	781b      	ldrb	r3, [r3, #0]
 800be10:	f003 0308 	and.w	r3, r3, #8
 800be14:	2b00      	cmp	r3, #0
 800be16:	d10a      	bne.n	800be2e <dir_find+0x86>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	6a18      	ldr	r0, [r3, #32]
 800be1c:	687b      	ldr	r3, [r7, #4]
 800be1e:	3324      	adds	r3, #36	; 0x24
 800be20:	220b      	movs	r2, #11
 800be22:	4619      	mov	r1, r3
 800be24:	f7ff f88a 	bl	800af3c <mem_cmp>
 800be28:	4603      	mov	r3, r0
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	d00b      	beq.n	800be46 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800be2e:	2100      	movs	r1, #0
 800be30:	6878      	ldr	r0, [r7, #4]
 800be32:	f7ff fe6e 	bl	800bb12 <dir_next>
 800be36:	4603      	mov	r3, r0
 800be38:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800be3a:	7dfb      	ldrb	r3, [r7, #23]
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d0c5      	beq.n	800bdcc <dir_find+0x24>
 800be40:	e002      	b.n	800be48 <dir_find+0xa0>
		if (res != FR_OK) break;
 800be42:	bf00      	nop
 800be44:	e000      	b.n	800be48 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 800be46:	bf00      	nop

	return res;
 800be48:	7dfb      	ldrb	r3, [r7, #23]
}
 800be4a:	4618      	mov	r0, r3
 800be4c:	3718      	adds	r7, #24
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b084      	sub	sp, #16
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	681b      	ldr	r3, [r3, #0]
 800be5e:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800be60:	2101      	movs	r1, #1
 800be62:	6878      	ldr	r0, [r7, #4]
 800be64:	f7ff ff1a 	bl	800bc9c <dir_alloc>
 800be68:	4603      	mov	r3, r0
 800be6a:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800be6c:	7bfb      	ldrb	r3, [r7, #15]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d11c      	bne.n	800beac <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	69db      	ldr	r3, [r3, #28]
 800be76:	4619      	mov	r1, r3
 800be78:	68b8      	ldr	r0, [r7, #8]
 800be7a:	f7ff fa51 	bl	800b320 <move_window>
 800be7e:	4603      	mov	r3, r0
 800be80:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800be82:	7bfb      	ldrb	r3, [r7, #15]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d111      	bne.n	800beac <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800be88:	687b      	ldr	r3, [r7, #4]
 800be8a:	6a1b      	ldr	r3, [r3, #32]
 800be8c:	2220      	movs	r2, #32
 800be8e:	2100      	movs	r1, #0
 800be90:	4618      	mov	r0, r3
 800be92:	f7ff f838 	bl	800af06 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6a18      	ldr	r0, [r3, #32]
 800be9a:	687b      	ldr	r3, [r7, #4]
 800be9c:	3324      	adds	r3, #36	; 0x24
 800be9e:	220b      	movs	r2, #11
 800bea0:	4619      	mov	r1, r3
 800bea2:	f7ff f80f 	bl	800aec4 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 800bea6:	68bb      	ldr	r3, [r7, #8]
 800bea8:	2201      	movs	r2, #1
 800beaa:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800beac:	7bfb      	ldrb	r3, [r7, #15]
}
 800beae:	4618      	mov	r0, r3
 800beb0:	3710      	adds	r7, #16
 800beb2:	46bd      	mov	sp, r7
 800beb4:	bd80      	pop	{r7, pc}
	...

0800beb8 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b088      	sub	sp, #32
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
 800bec0:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 800bec2:	683b      	ldr	r3, [r7, #0]
 800bec4:	681b      	ldr	r3, [r3, #0]
 800bec6:	60fb      	str	r3, [r7, #12]
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	3324      	adds	r3, #36	; 0x24
 800becc:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 800bece:	220b      	movs	r2, #11
 800bed0:	2120      	movs	r1, #32
 800bed2:	68b8      	ldr	r0, [r7, #8]
 800bed4:	f7ff f817 	bl	800af06 <mem_set>
	si = i = 0; ni = 8;
 800bed8:	2300      	movs	r3, #0
 800beda:	613b      	str	r3, [r7, #16]
 800bedc:	693b      	ldr	r3, [r7, #16]
 800bede:	61fb      	str	r3, [r7, #28]
 800bee0:	2308      	movs	r3, #8
 800bee2:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 800bee4:	69fb      	ldr	r3, [r7, #28]
 800bee6:	1c5a      	adds	r2, r3, #1
 800bee8:	61fa      	str	r2, [r7, #28]
 800beea:	68fa      	ldr	r2, [r7, #12]
 800beec:	4413      	add	r3, r2
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bef2:	7efb      	ldrb	r3, [r7, #27]
 800bef4:	2b20      	cmp	r3, #32
 800bef6:	d94e      	bls.n	800bf96 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 800bef8:	7efb      	ldrb	r3, [r7, #27]
 800befa:	2b2f      	cmp	r3, #47	; 0x2f
 800befc:	d006      	beq.n	800bf0c <create_name+0x54>
 800befe:	7efb      	ldrb	r3, [r7, #27]
 800bf00:	2b5c      	cmp	r3, #92	; 0x5c
 800bf02:	d110      	bne.n	800bf26 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800bf04:	e002      	b.n	800bf0c <create_name+0x54>
 800bf06:	69fb      	ldr	r3, [r7, #28]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	61fb      	str	r3, [r7, #28]
 800bf0c:	68fa      	ldr	r2, [r7, #12]
 800bf0e:	69fb      	ldr	r3, [r7, #28]
 800bf10:	4413      	add	r3, r2
 800bf12:	781b      	ldrb	r3, [r3, #0]
 800bf14:	2b2f      	cmp	r3, #47	; 0x2f
 800bf16:	d0f6      	beq.n	800bf06 <create_name+0x4e>
 800bf18:	68fa      	ldr	r2, [r7, #12]
 800bf1a:	69fb      	ldr	r3, [r7, #28]
 800bf1c:	4413      	add	r3, r2
 800bf1e:	781b      	ldrb	r3, [r3, #0]
 800bf20:	2b5c      	cmp	r3, #92	; 0x5c
 800bf22:	d0f0      	beq.n	800bf06 <create_name+0x4e>
			break;
 800bf24:	e038      	b.n	800bf98 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 800bf26:	7efb      	ldrb	r3, [r7, #27]
 800bf28:	2b2e      	cmp	r3, #46	; 0x2e
 800bf2a:	d003      	beq.n	800bf34 <create_name+0x7c>
 800bf2c:	693a      	ldr	r2, [r7, #16]
 800bf2e:	697b      	ldr	r3, [r7, #20]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d30c      	bcc.n	800bf4e <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 800bf34:	697b      	ldr	r3, [r7, #20]
 800bf36:	2b0b      	cmp	r3, #11
 800bf38:	d002      	beq.n	800bf40 <create_name+0x88>
 800bf3a:	7efb      	ldrb	r3, [r7, #27]
 800bf3c:	2b2e      	cmp	r3, #46	; 0x2e
 800bf3e:	d001      	beq.n	800bf44 <create_name+0x8c>
 800bf40:	2306      	movs	r3, #6
 800bf42:	e044      	b.n	800bfce <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 800bf44:	2308      	movs	r3, #8
 800bf46:	613b      	str	r3, [r7, #16]
 800bf48:	230b      	movs	r3, #11
 800bf4a:	617b      	str	r3, [r7, #20]
			continue;
 800bf4c:	e022      	b.n	800bf94 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800bf4e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800bf52:	2b00      	cmp	r3, #0
 800bf54:	da04      	bge.n	800bf60 <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 800bf56:	7efb      	ldrb	r3, [r7, #27]
 800bf58:	3b80      	subs	r3, #128	; 0x80
 800bf5a:	4a1f      	ldr	r2, [pc, #124]	; (800bfd8 <create_name+0x120>)
 800bf5c:	5cd3      	ldrb	r3, [r2, r3]
 800bf5e:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800bf60:	7efb      	ldrb	r3, [r7, #27]
 800bf62:	4619      	mov	r1, r3
 800bf64:	481d      	ldr	r0, [pc, #116]	; (800bfdc <create_name+0x124>)
 800bf66:	f7ff f810 	bl	800af8a <chk_chr>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d001      	beq.n	800bf74 <create_name+0xbc>
 800bf70:	2306      	movs	r3, #6
 800bf72:	e02c      	b.n	800bfce <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 800bf74:	7efb      	ldrb	r3, [r7, #27]
 800bf76:	2b60      	cmp	r3, #96	; 0x60
 800bf78:	d905      	bls.n	800bf86 <create_name+0xce>
 800bf7a:	7efb      	ldrb	r3, [r7, #27]
 800bf7c:	2b7a      	cmp	r3, #122	; 0x7a
 800bf7e:	d802      	bhi.n	800bf86 <create_name+0xce>
 800bf80:	7efb      	ldrb	r3, [r7, #27]
 800bf82:	3b20      	subs	r3, #32
 800bf84:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 800bf86:	693b      	ldr	r3, [r7, #16]
 800bf88:	1c5a      	adds	r2, r3, #1
 800bf8a:	613a      	str	r2, [r7, #16]
 800bf8c:	68ba      	ldr	r2, [r7, #8]
 800bf8e:	4413      	add	r3, r2
 800bf90:	7efa      	ldrb	r2, [r7, #27]
 800bf92:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800bf94:	e7a6      	b.n	800bee4 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 800bf96:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 800bf98:	68fa      	ldr	r2, [r7, #12]
 800bf9a:	69fb      	ldr	r3, [r7, #28]
 800bf9c:	441a      	add	r2, r3
 800bf9e:	683b      	ldr	r3, [r7, #0]
 800bfa0:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800bfa2:	693b      	ldr	r3, [r7, #16]
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d101      	bne.n	800bfac <create_name+0xf4>
 800bfa8:	2306      	movs	r3, #6
 800bfaa:	e010      	b.n	800bfce <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800bfac:	68bb      	ldr	r3, [r7, #8]
 800bfae:	781b      	ldrb	r3, [r3, #0]
 800bfb0:	2be5      	cmp	r3, #229	; 0xe5
 800bfb2:	d102      	bne.n	800bfba <create_name+0x102>
 800bfb4:	68bb      	ldr	r3, [r7, #8]
 800bfb6:	2205      	movs	r2, #5
 800bfb8:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800bfba:	7efb      	ldrb	r3, [r7, #27]
 800bfbc:	2b20      	cmp	r3, #32
 800bfbe:	d801      	bhi.n	800bfc4 <create_name+0x10c>
 800bfc0:	2204      	movs	r2, #4
 800bfc2:	e000      	b.n	800bfc6 <create_name+0x10e>
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	68bb      	ldr	r3, [r7, #8]
 800bfc8:	330b      	adds	r3, #11
 800bfca:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 800bfcc:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	3720      	adds	r7, #32
 800bfd2:	46bd      	mov	sp, r7
 800bfd4:	bd80      	pop	{r7, pc}
 800bfd6:	bf00      	nop
 800bfd8:	0800dd90 	.word	0x0800dd90
 800bfdc:	0800dcb8 	.word	0x0800dcb8

0800bfe0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800bfe0:	b580      	push	{r7, lr}
 800bfe2:	b086      	sub	sp, #24
 800bfe4:	af00      	add	r7, sp, #0
 800bfe6:	6078      	str	r0, [r7, #4]
 800bfe8:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800bfee:	693b      	ldr	r3, [r7, #16]
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800bff4:	e002      	b.n	800bffc <follow_path+0x1c>
 800bff6:	683b      	ldr	r3, [r7, #0]
 800bff8:	3301      	adds	r3, #1
 800bffa:	603b      	str	r3, [r7, #0]
 800bffc:	683b      	ldr	r3, [r7, #0]
 800bffe:	781b      	ldrb	r3, [r3, #0]
 800c000:	2b2f      	cmp	r3, #47	; 0x2f
 800c002:	d0f8      	beq.n	800bff6 <follow_path+0x16>
 800c004:	683b      	ldr	r3, [r7, #0]
 800c006:	781b      	ldrb	r3, [r3, #0]
 800c008:	2b5c      	cmp	r3, #92	; 0x5c
 800c00a:	d0f4      	beq.n	800bff6 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800c00c:	693b      	ldr	r3, [r7, #16]
 800c00e:	2200      	movs	r2, #0
 800c010:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800c012:	683b      	ldr	r3, [r7, #0]
 800c014:	781b      	ldrb	r3, [r3, #0]
 800c016:	2b1f      	cmp	r3, #31
 800c018:	d80a      	bhi.n	800c030 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2280      	movs	r2, #128	; 0x80
 800c01e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800c022:	2100      	movs	r1, #0
 800c024:	6878      	ldr	r0, [r7, #4]
 800c026:	f7ff fcf9 	bl	800ba1c <dir_sdi>
 800c02a:	4603      	mov	r3, r0
 800c02c:	75fb      	strb	r3, [r7, #23]
 800c02e:	e043      	b.n	800c0b8 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c030:	463b      	mov	r3, r7
 800c032:	4619      	mov	r1, r3
 800c034:	6878      	ldr	r0, [r7, #4]
 800c036:	f7ff ff3f 	bl	800beb8 <create_name>
 800c03a:	4603      	mov	r3, r0
 800c03c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800c03e:	7dfb      	ldrb	r3, [r7, #23]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d134      	bne.n	800c0ae <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800c044:	6878      	ldr	r0, [r7, #4]
 800c046:	f7ff feaf 	bl	800bda8 <dir_find>
 800c04a:	4603      	mov	r3, r0
 800c04c:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800c054:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800c056:	7dfb      	ldrb	r3, [r7, #23]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d00a      	beq.n	800c072 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800c05c:	7dfb      	ldrb	r3, [r7, #23]
 800c05e:	2b04      	cmp	r3, #4
 800c060:	d127      	bne.n	800c0b2 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800c062:	7afb      	ldrb	r3, [r7, #11]
 800c064:	f003 0304 	and.w	r3, r3, #4
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d122      	bne.n	800c0b2 <follow_path+0xd2>
 800c06c:	2305      	movs	r3, #5
 800c06e:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800c070:	e01f      	b.n	800c0b2 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c072:	7afb      	ldrb	r3, [r7, #11]
 800c074:	f003 0304 	and.w	r3, r3, #4
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d11c      	bne.n	800c0b6 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800c07c:	693b      	ldr	r3, [r7, #16]
 800c07e:	799b      	ldrb	r3, [r3, #6]
 800c080:	f003 0310 	and.w	r3, r3, #16
 800c084:	2b00      	cmp	r3, #0
 800c086:	d102      	bne.n	800c08e <follow_path+0xae>
				res = FR_NO_PATH; break;
 800c088:	2305      	movs	r3, #5
 800c08a:	75fb      	strb	r3, [r7, #23]
 800c08c:	e014      	b.n	800c0b8 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	695b      	ldr	r3, [r3, #20]
 800c098:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c09c:	4413      	add	r3, r2
 800c09e:	4619      	mov	r1, r3
 800c0a0:	68f8      	ldr	r0, [r7, #12]
 800c0a2:	f7ff fe42 	bl	800bd2a <ld_clust>
 800c0a6:	4602      	mov	r2, r0
 800c0a8:	693b      	ldr	r3, [r7, #16]
 800c0aa:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800c0ac:	e7c0      	b.n	800c030 <follow_path+0x50>
			if (res != FR_OK) break;
 800c0ae:	bf00      	nop
 800c0b0:	e002      	b.n	800c0b8 <follow_path+0xd8>
				break;
 800c0b2:	bf00      	nop
 800c0b4:	e000      	b.n	800c0b8 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800c0b6:	bf00      	nop
			}
		}
	}

	return res;
 800c0b8:	7dfb      	ldrb	r3, [r7, #23]
}
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	3718      	adds	r7, #24
 800c0be:	46bd      	mov	sp, r7
 800c0c0:	bd80      	pop	{r7, pc}

0800c0c2 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800c0c2:	b480      	push	{r7}
 800c0c4:	b087      	sub	sp, #28
 800c0c6:	af00      	add	r7, sp, #0
 800c0c8:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800c0ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c0ce:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d031      	beq.n	800c13c <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	681b      	ldr	r3, [r3, #0]
 800c0dc:	617b      	str	r3, [r7, #20]
 800c0de:	e002      	b.n	800c0e6 <get_ldnumber+0x24>
 800c0e0:	697b      	ldr	r3, [r7, #20]
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	617b      	str	r3, [r7, #20]
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	781b      	ldrb	r3, [r3, #0]
 800c0ea:	2b20      	cmp	r3, #32
 800c0ec:	d903      	bls.n	800c0f6 <get_ldnumber+0x34>
 800c0ee:	697b      	ldr	r3, [r7, #20]
 800c0f0:	781b      	ldrb	r3, [r3, #0]
 800c0f2:	2b3a      	cmp	r3, #58	; 0x3a
 800c0f4:	d1f4      	bne.n	800c0e0 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800c0f6:	697b      	ldr	r3, [r7, #20]
 800c0f8:	781b      	ldrb	r3, [r3, #0]
 800c0fa:	2b3a      	cmp	r3, #58	; 0x3a
 800c0fc:	d11c      	bne.n	800c138 <get_ldnumber+0x76>
			tp = *path;
 800c0fe:	687b      	ldr	r3, [r7, #4]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	1c5a      	adds	r2, r3, #1
 800c108:	60fa      	str	r2, [r7, #12]
 800c10a:	781b      	ldrb	r3, [r3, #0]
 800c10c:	3b30      	subs	r3, #48	; 0x30
 800c10e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800c110:	68bb      	ldr	r3, [r7, #8]
 800c112:	2b09      	cmp	r3, #9
 800c114:	d80e      	bhi.n	800c134 <get_ldnumber+0x72>
 800c116:	68fa      	ldr	r2, [r7, #12]
 800c118:	697b      	ldr	r3, [r7, #20]
 800c11a:	429a      	cmp	r2, r3
 800c11c:	d10a      	bne.n	800c134 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800c11e:	68bb      	ldr	r3, [r7, #8]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d107      	bne.n	800c134 <get_ldnumber+0x72>
					vol = (int)i;
 800c124:	68bb      	ldr	r3, [r7, #8]
 800c126:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800c128:	697b      	ldr	r3, [r7, #20]
 800c12a:	3301      	adds	r3, #1
 800c12c:	617b      	str	r3, [r7, #20]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	697a      	ldr	r2, [r7, #20]
 800c132:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	e002      	b.n	800c13e <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800c138:	2300      	movs	r3, #0
 800c13a:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800c13c:	693b      	ldr	r3, [r7, #16]
}
 800c13e:	4618      	mov	r0, r3
 800c140:	371c      	adds	r7, #28
 800c142:	46bd      	mov	sp, r7
 800c144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c148:	4770      	bx	lr
	...

0800c14c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800c14c:	b580      	push	{r7, lr}
 800c14e:	b082      	sub	sp, #8
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800c156:	687b      	ldr	r3, [r7, #4]
 800c158:	2200      	movs	r2, #0
 800c15a:	70da      	strb	r2, [r3, #3]
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c162:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800c164:	6839      	ldr	r1, [r7, #0]
 800c166:	6878      	ldr	r0, [r7, #4]
 800c168:	f7ff f8da 	bl	800b320 <move_window>
 800c16c:	4603      	mov	r3, r0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d001      	beq.n	800c176 <check_fs+0x2a>
 800c172:	2304      	movs	r3, #4
 800c174:	e038      	b.n	800c1e8 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	3330      	adds	r3, #48	; 0x30
 800c17a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c17e:	4618      	mov	r0, r3
 800c180:	f7fe fe1e 	bl	800adc0 <ld_word>
 800c184:	4603      	mov	r3, r0
 800c186:	461a      	mov	r2, r3
 800c188:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c18c:	429a      	cmp	r2, r3
 800c18e:	d001      	beq.n	800c194 <check_fs+0x48>
 800c190:	2303      	movs	r3, #3
 800c192:	e029      	b.n	800c1e8 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c19a:	2be9      	cmp	r3, #233	; 0xe9
 800c19c:	d009      	beq.n	800c1b2 <check_fs+0x66>
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c1a4:	2beb      	cmp	r3, #235	; 0xeb
 800c1a6:	d11e      	bne.n	800c1e6 <check_fs+0x9a>
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800c1ae:	2b90      	cmp	r3, #144	; 0x90
 800c1b0:	d119      	bne.n	800c1e6 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	3330      	adds	r3, #48	; 0x30
 800c1b6:	3336      	adds	r3, #54	; 0x36
 800c1b8:	4618      	mov	r0, r3
 800c1ba:	f7fe fe19 	bl	800adf0 <ld_dword>
 800c1be:	4603      	mov	r3, r0
 800c1c0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c1c4:	4a0a      	ldr	r2, [pc, #40]	; (800c1f0 <check_fs+0xa4>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d101      	bne.n	800c1ce <check_fs+0x82>
 800c1ca:	2300      	movs	r3, #0
 800c1cc:	e00c      	b.n	800c1e8 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	3330      	adds	r3, #48	; 0x30
 800c1d2:	3352      	adds	r3, #82	; 0x52
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	f7fe fe0b 	bl	800adf0 <ld_dword>
 800c1da:	4603      	mov	r3, r0
 800c1dc:	4a05      	ldr	r2, [pc, #20]	; (800c1f4 <check_fs+0xa8>)
 800c1de:	4293      	cmp	r3, r2
 800c1e0:	d101      	bne.n	800c1e6 <check_fs+0x9a>
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	e000      	b.n	800c1e8 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 800c1e6:	2302      	movs	r3, #2
}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3708      	adds	r7, #8
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	bd80      	pop	{r7, pc}
 800c1f0:	00544146 	.word	0x00544146
 800c1f4:	33544146 	.word	0x33544146

0800c1f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b096      	sub	sp, #88	; 0x58
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	60f8      	str	r0, [r7, #12]
 800c200:	60b9      	str	r1, [r7, #8]
 800c202:	4613      	mov	r3, r2
 800c204:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	2200      	movs	r2, #0
 800c20a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800c20c:	68f8      	ldr	r0, [r7, #12]
 800c20e:	f7ff ff58 	bl	800c0c2 <get_ldnumber>
 800c212:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 800c214:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c216:	2b00      	cmp	r3, #0
 800c218:	da01      	bge.n	800c21e <find_volume+0x26>
 800c21a:	230b      	movs	r3, #11
 800c21c:	e22d      	b.n	800c67a <find_volume+0x482>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800c21e:	4aa1      	ldr	r2, [pc, #644]	; (800c4a4 <find_volume+0x2ac>)
 800c220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c222:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c226:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 800c228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d101      	bne.n	800c232 <find_volume+0x3a>
 800c22e:	230c      	movs	r3, #12
 800c230:	e223      	b.n	800c67a <find_volume+0x482>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c236:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 800c238:	79fb      	ldrb	r3, [r7, #7]
 800c23a:	f023 0301 	bic.w	r3, r3, #1
 800c23e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800c240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c242:	781b      	ldrb	r3, [r3, #0]
 800c244:	2b00      	cmp	r3, #0
 800c246:	d01a      	beq.n	800c27e <find_volume+0x86>
		stat = disk_status(fs->drv);
 800c248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c24a:	785b      	ldrb	r3, [r3, #1]
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7fe fd19 	bl	800ac84 <disk_status>
 800c252:	4603      	mov	r3, r0
 800c254:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 800c258:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c25c:	f003 0301 	and.w	r3, r3, #1
 800c260:	2b00      	cmp	r3, #0
 800c262:	d10c      	bne.n	800c27e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 800c264:	79fb      	ldrb	r3, [r7, #7]
 800c266:	2b00      	cmp	r3, #0
 800c268:	d007      	beq.n	800c27a <find_volume+0x82>
 800c26a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c26e:	f003 0304 	and.w	r3, r3, #4
 800c272:	2b00      	cmp	r3, #0
 800c274:	d001      	beq.n	800c27a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 800c276:	230a      	movs	r3, #10
 800c278:	e1ff      	b.n	800c67a <find_volume+0x482>
			}
			return FR_OK;				/* The file system object is valid */
 800c27a:	2300      	movs	r3, #0
 800c27c:	e1fd      	b.n	800c67a <find_volume+0x482>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800c27e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c280:	2200      	movs	r2, #0
 800c282:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 800c284:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c286:	b2da      	uxtb	r2, r3
 800c288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 800c28c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c28e:	785b      	ldrb	r3, [r3, #1]
 800c290:	4618      	mov	r0, r3
 800c292:	f7fe fd11 	bl	800acb8 <disk_initialize>
 800c296:	4603      	mov	r3, r0
 800c298:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800c29c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c2a0:	f003 0301 	and.w	r3, r3, #1
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d001      	beq.n	800c2ac <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 800c2a8:	2303      	movs	r3, #3
 800c2aa:	e1e6      	b.n	800c67a <find_volume+0x482>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800c2ac:	79fb      	ldrb	r3, [r7, #7]
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d007      	beq.n	800c2c2 <find_volume+0xca>
 800c2b2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800c2b6:	f003 0304 	and.w	r3, r3, #4
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d001      	beq.n	800c2c2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800c2be:	230a      	movs	r3, #10
 800c2c0:	e1db      	b.n	800c67a <find_volume+0x482>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 800c2c6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c2c8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c2ca:	f7ff ff3f 	bl	800c14c <check_fs>
 800c2ce:	4603      	mov	r3, r0
 800c2d0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 800c2d4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c2d8:	2b02      	cmp	r3, #2
 800c2da:	d149      	bne.n	800c370 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c2dc:	2300      	movs	r3, #0
 800c2de:	643b      	str	r3, [r7, #64]	; 0x40
 800c2e0:	e01e      	b.n	800c320 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 800c2e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800c2e8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c2ea:	011b      	lsls	r3, r3, #4
 800c2ec:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 800c2f0:	4413      	add	r3, r2
 800c2f2:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 800c2f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2f6:	3304      	adds	r3, #4
 800c2f8:	781b      	ldrb	r3, [r3, #0]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d006      	beq.n	800c30c <find_volume+0x114>
 800c2fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c300:	3308      	adds	r3, #8
 800c302:	4618      	mov	r0, r3
 800c304:	f7fe fd74 	bl	800adf0 <ld_dword>
 800c308:	4602      	mov	r2, r0
 800c30a:	e000      	b.n	800c30e <find_volume+0x116>
 800c30c:	2200      	movs	r2, #0
 800c30e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c310:	009b      	lsls	r3, r3, #2
 800c312:	3358      	adds	r3, #88	; 0x58
 800c314:	443b      	add	r3, r7
 800c316:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800c31a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c31c:	3301      	adds	r3, #1
 800c31e:	643b      	str	r3, [r7, #64]	; 0x40
 800c320:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c322:	2b03      	cmp	r3, #3
 800c324:	d9dd      	bls.n	800c2e2 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 800c326:	2300      	movs	r3, #0
 800c328:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800c32a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d002      	beq.n	800c336 <find_volume+0x13e>
 800c330:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c332:	3b01      	subs	r3, #1
 800c334:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 800c336:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c338:	009b      	lsls	r3, r3, #2
 800c33a:	3358      	adds	r3, #88	; 0x58
 800c33c:	443b      	add	r3, r7
 800c33e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 800c342:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 800c344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c346:	2b00      	cmp	r3, #0
 800c348:	d005      	beq.n	800c356 <find_volume+0x15e>
 800c34a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c34c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c34e:	f7ff fefd 	bl	800c14c <check_fs>
 800c352:	4603      	mov	r3, r0
 800c354:	e000      	b.n	800c358 <find_volume+0x160>
 800c356:	2303      	movs	r3, #3
 800c358:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 800c35c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c360:	2b01      	cmp	r3, #1
 800c362:	d905      	bls.n	800c370 <find_volume+0x178>
 800c364:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c366:	3301      	adds	r3, #1
 800c368:	643b      	str	r3, [r7, #64]	; 0x40
 800c36a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c36c:	2b03      	cmp	r3, #3
 800c36e:	d9e2      	bls.n	800c336 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 800c370:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c374:	2b04      	cmp	r3, #4
 800c376:	d101      	bne.n	800c37c <find_volume+0x184>
 800c378:	2301      	movs	r3, #1
 800c37a:	e17e      	b.n	800c67a <find_volume+0x482>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 800c37c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c380:	2b01      	cmp	r3, #1
 800c382:	d901      	bls.n	800c388 <find_volume+0x190>
 800c384:	230d      	movs	r3, #13
 800c386:	e178      	b.n	800c67a <find_volume+0x482>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 800c388:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c38a:	3330      	adds	r3, #48	; 0x30
 800c38c:	330b      	adds	r3, #11
 800c38e:	4618      	mov	r0, r3
 800c390:	f7fe fd16 	bl	800adc0 <ld_word>
 800c394:	4603      	mov	r3, r0
 800c396:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c39a:	d001      	beq.n	800c3a0 <find_volume+0x1a8>
 800c39c:	230d      	movs	r3, #13
 800c39e:	e16c      	b.n	800c67a <find_volume+0x482>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 800c3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3a2:	3330      	adds	r3, #48	; 0x30
 800c3a4:	3316      	adds	r3, #22
 800c3a6:	4618      	mov	r0, r3
 800c3a8:	f7fe fd0a 	bl	800adc0 <ld_word>
 800c3ac:	4603      	mov	r3, r0
 800c3ae:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 800c3b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3b2:	2b00      	cmp	r3, #0
 800c3b4:	d106      	bne.n	800c3c4 <find_volume+0x1cc>
 800c3b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3b8:	3330      	adds	r3, #48	; 0x30
 800c3ba:	3324      	adds	r3, #36	; 0x24
 800c3bc:	4618      	mov	r0, r3
 800c3be:	f7fe fd17 	bl	800adf0 <ld_dword>
 800c3c2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 800c3c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c3c8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800c3ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3cc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 800c3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 800c3d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3d6:	789b      	ldrb	r3, [r3, #2]
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d005      	beq.n	800c3e8 <find_volume+0x1f0>
 800c3dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3de:	789b      	ldrb	r3, [r3, #2]
 800c3e0:	2b02      	cmp	r3, #2
 800c3e2:	d001      	beq.n	800c3e8 <find_volume+0x1f0>
 800c3e4:	230d      	movs	r3, #13
 800c3e6:	e148      	b.n	800c67a <find_volume+0x482>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800c3e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3ea:	789b      	ldrb	r3, [r3, #2]
 800c3ec:	461a      	mov	r2, r3
 800c3ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c3f0:	fb02 f303 	mul.w	r3, r2, r3
 800c3f4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800c3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c3fc:	b29a      	uxth	r2, r3
 800c3fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c400:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 800c402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c404:	895b      	ldrh	r3, [r3, #10]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d008      	beq.n	800c41c <find_volume+0x224>
 800c40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c40c:	895b      	ldrh	r3, [r3, #10]
 800c40e:	461a      	mov	r2, r3
 800c410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c412:	895b      	ldrh	r3, [r3, #10]
 800c414:	3b01      	subs	r3, #1
 800c416:	4013      	ands	r3, r2
 800c418:	2b00      	cmp	r3, #0
 800c41a:	d001      	beq.n	800c420 <find_volume+0x228>
 800c41c:	230d      	movs	r3, #13
 800c41e:	e12c      	b.n	800c67a <find_volume+0x482>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 800c420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c422:	3330      	adds	r3, #48	; 0x30
 800c424:	3311      	adds	r3, #17
 800c426:	4618      	mov	r0, r3
 800c428:	f7fe fcca 	bl	800adc0 <ld_word>
 800c42c:	4603      	mov	r3, r0
 800c42e:	461a      	mov	r2, r3
 800c430:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c432:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 800c434:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c436:	891b      	ldrh	r3, [r3, #8]
 800c438:	f003 030f 	and.w	r3, r3, #15
 800c43c:	b29b      	uxth	r3, r3
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d001      	beq.n	800c446 <find_volume+0x24e>
 800c442:	230d      	movs	r3, #13
 800c444:	e119      	b.n	800c67a <find_volume+0x482>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 800c446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c448:	3330      	adds	r3, #48	; 0x30
 800c44a:	3313      	adds	r3, #19
 800c44c:	4618      	mov	r0, r3
 800c44e:	f7fe fcb7 	bl	800adc0 <ld_word>
 800c452:	4603      	mov	r3, r0
 800c454:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 800c456:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c458:	2b00      	cmp	r3, #0
 800c45a:	d106      	bne.n	800c46a <find_volume+0x272>
 800c45c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c45e:	3330      	adds	r3, #48	; 0x30
 800c460:	3320      	adds	r3, #32
 800c462:	4618      	mov	r0, r3
 800c464:	f7fe fcc4 	bl	800adf0 <ld_dword>
 800c468:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 800c46a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c46c:	3330      	adds	r3, #48	; 0x30
 800c46e:	330e      	adds	r3, #14
 800c470:	4618      	mov	r0, r3
 800c472:	f7fe fca5 	bl	800adc0 <ld_word>
 800c476:	4603      	mov	r3, r0
 800c478:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 800c47a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d101      	bne.n	800c484 <find_volume+0x28c>
 800c480:	230d      	movs	r3, #13
 800c482:	e0fa      	b.n	800c67a <find_volume+0x482>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 800c484:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c486:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c488:	4413      	add	r3, r2
 800c48a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c48c:	8912      	ldrh	r2, [r2, #8]
 800c48e:	0912      	lsrs	r2, r2, #4
 800c490:	b292      	uxth	r2, r2
 800c492:	4413      	add	r3, r2
 800c494:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800c496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d204      	bcs.n	800c4a8 <find_volume+0x2b0>
 800c49e:	230d      	movs	r3, #13
 800c4a0:	e0eb      	b.n	800c67a <find_volume+0x482>
 800c4a2:	bf00      	nop
 800c4a4:	20001670 	.word	0x20001670
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 800c4a8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ac:	1ad3      	subs	r3, r2, r3
 800c4ae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c4b0:	8952      	ldrh	r2, [r2, #10]
 800c4b2:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4b6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 800c4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d101      	bne.n	800c4c2 <find_volume+0x2ca>
 800c4be:	230d      	movs	r3, #13
 800c4c0:	e0db      	b.n	800c67a <find_volume+0x482>
		fmt = FS_FAT32;
 800c4c2:	2303      	movs	r3, #3
 800c4c4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800c4c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ca:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 800c4ce:	4293      	cmp	r3, r2
 800c4d0:	d802      	bhi.n	800c4d8 <find_volume+0x2e0>
 800c4d2:	2302      	movs	r3, #2
 800c4d4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800c4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4da:	f640 72f5 	movw	r2, #4085	; 0xff5
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d802      	bhi.n	800c4e8 <find_volume+0x2f0>
 800c4e2:	2301      	movs	r3, #1
 800c4e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4ea:	1c9a      	adds	r2, r3, #2
 800c4ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4ee:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 800c4f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c4f4:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 800c4f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800c4f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c4fa:	441a      	add	r2, r3
 800c4fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c4fe:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 800c500:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c504:	441a      	add	r2, r3
 800c506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c508:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 800c50a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c50e:	2b03      	cmp	r3, #3
 800c510:	d11e      	bne.n	800c550 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 800c512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c514:	3330      	adds	r3, #48	; 0x30
 800c516:	332a      	adds	r3, #42	; 0x2a
 800c518:	4618      	mov	r0, r3
 800c51a:	f7fe fc51 	bl	800adc0 <ld_word>
 800c51e:	4603      	mov	r3, r0
 800c520:	2b00      	cmp	r3, #0
 800c522:	d001      	beq.n	800c528 <find_volume+0x330>
 800c524:	230d      	movs	r3, #13
 800c526:	e0a8      	b.n	800c67a <find_volume+0x482>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800c528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c52a:	891b      	ldrh	r3, [r3, #8]
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d001      	beq.n	800c534 <find_volume+0x33c>
 800c530:	230d      	movs	r3, #13
 800c532:	e0a2      	b.n	800c67a <find_volume+0x482>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 800c534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c536:	3330      	adds	r3, #48	; 0x30
 800c538:	332c      	adds	r3, #44	; 0x2c
 800c53a:	4618      	mov	r0, r3
 800c53c:	f7fe fc58 	bl	800adf0 <ld_dword>
 800c540:	4602      	mov	r2, r0
 800c542:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c544:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 800c546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c548:	695b      	ldr	r3, [r3, #20]
 800c54a:	009b      	lsls	r3, r3, #2
 800c54c:	647b      	str	r3, [r7, #68]	; 0x44
 800c54e:	e01f      	b.n	800c590 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 800c550:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c552:	891b      	ldrh	r3, [r3, #8]
 800c554:	2b00      	cmp	r3, #0
 800c556:	d101      	bne.n	800c55c <find_volume+0x364>
 800c558:	230d      	movs	r3, #13
 800c55a:	e08e      	b.n	800c67a <find_volume+0x482>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 800c55c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c55e:	6a1a      	ldr	r2, [r3, #32]
 800c560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c562:	441a      	add	r2, r3
 800c564:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c566:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 800c568:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c56c:	2b02      	cmp	r3, #2
 800c56e:	d103      	bne.n	800c578 <find_volume+0x380>
 800c570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c572:	695b      	ldr	r3, [r3, #20]
 800c574:	005b      	lsls	r3, r3, #1
 800c576:	e00a      	b.n	800c58e <find_volume+0x396>
 800c578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c57a:	695a      	ldr	r2, [r3, #20]
 800c57c:	4613      	mov	r3, r2
 800c57e:	005b      	lsls	r3, r3, #1
 800c580:	4413      	add	r3, r2
 800c582:	085a      	lsrs	r2, r3, #1
 800c584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c586:	695b      	ldr	r3, [r3, #20]
 800c588:	f003 0301 	and.w	r3, r3, #1
 800c58c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 800c58e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 800c590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c592:	699a      	ldr	r2, [r3, #24]
 800c594:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c596:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800c59a:	0a5b      	lsrs	r3, r3, #9
 800c59c:	429a      	cmp	r2, r3
 800c59e:	d201      	bcs.n	800c5a4 <find_volume+0x3ac>
 800c5a0:	230d      	movs	r3, #13
 800c5a2:	e06a      	b.n	800c67a <find_volume+0x482>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 800c5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c5aa:	611a      	str	r2, [r3, #16]
 800c5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ae:	691a      	ldr	r2, [r3, #16]
 800c5b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b2:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 800c5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5b6:	2280      	movs	r2, #128	; 0x80
 800c5b8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800c5ba:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800c5be:	2b03      	cmp	r3, #3
 800c5c0:	d149      	bne.n	800c656 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 800c5c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5c4:	3330      	adds	r3, #48	; 0x30
 800c5c6:	3330      	adds	r3, #48	; 0x30
 800c5c8:	4618      	mov	r0, r3
 800c5ca:	f7fe fbf9 	bl	800adc0 <ld_word>
 800c5ce:	4603      	mov	r3, r0
 800c5d0:	2b01      	cmp	r3, #1
 800c5d2:	d140      	bne.n	800c656 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 800c5d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5d6:	3301      	adds	r3, #1
 800c5d8:	4619      	mov	r1, r3
 800c5da:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c5dc:	f7fe fea0 	bl	800b320 <move_window>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d137      	bne.n	800c656 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 800c5e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5e8:	2200      	movs	r2, #0
 800c5ea:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800c5ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c5ee:	3330      	adds	r3, #48	; 0x30
 800c5f0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800c5f4:	4618      	mov	r0, r3
 800c5f6:	f7fe fbe3 	bl	800adc0 <ld_word>
 800c5fa:	4603      	mov	r3, r0
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800c602:	429a      	cmp	r2, r3
 800c604:	d127      	bne.n	800c656 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 800c606:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c608:	3330      	adds	r3, #48	; 0x30
 800c60a:	4618      	mov	r0, r3
 800c60c:	f7fe fbf0 	bl	800adf0 <ld_dword>
 800c610:	4603      	mov	r3, r0
 800c612:	4a1c      	ldr	r2, [pc, #112]	; (800c684 <find_volume+0x48c>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d11e      	bne.n	800c656 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800c618:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c61a:	3330      	adds	r3, #48	; 0x30
 800c61c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800c620:	4618      	mov	r0, r3
 800c622:	f7fe fbe5 	bl	800adf0 <ld_dword>
 800c626:	4603      	mov	r3, r0
 800c628:	4a17      	ldr	r2, [pc, #92]	; (800c688 <find_volume+0x490>)
 800c62a:	4293      	cmp	r3, r2
 800c62c:	d113      	bne.n	800c656 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 800c62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c630:	3330      	adds	r3, #48	; 0x30
 800c632:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 800c636:	4618      	mov	r0, r3
 800c638:	f7fe fbda 	bl	800adf0 <ld_dword>
 800c63c:	4602      	mov	r2, r0
 800c63e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c640:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 800c642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c644:	3330      	adds	r3, #48	; 0x30
 800c646:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 800c64a:	4618      	mov	r0, r3
 800c64c:	f7fe fbd0 	bl	800adf0 <ld_dword>
 800c650:	4602      	mov	r2, r0
 800c652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c654:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 800c656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c658:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 800c65c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 800c65e:	4b0b      	ldr	r3, [pc, #44]	; (800c68c <find_volume+0x494>)
 800c660:	881b      	ldrh	r3, [r3, #0]
 800c662:	3301      	adds	r3, #1
 800c664:	b29a      	uxth	r2, r3
 800c666:	4b09      	ldr	r3, [pc, #36]	; (800c68c <find_volume+0x494>)
 800c668:	801a      	strh	r2, [r3, #0]
 800c66a:	4b08      	ldr	r3, [pc, #32]	; (800c68c <find_volume+0x494>)
 800c66c:	881a      	ldrh	r2, [r3, #0]
 800c66e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c670:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 800c672:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800c674:	f7fe fdec 	bl	800b250 <clear_lock>
#endif
	return FR_OK;
 800c678:	2300      	movs	r3, #0
}
 800c67a:	4618      	mov	r0, r3
 800c67c:	3758      	adds	r7, #88	; 0x58
 800c67e:	46bd      	mov	sp, r7
 800c680:	bd80      	pop	{r7, pc}
 800c682:	bf00      	nop
 800c684:	41615252 	.word	0x41615252
 800c688:	61417272 	.word	0x61417272
 800c68c:	20001674 	.word	0x20001674

0800c690 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b084      	sub	sp, #16
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 800c69a:	2309      	movs	r3, #9
 800c69c:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d01c      	beq.n	800c6de <validate+0x4e>
 800c6a4:	687b      	ldr	r3, [r7, #4]
 800c6a6:	681b      	ldr	r3, [r3, #0]
 800c6a8:	2b00      	cmp	r3, #0
 800c6aa:	d018      	beq.n	800c6de <validate+0x4e>
 800c6ac:	687b      	ldr	r3, [r7, #4]
 800c6ae:	681b      	ldr	r3, [r3, #0]
 800c6b0:	781b      	ldrb	r3, [r3, #0]
 800c6b2:	2b00      	cmp	r3, #0
 800c6b4:	d013      	beq.n	800c6de <validate+0x4e>
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	889a      	ldrh	r2, [r3, #4]
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	88db      	ldrh	r3, [r3, #6]
 800c6c0:	429a      	cmp	r2, r3
 800c6c2:	d10c      	bne.n	800c6de <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	785b      	ldrb	r3, [r3, #1]
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7fe fada 	bl	800ac84 <disk_status>
 800c6d0:	4603      	mov	r3, r0
 800c6d2:	f003 0301 	and.w	r3, r3, #1
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d101      	bne.n	800c6de <validate+0x4e>
			res = FR_OK;
 800c6da:	2300      	movs	r3, #0
 800c6dc:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800c6de:	7bfb      	ldrb	r3, [r7, #15]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d102      	bne.n	800c6ea <validate+0x5a>
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	681b      	ldr	r3, [r3, #0]
 800c6e8:	e000      	b.n	800c6ec <validate+0x5c>
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	683a      	ldr	r2, [r7, #0]
 800c6ee:	6013      	str	r3, [r2, #0]
	return res;
 800c6f0:	7bfb      	ldrb	r3, [r7, #15]
}
 800c6f2:	4618      	mov	r0, r3
 800c6f4:	3710      	adds	r7, #16
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	bd80      	pop	{r7, pc}
	...

0800c6fc <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800c6fc:	b580      	push	{r7, lr}
 800c6fe:	b088      	sub	sp, #32
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	60b9      	str	r1, [r7, #8]
 800c706:	4613      	mov	r3, r2
 800c708:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800c70a:	68bb      	ldr	r3, [r7, #8]
 800c70c:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800c70e:	f107 0310 	add.w	r3, r7, #16
 800c712:	4618      	mov	r0, r3
 800c714:	f7ff fcd5 	bl	800c0c2 <get_ldnumber>
 800c718:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800c71a:	69fb      	ldr	r3, [r7, #28]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	da01      	bge.n	800c724 <f_mount+0x28>
 800c720:	230b      	movs	r3, #11
 800c722:	e02b      	b.n	800c77c <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 800c724:	4a17      	ldr	r2, [pc, #92]	; (800c784 <f_mount+0x88>)
 800c726:	69fb      	ldr	r3, [r7, #28]
 800c728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c72c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800c72e:	69bb      	ldr	r3, [r7, #24]
 800c730:	2b00      	cmp	r3, #0
 800c732:	d005      	beq.n	800c740 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 800c734:	69b8      	ldr	r0, [r7, #24]
 800c736:	f7fe fd8b 	bl	800b250 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800c73a:	69bb      	ldr	r3, [r7, #24]
 800c73c:	2200      	movs	r2, #0
 800c73e:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 800c740:	68fb      	ldr	r3, [r7, #12]
 800c742:	2b00      	cmp	r3, #0
 800c744:	d002      	beq.n	800c74c <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	2200      	movs	r2, #0
 800c74a:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 800c74c:	68fa      	ldr	r2, [r7, #12]
 800c74e:	490d      	ldr	r1, [pc, #52]	; (800c784 <f_mount+0x88>)
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800c756:	68fb      	ldr	r3, [r7, #12]
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d002      	beq.n	800c762 <f_mount+0x66>
 800c75c:	79fb      	ldrb	r3, [r7, #7]
 800c75e:	2b01      	cmp	r3, #1
 800c760:	d001      	beq.n	800c766 <f_mount+0x6a>
 800c762:	2300      	movs	r3, #0
 800c764:	e00a      	b.n	800c77c <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 800c766:	f107 010c 	add.w	r1, r7, #12
 800c76a:	f107 0308 	add.w	r3, r7, #8
 800c76e:	2200      	movs	r2, #0
 800c770:	4618      	mov	r0, r3
 800c772:	f7ff fd41 	bl	800c1f8 <find_volume>
 800c776:	4603      	mov	r3, r0
 800c778:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 800c77a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c77c:	4618      	mov	r0, r3
 800c77e:	3720      	adds	r7, #32
 800c780:	46bd      	mov	sp, r7
 800c782:	bd80      	pop	{r7, pc}
 800c784:	20001670 	.word	0x20001670

0800c788 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b098      	sub	sp, #96	; 0x60
 800c78c:	af00      	add	r7, sp, #0
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	60b9      	str	r1, [r7, #8]
 800c792:	4613      	mov	r3, r2
 800c794:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 800c796:	68fb      	ldr	r3, [r7, #12]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d101      	bne.n	800c7a0 <f_open+0x18>
 800c79c:	2309      	movs	r3, #9
 800c79e:	e1ad      	b.n	800cafc <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 800c7a0:	79fb      	ldrb	r3, [r7, #7]
 800c7a2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c7a6:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 800c7a8:	79fa      	ldrb	r2, [r7, #7]
 800c7aa:	f107 0110 	add.w	r1, r7, #16
 800c7ae:	f107 0308 	add.w	r3, r7, #8
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	f7ff fd20 	bl	800c1f8 <find_volume>
 800c7b8:	4603      	mov	r3, r0
 800c7ba:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 800c7be:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7c2:	2b00      	cmp	r3, #0
 800c7c4:	f040 8191 	bne.w	800caea <f_open+0x362>
		dj.obj.fs = fs;
 800c7c8:	693b      	ldr	r3, [r7, #16]
 800c7ca:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 800c7cc:	68ba      	ldr	r2, [r7, #8]
 800c7ce:	f107 0314 	add.w	r3, r7, #20
 800c7d2:	4611      	mov	r1, r2
 800c7d4:	4618      	mov	r0, r3
 800c7d6:	f7ff fc03 	bl	800bfe0 <follow_path>
 800c7da:	4603      	mov	r3, r0
 800c7dc:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800c7e0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d11a      	bne.n	800c81e <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 800c7e8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800c7ec:	b25b      	sxtb	r3, r3
 800c7ee:	2b00      	cmp	r3, #0
 800c7f0:	da03      	bge.n	800c7fa <f_open+0x72>
				res = FR_INVALID_NAME;
 800c7f2:	2306      	movs	r3, #6
 800c7f4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c7f8:	e011      	b.n	800c81e <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c7fa:	79fb      	ldrb	r3, [r7, #7]
 800c7fc:	f023 0301 	bic.w	r3, r3, #1
 800c800:	2b00      	cmp	r3, #0
 800c802:	bf14      	ite	ne
 800c804:	2301      	movne	r3, #1
 800c806:	2300      	moveq	r3, #0
 800c808:	b2db      	uxtb	r3, r3
 800c80a:	461a      	mov	r2, r3
 800c80c:	f107 0314 	add.w	r3, r7, #20
 800c810:	4611      	mov	r1, r2
 800c812:	4618      	mov	r0, r3
 800c814:	f7fe fbd4 	bl	800afc0 <chk_lock>
 800c818:	4603      	mov	r3, r0
 800c81a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800c81e:	79fb      	ldrb	r3, [r7, #7]
 800c820:	f003 031c 	and.w	r3, r3, #28
 800c824:	2b00      	cmp	r3, #0
 800c826:	d07f      	beq.n	800c928 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 800c828:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c82c:	2b00      	cmp	r3, #0
 800c82e:	d017      	beq.n	800c860 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 800c830:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c834:	2b04      	cmp	r3, #4
 800c836:	d10e      	bne.n	800c856 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800c838:	f7fe fc1e 	bl	800b078 <enq_lock>
 800c83c:	4603      	mov	r3, r0
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d006      	beq.n	800c850 <f_open+0xc8>
 800c842:	f107 0314 	add.w	r3, r7, #20
 800c846:	4618      	mov	r0, r3
 800c848:	f7ff fb03 	bl	800be52 <dir_register>
 800c84c:	4603      	mov	r3, r0
 800c84e:	e000      	b.n	800c852 <f_open+0xca>
 800c850:	2312      	movs	r3, #18
 800c852:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800c856:	79fb      	ldrb	r3, [r7, #7]
 800c858:	f043 0308 	orr.w	r3, r3, #8
 800c85c:	71fb      	strb	r3, [r7, #7]
 800c85e:	e010      	b.n	800c882 <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 800c860:	7ebb      	ldrb	r3, [r7, #26]
 800c862:	f003 0311 	and.w	r3, r3, #17
 800c866:	2b00      	cmp	r3, #0
 800c868:	d003      	beq.n	800c872 <f_open+0xea>
					res = FR_DENIED;
 800c86a:	2307      	movs	r3, #7
 800c86c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c870:	e007      	b.n	800c882 <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 800c872:	79fb      	ldrb	r3, [r7, #7]
 800c874:	f003 0304 	and.w	r3, r3, #4
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d002      	beq.n	800c882 <f_open+0xfa>
 800c87c:	2308      	movs	r3, #8
 800c87e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800c882:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c886:	2b00      	cmp	r3, #0
 800c888:	d168      	bne.n	800c95c <f_open+0x1d4>
 800c88a:	79fb      	ldrb	r3, [r7, #7]
 800c88c:	f003 0308 	and.w	r3, r3, #8
 800c890:	2b00      	cmp	r3, #0
 800c892:	d063      	beq.n	800c95c <f_open+0x1d4>
				dw = GET_FATTIME();
 800c894:	f7fb f8e6 	bl	8007a64 <get_fattime>
 800c898:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 800c89a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c89c:	330e      	adds	r3, #14
 800c89e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c8a0:	4618      	mov	r0, r3
 800c8a2:	f7fe fae3 	bl	800ae6c <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 800c8a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a8:	3316      	adds	r3, #22
 800c8aa:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7fe fadd 	bl	800ae6c <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 800c8b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8b4:	330b      	adds	r3, #11
 800c8b6:	2220      	movs	r2, #32
 800c8b8:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c8be:	4611      	mov	r1, r2
 800c8c0:	4618      	mov	r0, r3
 800c8c2:	f7ff fa32 	bl	800bd2a <ld_clust>
 800c8c6:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 800c8c8:	693b      	ldr	r3, [r7, #16]
 800c8ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800c8cc:	2200      	movs	r2, #0
 800c8ce:	4618      	mov	r0, r3
 800c8d0:	f7ff fa4a 	bl	800bd68 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 800c8d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8d6:	331c      	adds	r3, #28
 800c8d8:	2100      	movs	r1, #0
 800c8da:	4618      	mov	r0, r3
 800c8dc:	f7fe fac6 	bl	800ae6c <st_dword>
					fs->wflag = 1;
 800c8e0:	693b      	ldr	r3, [r7, #16]
 800c8e2:	2201      	movs	r2, #1
 800c8e4:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 800c8e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d037      	beq.n	800c95c <f_open+0x1d4>
						dw = fs->winsect;
 800c8ec:	693b      	ldr	r3, [r7, #16]
 800c8ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8f0:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 800c8f2:	f107 0314 	add.w	r3, r7, #20
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800c8fa:	4618      	mov	r0, r3
 800c8fc:	f7fe ff5d 	bl	800b7ba <remove_chain>
 800c900:	4603      	mov	r3, r0
 800c902:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 800c906:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d126      	bne.n	800c95c <f_open+0x1d4>
							res = move_window(fs, dw);
 800c90e:	693b      	ldr	r3, [r7, #16]
 800c910:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c912:	4618      	mov	r0, r3
 800c914:	f7fe fd04 	bl	800b320 <move_window>
 800c918:	4603      	mov	r3, r0
 800c91a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800c91e:	693b      	ldr	r3, [r7, #16]
 800c920:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c922:	3a01      	subs	r2, #1
 800c924:	60da      	str	r2, [r3, #12]
 800c926:	e019      	b.n	800c95c <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 800c928:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d115      	bne.n	800c95c <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800c930:	7ebb      	ldrb	r3, [r7, #26]
 800c932:	f003 0310 	and.w	r3, r3, #16
 800c936:	2b00      	cmp	r3, #0
 800c938:	d003      	beq.n	800c942 <f_open+0x1ba>
					res = FR_NO_FILE;
 800c93a:	2304      	movs	r3, #4
 800c93c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800c940:	e00c      	b.n	800c95c <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800c942:	79fb      	ldrb	r3, [r7, #7]
 800c944:	f003 0302 	and.w	r3, r3, #2
 800c948:	2b00      	cmp	r3, #0
 800c94a:	d007      	beq.n	800c95c <f_open+0x1d4>
 800c94c:	7ebb      	ldrb	r3, [r7, #26]
 800c94e:	f003 0301 	and.w	r3, r3, #1
 800c952:	2b00      	cmp	r3, #0
 800c954:	d002      	beq.n	800c95c <f_open+0x1d4>
						res = FR_DENIED;
 800c956:	2307      	movs	r3, #7
 800c958:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 800c95c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c960:	2b00      	cmp	r3, #0
 800c962:	d128      	bne.n	800c9b6 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 800c964:	79fb      	ldrb	r3, [r7, #7]
 800c966:	f003 0308 	and.w	r3, r3, #8
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d003      	beq.n	800c976 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800c96e:	79fb      	ldrb	r3, [r7, #7]
 800c970:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c974:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 800c976:	693b      	ldr	r3, [r7, #16]
 800c978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c97a:	68fb      	ldr	r3, [r7, #12]
 800c97c:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800c97e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 800c984:	79fb      	ldrb	r3, [r7, #7]
 800c986:	f023 0301 	bic.w	r3, r3, #1
 800c98a:	2b00      	cmp	r3, #0
 800c98c:	bf14      	ite	ne
 800c98e:	2301      	movne	r3, #1
 800c990:	2300      	moveq	r3, #0
 800c992:	b2db      	uxtb	r3, r3
 800c994:	461a      	mov	r2, r3
 800c996:	f107 0314 	add.w	r3, r7, #20
 800c99a:	4611      	mov	r1, r2
 800c99c:	4618      	mov	r0, r3
 800c99e:	f7fe fb8d 	bl	800b0bc <inc_lock>
 800c9a2:	4602      	mov	r2, r0
 800c9a4:	68fb      	ldr	r3, [r7, #12]
 800c9a6:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	691b      	ldr	r3, [r3, #16]
 800c9ac:	2b00      	cmp	r3, #0
 800c9ae:	d102      	bne.n	800c9b6 <f_open+0x22e>
 800c9b0:	2302      	movs	r3, #2
 800c9b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 800c9b6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	f040 8095 	bne.w	800caea <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 800c9c0:	693b      	ldr	r3, [r7, #16]
 800c9c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c9c4:	4611      	mov	r1, r2
 800c9c6:	4618      	mov	r0, r3
 800c9c8:	f7ff f9af 	bl	800bd2a <ld_clust>
 800c9cc:	4602      	mov	r2, r0
 800c9ce:	68fb      	ldr	r3, [r7, #12]
 800c9d0:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 800c9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9d4:	331c      	adds	r3, #28
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	f7fe fa0a 	bl	800adf0 <ld_dword>
 800c9dc:	4602      	mov	r2, r0
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 800c9e2:	68fb      	ldr	r3, [r7, #12]
 800c9e4:	2200      	movs	r2, #0
 800c9e6:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 800c9e8:	693a      	ldr	r2, [r7, #16]
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 800c9ee:	693b      	ldr	r3, [r7, #16]
 800c9f0:	88da      	ldrh	r2, [r3, #6]
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 800c9f6:	68fb      	ldr	r3, [r7, #12]
 800c9f8:	79fa      	ldrb	r2, [r7, #7]
 800c9fa:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 800c9fc:	68fb      	ldr	r3, [r7, #12]
 800c9fe:	2200      	movs	r2, #0
 800ca00:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	2200      	movs	r2, #0
 800ca06:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 800ca08:	68fb      	ldr	r3, [r7, #12]
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 800ca0e:	68fb      	ldr	r3, [r7, #12]
 800ca10:	3330      	adds	r3, #48	; 0x30
 800ca12:	f44f 7200 	mov.w	r2, #512	; 0x200
 800ca16:	2100      	movs	r1, #0
 800ca18:	4618      	mov	r0, r3
 800ca1a:	f7fe fa74 	bl	800af06 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800ca1e:	79fb      	ldrb	r3, [r7, #7]
 800ca20:	f003 0320 	and.w	r3, r3, #32
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d060      	beq.n	800caea <f_open+0x362>
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	68db      	ldr	r3, [r3, #12]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d05c      	beq.n	800caea <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	68da      	ldr	r2, [r3, #12]
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 800ca38:	693b      	ldr	r3, [r7, #16]
 800ca3a:	895b      	ldrh	r3, [r3, #10]
 800ca3c:	025b      	lsls	r3, r3, #9
 800ca3e:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800ca40:	68fb      	ldr	r3, [r7, #12]
 800ca42:	689b      	ldr	r3, [r3, #8]
 800ca44:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ca46:	68fb      	ldr	r3, [r7, #12]
 800ca48:	68db      	ldr	r3, [r3, #12]
 800ca4a:	657b      	str	r3, [r7, #84]	; 0x54
 800ca4c:	e016      	b.n	800ca7c <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800ca4e:	68fb      	ldr	r3, [r7, #12]
 800ca50:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7fe fd1f 	bl	800b496 <get_fat>
 800ca58:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 800ca5a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca5c:	2b01      	cmp	r3, #1
 800ca5e:	d802      	bhi.n	800ca66 <f_open+0x2de>
 800ca60:	2302      	movs	r3, #2
 800ca62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 800ca66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ca68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ca6c:	d102      	bne.n	800ca74 <f_open+0x2ec>
 800ca6e:	2301      	movs	r3, #1
 800ca70:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 800ca74:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ca76:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca78:	1ad3      	subs	r3, r2, r3
 800ca7a:	657b      	str	r3, [r7, #84]	; 0x54
 800ca7c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d103      	bne.n	800ca8c <f_open+0x304>
 800ca84:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800ca86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d8e0      	bhi.n	800ca4e <f_open+0x2c6>
				}
				fp->clust = clst;
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800ca90:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800ca92:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d127      	bne.n	800caea <f_open+0x362>
 800ca9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800caa0:	2b00      	cmp	r3, #0
 800caa2:	d022      	beq.n	800caea <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 800caa4:	693b      	ldr	r3, [r7, #16]
 800caa6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800caa8:	4618      	mov	r0, r3
 800caaa:	f7fe fcd5 	bl	800b458 <clust2sect>
 800caae:	6478      	str	r0, [r7, #68]	; 0x44
 800cab0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d103      	bne.n	800cabe <f_open+0x336>
						res = FR_INT_ERR;
 800cab6:	2302      	movs	r3, #2
 800cab8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800cabc:	e015      	b.n	800caea <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 800cabe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cac0:	0a5a      	lsrs	r2, r3, #9
 800cac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cac4:	441a      	add	r2, r3
 800cac6:	68fb      	ldr	r3, [r7, #12]
 800cac8:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 800caca:	693b      	ldr	r3, [r7, #16]
 800cacc:	7858      	ldrb	r0, [r3, #1]
 800cace:	68fb      	ldr	r3, [r7, #12]
 800cad0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	6a1a      	ldr	r2, [r3, #32]
 800cad8:	2301      	movs	r3, #1
 800cada:	f7fe f913 	bl	800ad04 <disk_read>
 800cade:	4603      	mov	r3, r0
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d002      	beq.n	800caea <f_open+0x362>
 800cae4:	2301      	movs	r3, #1
 800cae6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 800caea:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d002      	beq.n	800caf8 <f_open+0x370>
 800caf2:	68fb      	ldr	r3, [r7, #12]
 800caf4:	2200      	movs	r2, #0
 800caf6:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800caf8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 800cafc:	4618      	mov	r0, r3
 800cafe:	3760      	adds	r7, #96	; 0x60
 800cb00:	46bd      	mov	sp, r7
 800cb02:	bd80      	pop	{r7, pc}

0800cb04 <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 800cb04:	b580      	push	{r7, lr}
 800cb06:	b08e      	sub	sp, #56	; 0x38
 800cb08:	af00      	add	r7, sp, #0
 800cb0a:	60f8      	str	r0, [r7, #12]
 800cb0c:	60b9      	str	r1, [r7, #8]
 800cb0e:	607a      	str	r2, [r7, #4]
 800cb10:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 800cb1c:	68fb      	ldr	r3, [r7, #12]
 800cb1e:	f107 0214 	add.w	r2, r7, #20
 800cb22:	4611      	mov	r1, r2
 800cb24:	4618      	mov	r0, r3
 800cb26:	f7ff fdb3 	bl	800c690 <validate>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800cb30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb34:	2b00      	cmp	r3, #0
 800cb36:	d107      	bne.n	800cb48 <f_read+0x44>
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	7d5b      	ldrb	r3, [r3, #21]
 800cb3c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800cb40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb44:	2b00      	cmp	r3, #0
 800cb46:	d002      	beq.n	800cb4e <f_read+0x4a>
 800cb48:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800cb4c:	e115      	b.n	800cd7a <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 800cb4e:	68fb      	ldr	r3, [r7, #12]
 800cb50:	7d1b      	ldrb	r3, [r3, #20]
 800cb52:	f003 0301 	and.w	r3, r3, #1
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d101      	bne.n	800cb5e <f_read+0x5a>
 800cb5a:	2307      	movs	r3, #7
 800cb5c:	e10d      	b.n	800cd7a <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 800cb5e:	68fb      	ldr	r3, [r7, #12]
 800cb60:	68da      	ldr	r2, [r3, #12]
 800cb62:	68fb      	ldr	r3, [r7, #12]
 800cb64:	699b      	ldr	r3, [r3, #24]
 800cb66:	1ad3      	subs	r3, r2, r3
 800cb68:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 800cb6a:	687a      	ldr	r2, [r7, #4]
 800cb6c:	6a3b      	ldr	r3, [r7, #32]
 800cb6e:	429a      	cmp	r2, r3
 800cb70:	f240 80fe 	bls.w	800cd70 <f_read+0x26c>
 800cb74:	6a3b      	ldr	r3, [r7, #32]
 800cb76:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800cb78:	e0fa      	b.n	800cd70 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	699b      	ldr	r3, [r3, #24]
 800cb7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	f040 80c6 	bne.w	800cd14 <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 800cb88:	68fb      	ldr	r3, [r7, #12]
 800cb8a:	699b      	ldr	r3, [r3, #24]
 800cb8c:	0a5b      	lsrs	r3, r3, #9
 800cb8e:	697a      	ldr	r2, [r7, #20]
 800cb90:	8952      	ldrh	r2, [r2, #10]
 800cb92:	3a01      	subs	r2, #1
 800cb94:	4013      	ands	r3, r2
 800cb96:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 800cb98:	69fb      	ldr	r3, [r7, #28]
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d12f      	bne.n	800cbfe <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	699b      	ldr	r3, [r3, #24]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d103      	bne.n	800cbae <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	689b      	ldr	r3, [r3, #8]
 800cbaa:	633b      	str	r3, [r7, #48]	; 0x30
 800cbac:	e013      	b.n	800cbd6 <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d007      	beq.n	800cbc6 <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	699b      	ldr	r3, [r3, #24]
 800cbba:	4619      	mov	r1, r3
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f7fe fef9 	bl	800b9b4 <clmt_clust>
 800cbc2:	6338      	str	r0, [r7, #48]	; 0x30
 800cbc4:	e007      	b.n	800cbd6 <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 800cbc6:	68fa      	ldr	r2, [r7, #12]
 800cbc8:	68fb      	ldr	r3, [r7, #12]
 800cbca:	69db      	ldr	r3, [r3, #28]
 800cbcc:	4619      	mov	r1, r3
 800cbce:	4610      	mov	r0, r2
 800cbd0:	f7fe fc61 	bl	800b496 <get_fat>
 800cbd4:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 800cbd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd8:	2b01      	cmp	r3, #1
 800cbda:	d804      	bhi.n	800cbe6 <f_read+0xe2>
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	2202      	movs	r2, #2
 800cbe0:	755a      	strb	r2, [r3, #21]
 800cbe2:	2302      	movs	r3, #2
 800cbe4:	e0c9      	b.n	800cd7a <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbec:	d104      	bne.n	800cbf8 <f_read+0xf4>
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	2201      	movs	r2, #1
 800cbf2:	755a      	strb	r2, [r3, #21]
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	e0c0      	b.n	800cd7a <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cbfc:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800cbfe:	697a      	ldr	r2, [r7, #20]
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	69db      	ldr	r3, [r3, #28]
 800cc04:	4619      	mov	r1, r3
 800cc06:	4610      	mov	r0, r2
 800cc08:	f7fe fc26 	bl	800b458 <clust2sect>
 800cc0c:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800cc0e:	69bb      	ldr	r3, [r7, #24]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d104      	bne.n	800cc1e <f_read+0x11a>
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	2202      	movs	r2, #2
 800cc18:	755a      	strb	r2, [r3, #21]
 800cc1a:	2302      	movs	r3, #2
 800cc1c:	e0ad      	b.n	800cd7a <f_read+0x276>
			sect += csect;
 800cc1e:	69ba      	ldr	r2, [r7, #24]
 800cc20:	69fb      	ldr	r3, [r7, #28]
 800cc22:	4413      	add	r3, r2
 800cc24:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	0a5b      	lsrs	r3, r3, #9
 800cc2a:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 800cc2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d039      	beq.n	800cca6 <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 800cc32:	69fa      	ldr	r2, [r7, #28]
 800cc34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc36:	4413      	add	r3, r2
 800cc38:	697a      	ldr	r2, [r7, #20]
 800cc3a:	8952      	ldrh	r2, [r2, #10]
 800cc3c:	4293      	cmp	r3, r2
 800cc3e:	d905      	bls.n	800cc4c <f_read+0x148>
					cc = fs->csize - csect;
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	895b      	ldrh	r3, [r3, #10]
 800cc44:	461a      	mov	r2, r3
 800cc46:	69fb      	ldr	r3, [r7, #28]
 800cc48:	1ad3      	subs	r3, r2, r3
 800cc4a:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800cc4c:	697b      	ldr	r3, [r7, #20]
 800cc4e:	7858      	ldrb	r0, [r3, #1]
 800cc50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc52:	69ba      	ldr	r2, [r7, #24]
 800cc54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cc56:	f7fe f855 	bl	800ad04 <disk_read>
 800cc5a:	4603      	mov	r3, r0
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d004      	beq.n	800cc6a <f_read+0x166>
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	2201      	movs	r2, #1
 800cc64:	755a      	strb	r2, [r3, #21]
 800cc66:	2301      	movs	r3, #1
 800cc68:	e087      	b.n	800cd7a <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	7d1b      	ldrb	r3, [r3, #20]
 800cc6e:	b25b      	sxtb	r3, r3
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	da14      	bge.n	800cc9e <f_read+0x19a>
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	6a1a      	ldr	r2, [r3, #32]
 800cc78:	69bb      	ldr	r3, [r7, #24]
 800cc7a:	1ad3      	subs	r3, r2, r3
 800cc7c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc7e:	429a      	cmp	r2, r3
 800cc80:	d90d      	bls.n	800cc9e <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	6a1a      	ldr	r2, [r3, #32]
 800cc86:	69bb      	ldr	r3, [r7, #24]
 800cc88:	1ad3      	subs	r3, r2, r3
 800cc8a:	025b      	lsls	r3, r3, #9
 800cc8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cc8e:	18d0      	adds	r0, r2, r3
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	3330      	adds	r3, #48	; 0x30
 800cc94:	f44f 7200 	mov.w	r2, #512	; 0x200
 800cc98:	4619      	mov	r1, r3
 800cc9a:	f7fe f913 	bl	800aec4 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 800cc9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cca0:	025b      	lsls	r3, r3, #9
 800cca2:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 800cca4:	e050      	b.n	800cd48 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	6a1b      	ldr	r3, [r3, #32]
 800ccaa:	69ba      	ldr	r2, [r7, #24]
 800ccac:	429a      	cmp	r2, r3
 800ccae:	d02e      	beq.n	800cd0e <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800ccb0:	68fb      	ldr	r3, [r7, #12]
 800ccb2:	7d1b      	ldrb	r3, [r3, #20]
 800ccb4:	b25b      	sxtb	r3, r3
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	da18      	bge.n	800ccec <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800ccba:	697b      	ldr	r3, [r7, #20]
 800ccbc:	7858      	ldrb	r0, [r3, #1]
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	6a1a      	ldr	r2, [r3, #32]
 800ccc8:	2301      	movs	r3, #1
 800ccca:	f7fe f83b 	bl	800ad44 <disk_write>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	2b00      	cmp	r3, #0
 800ccd2:	d004      	beq.n	800ccde <f_read+0x1da>
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	2201      	movs	r2, #1
 800ccd8:	755a      	strb	r2, [r3, #21]
 800ccda:	2301      	movs	r3, #1
 800ccdc:	e04d      	b.n	800cd7a <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	7d1b      	ldrb	r3, [r3, #20]
 800cce2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cce6:	b2da      	uxtb	r2, r3
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800ccec:	697b      	ldr	r3, [r7, #20]
 800ccee:	7858      	ldrb	r0, [r3, #1]
 800ccf0:	68fb      	ldr	r3, [r7, #12]
 800ccf2:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	69ba      	ldr	r2, [r7, #24]
 800ccfa:	f7fe f803 	bl	800ad04 <disk_read>
 800ccfe:	4603      	mov	r3, r0
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d004      	beq.n	800cd0e <f_read+0x20a>
 800cd04:	68fb      	ldr	r3, [r7, #12]
 800cd06:	2201      	movs	r2, #1
 800cd08:	755a      	strb	r2, [r3, #21]
 800cd0a:	2301      	movs	r3, #1
 800cd0c:	e035      	b.n	800cd7a <f_read+0x276>
			}
#endif
			fp->sect = sect;
 800cd0e:	68fb      	ldr	r3, [r7, #12]
 800cd10:	69ba      	ldr	r2, [r7, #24]
 800cd12:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800cd14:	68fb      	ldr	r3, [r7, #12]
 800cd16:	699b      	ldr	r3, [r3, #24]
 800cd18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd1c:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800cd20:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 800cd22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	429a      	cmp	r2, r3
 800cd28:	d901      	bls.n	800cd2e <f_read+0x22a>
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800cd34:	68fb      	ldr	r3, [r7, #12]
 800cd36:	699b      	ldr	r3, [r3, #24]
 800cd38:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd3c:	4413      	add	r3, r2
 800cd3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cd40:	4619      	mov	r1, r3
 800cd42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd44:	f7fe f8be 	bl	800aec4 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800cd48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cd4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd4c:	4413      	add	r3, r2
 800cd4e:	627b      	str	r3, [r7, #36]	; 0x24
 800cd50:	68fb      	ldr	r3, [r7, #12]
 800cd52:	699a      	ldr	r2, [r3, #24]
 800cd54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd56:	441a      	add	r2, r3
 800cd58:	68fb      	ldr	r3, [r7, #12]
 800cd5a:	619a      	str	r2, [r3, #24]
 800cd5c:	683b      	ldr	r3, [r7, #0]
 800cd5e:	681a      	ldr	r2, [r3, #0]
 800cd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd62:	441a      	add	r2, r3
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	601a      	str	r2, [r3, #0]
 800cd68:	687a      	ldr	r2, [r7, #4]
 800cd6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cd6c:	1ad3      	subs	r3, r2, r3
 800cd6e:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 800cd70:	687b      	ldr	r3, [r7, #4]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	f47f af01 	bne.w	800cb7a <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 800cd78:	2300      	movs	r3, #0
}
 800cd7a:	4618      	mov	r0, r3
 800cd7c:	3738      	adds	r7, #56	; 0x38
 800cd7e:	46bd      	mov	sp, r7
 800cd80:	bd80      	pop	{r7, pc}

0800cd82 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 800cd82:	b580      	push	{r7, lr}
 800cd84:	b086      	sub	sp, #24
 800cd86:	af00      	add	r7, sp, #0
 800cd88:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	f107 0208 	add.w	r2, r7, #8
 800cd90:	4611      	mov	r1, r2
 800cd92:	4618      	mov	r0, r3
 800cd94:	f7ff fc7c 	bl	800c690 <validate>
 800cd98:	4603      	mov	r3, r0
 800cd9a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800cd9c:	7dfb      	ldrb	r3, [r7, #23]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d168      	bne.n	800ce74 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 800cda2:	687b      	ldr	r3, [r7, #4]
 800cda4:	7d1b      	ldrb	r3, [r3, #20]
 800cda6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cdaa:	2b00      	cmp	r3, #0
 800cdac:	d062      	beq.n	800ce74 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	7d1b      	ldrb	r3, [r3, #20]
 800cdb2:	b25b      	sxtb	r3, r3
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	da15      	bge.n	800cde4 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 800cdb8:	68bb      	ldr	r3, [r7, #8]
 800cdba:	7858      	ldrb	r0, [r3, #1]
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	6a1a      	ldr	r2, [r3, #32]
 800cdc6:	2301      	movs	r3, #1
 800cdc8:	f7fd ffbc 	bl	800ad44 <disk_write>
 800cdcc:	4603      	mov	r3, r0
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d001      	beq.n	800cdd6 <f_sync+0x54>
 800cdd2:	2301      	movs	r3, #1
 800cdd4:	e04f      	b.n	800ce76 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800cdd6:	687b      	ldr	r3, [r7, #4]
 800cdd8:	7d1b      	ldrb	r3, [r3, #20]
 800cdda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800cdde:	b2da      	uxtb	r2, r3
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800cde4:	f7fa fe3e 	bl	8007a64 <get_fattime>
 800cde8:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 800cdea:	68ba      	ldr	r2, [r7, #8]
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cdf0:	4619      	mov	r1, r3
 800cdf2:	4610      	mov	r0, r2
 800cdf4:	f7fe fa94 	bl	800b320 <move_window>
 800cdf8:	4603      	mov	r3, r0
 800cdfa:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 800cdfc:	7dfb      	ldrb	r3, [r7, #23]
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d138      	bne.n	800ce74 <f_sync+0xf2>
					dir = fp->dir_ptr;
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce06:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 800ce08:	68fb      	ldr	r3, [r7, #12]
 800ce0a:	330b      	adds	r3, #11
 800ce0c:	781a      	ldrb	r2, [r3, #0]
 800ce0e:	68fb      	ldr	r3, [r7, #12]
 800ce10:	330b      	adds	r3, #11
 800ce12:	f042 0220 	orr.w	r2, r2, #32
 800ce16:	b2d2      	uxtb	r2, r2
 800ce18:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 800ce1a:	687b      	ldr	r3, [r7, #4]
 800ce1c:	6818      	ldr	r0, [r3, #0]
 800ce1e:	687b      	ldr	r3, [r7, #4]
 800ce20:	689b      	ldr	r3, [r3, #8]
 800ce22:	461a      	mov	r2, r3
 800ce24:	68f9      	ldr	r1, [r7, #12]
 800ce26:	f7fe ff9f 	bl	800bd68 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	f103 021c 	add.w	r2, r3, #28
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	68db      	ldr	r3, [r3, #12]
 800ce34:	4619      	mov	r1, r3
 800ce36:	4610      	mov	r0, r2
 800ce38:	f7fe f818 	bl	800ae6c <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 800ce3c:	68fb      	ldr	r3, [r7, #12]
 800ce3e:	3316      	adds	r3, #22
 800ce40:	6939      	ldr	r1, [r7, #16]
 800ce42:	4618      	mov	r0, r3
 800ce44:	f7fe f812 	bl	800ae6c <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 800ce48:	68fb      	ldr	r3, [r7, #12]
 800ce4a:	3312      	adds	r3, #18
 800ce4c:	2100      	movs	r1, #0
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7fd fff1 	bl	800ae36 <st_word>
					fs->wflag = 1;
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	2201      	movs	r2, #1
 800ce58:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 800ce5a:	68bb      	ldr	r3, [r7, #8]
 800ce5c:	4618      	mov	r0, r3
 800ce5e:	f7fe fa8d 	bl	800b37c <sync_fs>
 800ce62:	4603      	mov	r3, r0
 800ce64:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	7d1b      	ldrb	r3, [r3, #20]
 800ce6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800ce6e:	b2da      	uxtb	r2, r3
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 800ce74:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3718      	adds	r7, #24
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}

0800ce7e <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 800ce7e:	b580      	push	{r7, lr}
 800ce80:	b084      	sub	sp, #16
 800ce82:	af00      	add	r7, sp, #0
 800ce84:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 800ce86:	6878      	ldr	r0, [r7, #4]
 800ce88:	f7ff ff7b 	bl	800cd82 <f_sync>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 800ce90:	7bfb      	ldrb	r3, [r7, #15]
 800ce92:	2b00      	cmp	r3, #0
 800ce94:	d118      	bne.n	800cec8 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 800ce96:	687b      	ldr	r3, [r7, #4]
 800ce98:	f107 0208 	add.w	r2, r7, #8
 800ce9c:	4611      	mov	r1, r2
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f7ff fbf6 	bl	800c690 <validate>
 800cea4:	4603      	mov	r3, r0
 800cea6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800cea8:	7bfb      	ldrb	r3, [r7, #15]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d10c      	bne.n	800cec8 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 800ceae:	687b      	ldr	r3, [r7, #4]
 800ceb0:	691b      	ldr	r3, [r3, #16]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7fe f990 	bl	800b1d8 <dec_lock>
 800ceb8:	4603      	mov	r3, r0
 800ceba:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 800cebc:	7bfb      	ldrb	r3, [r7, #15]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d102      	bne.n	800cec8 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800cec2:	687b      	ldr	r3, [r7, #4]
 800cec4:	2200      	movs	r2, #0
 800cec6:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 800cec8:	7bfb      	ldrb	r3, [r7, #15]
}
 800ceca:	4618      	mov	r0, r3
 800cecc:	3710      	adds	r7, #16
 800cece:	46bd      	mov	sp, r7
 800ced0:	bd80      	pop	{r7, pc}

0800ced2 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File pointer from top of file */
)
{
 800ced2:	b580      	push	{r7, lr}
 800ced4:	b090      	sub	sp, #64	; 0x40
 800ced6:	af00      	add	r7, sp, #0
 800ced8:	6078      	str	r0, [r7, #4]
 800ceda:	6039      	str	r1, [r7, #0]
	FSIZE_t ifptr;
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif

	res = validate(&fp->obj, &fs);		/* Check validity of the file object */
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f107 0208 	add.w	r2, r7, #8
 800cee2:	4611      	mov	r1, r2
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7ff fbd3 	bl	800c690 <validate>
 800ceea:	4603      	mov	r3, r0
 800ceec:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res == FR_OK) res = (FRESULT)fp->err;
 800cef0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	d103      	bne.n	800cf00 <f_lseek+0x2e>
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	7d5b      	ldrb	r3, [r3, #21]
 800cefc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if _FS_EXFAT && !_FS_READONLY
	if (res == FR_OK && fs->fs_type == FS_EXFAT) {
		res = fill_last_frag(&fp->obj, fp->clust, 0xFFFFFFFF);	/* Fill last fragment on the FAT if needed */
	}
#endif
	if (res != FR_OK) LEAVE_FF(fs, res);
 800cf00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cf04:	2b00      	cmp	r3, #0
 800cf06:	d002      	beq.n	800cf0e <f_lseek+0x3c>
 800cf08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800cf0c:	e1e6      	b.n	800d2dc <f_lseek+0x40a>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	f000 80d1 	beq.w	800d0ba <f_lseek+0x1e8>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf1e:	d15a      	bne.n	800cfd6 <f_lseek+0x104>
			tbl = fp->cltbl;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf24:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 800cf26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf28:	1d1a      	adds	r2, r3, #4
 800cf2a:	627a      	str	r2, [r7, #36]	; 0x24
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	617b      	str	r3, [r7, #20]
 800cf30:	2302      	movs	r3, #2
 800cf32:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->obj.sclust;		/* Origin of the chain */
 800cf34:	687b      	ldr	r3, [r7, #4]
 800cf36:	689b      	ldr	r3, [r3, #8]
 800cf38:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 800cf3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d03a      	beq.n	800cfb6 <f_lseek+0xe4>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 800cf40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf42:	613b      	str	r3, [r7, #16]
 800cf44:	2300      	movs	r3, #0
 800cf46:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cf4a:	3302      	adds	r3, #2
 800cf4c:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 800cf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf50:	60fb      	str	r3, [r7, #12]
 800cf52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf54:	3301      	adds	r3, #1
 800cf56:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(&fp->obj, cl);
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	f7fe fa9a 	bl	800b496 <get_fat>
 800cf62:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fs, FR_INT_ERR);
 800cf64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf66:	2b01      	cmp	r3, #1
 800cf68:	d804      	bhi.n	800cf74 <f_lseek+0xa2>
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	2202      	movs	r2, #2
 800cf6e:	755a      	strb	r2, [r3, #21]
 800cf70:	2302      	movs	r3, #2
 800cf72:	e1b3      	b.n	800d2dc <f_lseek+0x40a>
						if (cl == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800cf74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cf76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cf7a:	d104      	bne.n	800cf86 <f_lseek+0xb4>
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	2201      	movs	r2, #1
 800cf80:	755a      	strb	r2, [r3, #21]
 800cf82:	2301      	movs	r3, #1
 800cf84:	e1aa      	b.n	800d2dc <f_lseek+0x40a>
					} while (cl == pcl + 1);
 800cf86:	68fb      	ldr	r3, [r7, #12]
 800cf88:	3301      	adds	r3, #1
 800cf8a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cf8c:	429a      	cmp	r2, r3
 800cf8e:	d0de      	beq.n	800cf4e <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 800cf90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cf92:	697b      	ldr	r3, [r7, #20]
 800cf94:	429a      	cmp	r2, r3
 800cf96:	d809      	bhi.n	800cfac <f_lseek+0xda>
						*tbl++ = ncl; *tbl++ = tcl;
 800cf98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9a:	1d1a      	adds	r2, r3, #4
 800cf9c:	627a      	str	r2, [r7, #36]	; 0x24
 800cf9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cfa0:	601a      	str	r2, [r3, #0]
 800cfa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa4:	1d1a      	adds	r2, r3, #4
 800cfa6:	627a      	str	r2, [r7, #36]	; 0x24
 800cfa8:	693a      	ldr	r2, [r7, #16]
 800cfaa:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fs->n_fatent);	/* Repeat until end of chain */
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	695b      	ldr	r3, [r3, #20]
 800cfb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d3c4      	bcc.n	800cf40 <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfbc:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen) {
 800cfbe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cfc0:	697b      	ldr	r3, [r7, #20]
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d803      	bhi.n	800cfce <f_lseek+0xfc>
				*tbl = 0;		/* Terminate table */
 800cfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc8:	2200      	movs	r2, #0
 800cfca:	601a      	str	r2, [r3, #0]
 800cfcc:	e184      	b.n	800d2d8 <f_lseek+0x406>
			} else {
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 800cfce:	2311      	movs	r3, #17
 800cfd0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 800cfd4:	e180      	b.n	800d2d8 <f_lseek+0x406>
			}
		} else {						/* Fast seek */
			if (ofs > fp->obj.objsize) ofs = fp->obj.objsize;	/* Clip offset at the file size */
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	68db      	ldr	r3, [r3, #12]
 800cfda:	683a      	ldr	r2, [r7, #0]
 800cfdc:	429a      	cmp	r2, r3
 800cfde:	d902      	bls.n	800cfe6 <f_lseek+0x114>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	68db      	ldr	r3, [r3, #12]
 800cfe4:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	683a      	ldr	r2, [r7, #0]
 800cfea:	619a      	str	r2, [r3, #24]
			if (ofs) {
 800cfec:	683b      	ldr	r3, [r7, #0]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	f000 8172 	beq.w	800d2d8 <f_lseek+0x406>
				fp->clust = clmt_clust(fp, ofs - 1);
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	3b01      	subs	r3, #1
 800cff8:	4619      	mov	r1, r3
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	f7fe fcda 	bl	800b9b4 <clmt_clust>
 800d000:	4602      	mov	r2, r0
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	61da      	str	r2, [r3, #28]
				dsc = clust2sect(fs, fp->clust);
 800d006:	68ba      	ldr	r2, [r7, #8]
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	69db      	ldr	r3, [r3, #28]
 800d00c:	4619      	mov	r1, r3
 800d00e:	4610      	mov	r0, r2
 800d010:	f7fe fa22 	bl	800b458 <clust2sect>
 800d014:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fs, FR_INT_ERR);
 800d016:	69bb      	ldr	r3, [r7, #24]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d104      	bne.n	800d026 <f_lseek+0x154>
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	2202      	movs	r2, #2
 800d020:	755a      	strb	r2, [r3, #21]
 800d022:	2302      	movs	r3, #2
 800d024:	e15a      	b.n	800d2dc <f_lseek+0x40a>
				dsc += (DWORD)((ofs - 1) / SS(fs)) & (fs->csize - 1);
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	3b01      	subs	r3, #1
 800d02a:	0a5b      	lsrs	r3, r3, #9
 800d02c:	68ba      	ldr	r2, [r7, #8]
 800d02e:	8952      	ldrh	r2, [r2, #10]
 800d030:	3a01      	subs	r2, #1
 800d032:	4013      	ands	r3, r2
 800d034:	69ba      	ldr	r2, [r7, #24]
 800d036:	4413      	add	r3, r2
 800d038:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fs) && dsc != fp->sect) {	/* Refill sector cache if needed */
 800d03a:	687b      	ldr	r3, [r7, #4]
 800d03c:	699b      	ldr	r3, [r3, #24]
 800d03e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d042:	2b00      	cmp	r3, #0
 800d044:	f000 8148 	beq.w	800d2d8 <f_lseek+0x406>
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6a1b      	ldr	r3, [r3, #32]
 800d04c:	69ba      	ldr	r2, [r7, #24]
 800d04e:	429a      	cmp	r2, r3
 800d050:	f000 8142 	beq.w	800d2d8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	7d1b      	ldrb	r3, [r3, #20]
 800d058:	b25b      	sxtb	r3, r3
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	da18      	bge.n	800d090 <f_lseek+0x1be>
						if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d05e:	68bb      	ldr	r3, [r7, #8]
 800d060:	7858      	ldrb	r0, [r3, #1]
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	6a1a      	ldr	r2, [r3, #32]
 800d06c:	2301      	movs	r3, #1
 800d06e:	f7fd fe69 	bl	800ad44 <disk_write>
 800d072:	4603      	mov	r3, r0
 800d074:	2b00      	cmp	r3, #0
 800d076:	d004      	beq.n	800d082 <f_lseek+0x1b0>
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	2201      	movs	r2, #1
 800d07c:	755a      	strb	r2, [r3, #21]
 800d07e:	2301      	movs	r3, #1
 800d080:	e12c      	b.n	800d2dc <f_lseek+0x40a>
						fp->flag &= (BYTE)~FA_DIRTY;
 800d082:	687b      	ldr	r3, [r7, #4]
 800d084:	7d1b      	ldrb	r3, [r3, #20]
 800d086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d08a:	b2da      	uxtb	r2, r3
 800d08c:	687b      	ldr	r3, [r7, #4]
 800d08e:	751a      	strb	r2, [r3, #20]
					}
#endif
					if (disk_read(fs->drv, fp->buf, dsc, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Load current sector */
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	7858      	ldrb	r0, [r3, #1]
 800d094:	687b      	ldr	r3, [r7, #4]
 800d096:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d09a:	2301      	movs	r3, #1
 800d09c:	69ba      	ldr	r2, [r7, #24]
 800d09e:	f7fd fe31 	bl	800ad04 <disk_read>
 800d0a2:	4603      	mov	r3, r0
 800d0a4:	2b00      	cmp	r3, #0
 800d0a6:	d004      	beq.n	800d0b2 <f_lseek+0x1e0>
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	2201      	movs	r2, #1
 800d0ac:	755a      	strb	r2, [r3, #21]
 800d0ae:	2301      	movs	r3, #1
 800d0b0:	e114      	b.n	800d2dc <f_lseek+0x40a>
#endif
					fp->sect = dsc;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	69ba      	ldr	r2, [r7, #24]
 800d0b6:	621a      	str	r2, [r3, #32]
 800d0b8:	e10e      	b.n	800d2d8 <f_lseek+0x406>
	/* Normal Seek */
	{
#if _FS_EXFAT
		if (fs->fs_type != FS_EXFAT && ofs >= 0x100000000) ofs = 0xFFFFFFFF;	/* Clip at 4GiB-1 if at FATxx */
#endif
		if (ofs > fp->obj.objsize && (_FS_READONLY || !(fp->flag & FA_WRITE))) {	/* In read-only mode, clip offset with the file size */
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	68db      	ldr	r3, [r3, #12]
 800d0be:	683a      	ldr	r2, [r7, #0]
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d908      	bls.n	800d0d6 <f_lseek+0x204>
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	7d1b      	ldrb	r3, [r3, #20]
 800d0c8:	f003 0302 	and.w	r3, r3, #2
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d102      	bne.n	800d0d6 <f_lseek+0x204>
			ofs = fp->obj.objsize;
 800d0d0:	687b      	ldr	r3, [r7, #4]
 800d0d2:	68db      	ldr	r3, [r3, #12]
 800d0d4:	603b      	str	r3, [r7, #0]
		}
		ifptr = fp->fptr;
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	699b      	ldr	r3, [r3, #24]
 800d0da:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 800d0dc:	2300      	movs	r3, #0
 800d0de:	637b      	str	r3, [r7, #52]	; 0x34
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d0e4:	619a      	str	r2, [r3, #24]
		if (ofs) {
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	f000 80a7 	beq.w	800d23c <f_lseek+0x36a>
			bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size (byte) */
 800d0ee:	68bb      	ldr	r3, [r7, #8]
 800d0f0:	895b      	ldrh	r3, [r3, #10]
 800d0f2:	025b      	lsls	r3, r3, #9
 800d0f4:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 800d0f6:	6a3b      	ldr	r3, [r7, #32]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d01b      	beq.n	800d134 <f_lseek+0x262>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800d0fc:	683b      	ldr	r3, [r7, #0]
 800d0fe:	1e5a      	subs	r2, r3, #1
 800d100:	69fb      	ldr	r3, [r7, #28]
 800d102:	fbb2 f2f3 	udiv	r2, r2, r3
 800d106:	6a3b      	ldr	r3, [r7, #32]
 800d108:	1e59      	subs	r1, r3, #1
 800d10a:	69fb      	ldr	r3, [r7, #28]
 800d10c:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 800d110:	429a      	cmp	r2, r3
 800d112:	d30f      	bcc.n	800d134 <f_lseek+0x262>
				fp->fptr = (ifptr - 1) & ~(FSIZE_t)(bcs - 1);	/* start from the current cluster */
 800d114:	6a3b      	ldr	r3, [r7, #32]
 800d116:	1e5a      	subs	r2, r3, #1
 800d118:	69fb      	ldr	r3, [r7, #28]
 800d11a:	425b      	negs	r3, r3
 800d11c:	401a      	ands	r2, r3
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	619a      	str	r2, [r3, #24]
				ofs -= fp->fptr;
 800d122:	687b      	ldr	r3, [r7, #4]
 800d124:	699b      	ldr	r3, [r3, #24]
 800d126:	683a      	ldr	r2, [r7, #0]
 800d128:	1ad3      	subs	r3, r2, r3
 800d12a:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	69db      	ldr	r3, [r3, #28]
 800d130:	63bb      	str	r3, [r7, #56]	; 0x38
 800d132:	e022      	b.n	800d17a <f_lseek+0x2a8>
			} else {									/* When seek to back cluster, */
				clst = fp->obj.sclust;					/* start from the first cluster */
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	689b      	ldr	r3, [r3, #8]
 800d138:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 800d13a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d119      	bne.n	800d174 <f_lseek+0x2a2>
					clst = create_chain(&fp->obj, 0);
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	2100      	movs	r1, #0
 800d144:	4618      	mov	r0, r3
 800d146:	f7fe fb9d 	bl	800b884 <create_chain>
 800d14a:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fs, FR_INT_ERR);
 800d14c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d14e:	2b01      	cmp	r3, #1
 800d150:	d104      	bne.n	800d15c <f_lseek+0x28a>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	2202      	movs	r2, #2
 800d156:	755a      	strb	r2, [r3, #21]
 800d158:	2302      	movs	r3, #2
 800d15a:	e0bf      	b.n	800d2dc <f_lseek+0x40a>
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d15c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d15e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d162:	d104      	bne.n	800d16e <f_lseek+0x29c>
 800d164:	687b      	ldr	r3, [r7, #4]
 800d166:	2201      	movs	r2, #1
 800d168:	755a      	strb	r2, [r3, #21]
 800d16a:	2301      	movs	r3, #1
 800d16c:	e0b6      	b.n	800d2dc <f_lseek+0x40a>
					fp->obj.sclust = clst;
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d172:	609a      	str	r2, [r3, #8]
				}
#endif
				fp->clust = clst;
 800d174:	687b      	ldr	r3, [r7, #4]
 800d176:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d178:	61da      	str	r2, [r3, #28]
			}
			if (clst != 0) {
 800d17a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d05d      	beq.n	800d23c <f_lseek+0x36a>
				while (ofs > bcs) {						/* Cluster following loop */
 800d180:	e03a      	b.n	800d1f8 <f_lseek+0x326>
					ofs -= bcs; fp->fptr += bcs;
 800d182:	683a      	ldr	r2, [r7, #0]
 800d184:	69fb      	ldr	r3, [r7, #28]
 800d186:	1ad3      	subs	r3, r2, r3
 800d188:	603b      	str	r3, [r7, #0]
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	699a      	ldr	r2, [r3, #24]
 800d18e:	69fb      	ldr	r3, [r7, #28]
 800d190:	441a      	add	r2, r3
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800d196:	687b      	ldr	r3, [r7, #4]
 800d198:	7d1b      	ldrb	r3, [r3, #20]
 800d19a:	f003 0302 	and.w	r3, r3, #2
 800d19e:	2b00      	cmp	r3, #0
 800d1a0:	d00b      	beq.n	800d1ba <f_lseek+0x2e8>
						if (_FS_EXFAT && fp->fptr > fp->obj.objsize) {	/* No FAT chain object needs correct objsize to generate FAT value */
							fp->obj.objsize = fp->fptr;
							fp->flag |= FA_MODIFIED;
						}
						clst = create_chain(&fp->obj, clst);	/* Follow chain with forceed stretch */
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d1a6:	4618      	mov	r0, r3
 800d1a8:	f7fe fb6c 	bl	800b884 <create_chain>
 800d1ac:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* Clip file size in case of disk full */
 800d1ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1b0:	2b00      	cmp	r3, #0
 800d1b2:	d108      	bne.n	800d1c6 <f_lseek+0x2f4>
							ofs = 0; break;
 800d1b4:	2300      	movs	r3, #0
 800d1b6:	603b      	str	r3, [r7, #0]
 800d1b8:	e022      	b.n	800d200 <f_lseek+0x32e>
						}
					} else
#endif
					{
						clst = get_fat(&fp->obj, clst);	/* Follow cluster chain if not in write mode */
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d1be:	4618      	mov	r0, r3
 800d1c0:	f7fe f969 	bl	800b496 <get_fat>
 800d1c4:	63b8      	str	r0, [r7, #56]	; 0x38
					}
					if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 800d1c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1c8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1cc:	d104      	bne.n	800d1d8 <f_lseek+0x306>
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2201      	movs	r2, #1
 800d1d2:	755a      	strb	r2, [r3, #21]
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	e081      	b.n	800d2dc <f_lseek+0x40a>
					if (clst <= 1 || clst >= fs->n_fatent) ABORT(fs, FR_INT_ERR);
 800d1d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d1da:	2b01      	cmp	r3, #1
 800d1dc:	d904      	bls.n	800d1e8 <f_lseek+0x316>
 800d1de:	68bb      	ldr	r3, [r7, #8]
 800d1e0:	695b      	ldr	r3, [r3, #20]
 800d1e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d304      	bcc.n	800d1f2 <f_lseek+0x320>
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2202      	movs	r2, #2
 800d1ec:	755a      	strb	r2, [r3, #21]
 800d1ee:	2302      	movs	r3, #2
 800d1f0:	e074      	b.n	800d2dc <f_lseek+0x40a>
					fp->clust = clst;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d1f6:	61da      	str	r2, [r3, #28]
				while (ofs > bcs) {						/* Cluster following loop */
 800d1f8:	683a      	ldr	r2, [r7, #0]
 800d1fa:	69fb      	ldr	r3, [r7, #28]
 800d1fc:	429a      	cmp	r2, r3
 800d1fe:	d8c0      	bhi.n	800d182 <f_lseek+0x2b0>
				}
				fp->fptr += ofs;
 800d200:	687b      	ldr	r3, [r7, #4]
 800d202:	699a      	ldr	r2, [r3, #24]
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	441a      	add	r2, r3
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	619a      	str	r2, [r3, #24]
				if (ofs % SS(fs)) {
 800d20c:	683b      	ldr	r3, [r7, #0]
 800d20e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d212:	2b00      	cmp	r3, #0
 800d214:	d012      	beq.n	800d23c <f_lseek+0x36a>
					nsect = clust2sect(fs, clst);	/* Current sector */
 800d216:	68bb      	ldr	r3, [r7, #8]
 800d218:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800d21a:	4618      	mov	r0, r3
 800d21c:	f7fe f91c 	bl	800b458 <clust2sect>
 800d220:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fs, FR_INT_ERR);
 800d222:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d224:	2b00      	cmp	r3, #0
 800d226:	d104      	bne.n	800d232 <f_lseek+0x360>
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	2202      	movs	r2, #2
 800d22c:	755a      	strb	r2, [r3, #21]
 800d22e:	2302      	movs	r3, #2
 800d230:	e054      	b.n	800d2dc <f_lseek+0x40a>
					nsect += (DWORD)(ofs / SS(fs));
 800d232:	683b      	ldr	r3, [r7, #0]
 800d234:	0a5b      	lsrs	r3, r3, #9
 800d236:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d238:	4413      	add	r3, r2
 800d23a:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (!_FS_READONLY && fp->fptr > fp->obj.objsize) {		/* Set file change flag if the file size is extended */
 800d23c:	687b      	ldr	r3, [r7, #4]
 800d23e:	699a      	ldr	r2, [r3, #24]
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	68db      	ldr	r3, [r3, #12]
 800d244:	429a      	cmp	r2, r3
 800d246:	d90a      	bls.n	800d25e <f_lseek+0x38c>
			fp->obj.objsize = fp->fptr;
 800d248:	687b      	ldr	r3, [r7, #4]
 800d24a:	699a      	ldr	r2, [r3, #24]
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	60da      	str	r2, [r3, #12]
			fp->flag |= FA_MODIFIED;
 800d250:	687b      	ldr	r3, [r7, #4]
 800d252:	7d1b      	ldrb	r3, [r3, #20]
 800d254:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d258:	b2da      	uxtb	r2, r3
 800d25a:	687b      	ldr	r3, [r7, #4]
 800d25c:	751a      	strb	r2, [r3, #20]
		}
		if (fp->fptr % SS(fs) && nsect != fp->sect) {	/* Fill sector cache if needed */
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	699b      	ldr	r3, [r3, #24]
 800d262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d266:	2b00      	cmp	r3, #0
 800d268:	d036      	beq.n	800d2d8 <f_lseek+0x406>
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	6a1b      	ldr	r3, [r3, #32]
 800d26e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d270:	429a      	cmp	r2, r3
 800d272:	d031      	beq.n	800d2d8 <f_lseek+0x406>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA_DIRTY) {			/* Write-back dirty sector cache */
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	7d1b      	ldrb	r3, [r3, #20]
 800d278:	b25b      	sxtb	r3, r3
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	da18      	bge.n	800d2b0 <f_lseek+0x3de>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800d27e:	68bb      	ldr	r3, [r7, #8]
 800d280:	7858      	ldrb	r0, [r3, #1]
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	6a1a      	ldr	r2, [r3, #32]
 800d28c:	2301      	movs	r3, #1
 800d28e:	f7fd fd59 	bl	800ad44 <disk_write>
 800d292:	4603      	mov	r3, r0
 800d294:	2b00      	cmp	r3, #0
 800d296:	d004      	beq.n	800d2a2 <f_lseek+0x3d0>
 800d298:	687b      	ldr	r3, [r7, #4]
 800d29a:	2201      	movs	r2, #1
 800d29c:	755a      	strb	r2, [r3, #21]
 800d29e:	2301      	movs	r3, #1
 800d2a0:	e01c      	b.n	800d2dc <f_lseek+0x40a>
				fp->flag &= (BYTE)~FA_DIRTY;
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	7d1b      	ldrb	r3, [r3, #20]
 800d2a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d2aa:	b2da      	uxtb	r2, r3
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	751a      	strb	r2, [r3, #20]
			}
#endif
			if (disk_read(fs->drv, fp->buf, nsect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 800d2b0:	68bb      	ldr	r3, [r7, #8]
 800d2b2:	7858      	ldrb	r0, [r3, #1]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800d2ba:	2301      	movs	r3, #1
 800d2bc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2be:	f7fd fd21 	bl	800ad04 <disk_read>
 800d2c2:	4603      	mov	r3, r0
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	d004      	beq.n	800d2d2 <f_lseek+0x400>
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	755a      	strb	r2, [r3, #21]
 800d2ce:	2301      	movs	r3, #1
 800d2d0:	e004      	b.n	800d2dc <f_lseek+0x40a>
#endif
			fp->sect = nsect;
 800d2d2:	687b      	ldr	r3, [r7, #4]
 800d2d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d2d6:	621a      	str	r2, [r3, #32]
		}
	}

	LEAVE_FF(fs, res);
 800d2d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 800d2dc:	4618      	mov	r0, r3
 800d2de:	3740      	adds	r7, #64	; 0x40
 800d2e0:	46bd      	mov	sp, r7
 800d2e2:	bd80      	pop	{r7, pc}

0800d2e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800d2e4:	b480      	push	{r7}
 800d2e6:	b087      	sub	sp, #28
 800d2e8:	af00      	add	r7, sp, #0
 800d2ea:	60f8      	str	r0, [r7, #12]
 800d2ec:	60b9      	str	r1, [r7, #8]
 800d2ee:	4613      	mov	r3, r2
 800d2f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800d2f2:	2301      	movs	r3, #1
 800d2f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800d2fa:	4b1f      	ldr	r3, [pc, #124]	; (800d378 <FATFS_LinkDriverEx+0x94>)
 800d2fc:	7a5b      	ldrb	r3, [r3, #9]
 800d2fe:	b2db      	uxtb	r3, r3
 800d300:	2b00      	cmp	r3, #0
 800d302:	d131      	bne.n	800d368 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800d304:	4b1c      	ldr	r3, [pc, #112]	; (800d378 <FATFS_LinkDriverEx+0x94>)
 800d306:	7a5b      	ldrb	r3, [r3, #9]
 800d308:	b2db      	uxtb	r3, r3
 800d30a:	461a      	mov	r2, r3
 800d30c:	4b1a      	ldr	r3, [pc, #104]	; (800d378 <FATFS_LinkDriverEx+0x94>)
 800d30e:	2100      	movs	r1, #0
 800d310:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800d312:	4b19      	ldr	r3, [pc, #100]	; (800d378 <FATFS_LinkDriverEx+0x94>)
 800d314:	7a5b      	ldrb	r3, [r3, #9]
 800d316:	b2db      	uxtb	r3, r3
 800d318:	4a17      	ldr	r2, [pc, #92]	; (800d378 <FATFS_LinkDriverEx+0x94>)
 800d31a:	009b      	lsls	r3, r3, #2
 800d31c:	4413      	add	r3, r2
 800d31e:	68fa      	ldr	r2, [r7, #12]
 800d320:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800d322:	4b15      	ldr	r3, [pc, #84]	; (800d378 <FATFS_LinkDriverEx+0x94>)
 800d324:	7a5b      	ldrb	r3, [r3, #9]
 800d326:	b2db      	uxtb	r3, r3
 800d328:	461a      	mov	r2, r3
 800d32a:	4b13      	ldr	r3, [pc, #76]	; (800d378 <FATFS_LinkDriverEx+0x94>)
 800d32c:	4413      	add	r3, r2
 800d32e:	79fa      	ldrb	r2, [r7, #7]
 800d330:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800d332:	4b11      	ldr	r3, [pc, #68]	; (800d378 <FATFS_LinkDriverEx+0x94>)
 800d334:	7a5b      	ldrb	r3, [r3, #9]
 800d336:	b2db      	uxtb	r3, r3
 800d338:	1c5a      	adds	r2, r3, #1
 800d33a:	b2d1      	uxtb	r1, r2
 800d33c:	4a0e      	ldr	r2, [pc, #56]	; (800d378 <FATFS_LinkDriverEx+0x94>)
 800d33e:	7251      	strb	r1, [r2, #9]
 800d340:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800d342:	7dbb      	ldrb	r3, [r7, #22]
 800d344:	3330      	adds	r3, #48	; 0x30
 800d346:	b2da      	uxtb	r2, r3
 800d348:	68bb      	ldr	r3, [r7, #8]
 800d34a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800d34c:	68bb      	ldr	r3, [r7, #8]
 800d34e:	3301      	adds	r3, #1
 800d350:	223a      	movs	r2, #58	; 0x3a
 800d352:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800d354:	68bb      	ldr	r3, [r7, #8]
 800d356:	3302      	adds	r3, #2
 800d358:	222f      	movs	r2, #47	; 0x2f
 800d35a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800d35c:	68bb      	ldr	r3, [r7, #8]
 800d35e:	3303      	adds	r3, #3
 800d360:	2200      	movs	r2, #0
 800d362:	701a      	strb	r2, [r3, #0]
    ret = 0;
 800d364:	2300      	movs	r3, #0
 800d366:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800d368:	7dfb      	ldrb	r3, [r7, #23]
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	371c      	adds	r7, #28
 800d36e:	46bd      	mov	sp, r7
 800d370:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d374:	4770      	bx	lr
 800d376:	bf00      	nop
 800d378:	20001698 	.word	0x20001698

0800d37c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800d37c:	b580      	push	{r7, lr}
 800d37e:	b082      	sub	sp, #8
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
 800d384:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800d386:	2200      	movs	r2, #0
 800d388:	6839      	ldr	r1, [r7, #0]
 800d38a:	6878      	ldr	r0, [r7, #4]
 800d38c:	f7ff ffaa 	bl	800d2e4 <FATFS_LinkDriverEx>
 800d390:	4603      	mov	r3, r0
}
 800d392:	4618      	mov	r0, r3
 800d394:	3708      	adds	r7, #8
 800d396:	46bd      	mov	sp, r7
 800d398:	bd80      	pop	{r7, pc}
	...

0800d39c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800d3a0:	2201      	movs	r2, #1
 800d3a2:	490e      	ldr	r1, [pc, #56]	; (800d3dc <MX_USB_HOST_Init+0x40>)
 800d3a4:	480e      	ldr	r0, [pc, #56]	; (800d3e0 <MX_USB_HOST_Init+0x44>)
 800d3a6:	f7fc f819 	bl	80093dc <USBH_Init>
 800d3aa:	4603      	mov	r3, r0
 800d3ac:	2b00      	cmp	r3, #0
 800d3ae:	d001      	beq.n	800d3b4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800d3b0:	f7f3 fff8 	bl	80013a4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_MSC_CLASS) != USBH_OK)
 800d3b4:	490b      	ldr	r1, [pc, #44]	; (800d3e4 <MX_USB_HOST_Init+0x48>)
 800d3b6:	480a      	ldr	r0, [pc, #40]	; (800d3e0 <MX_USB_HOST_Init+0x44>)
 800d3b8:	f7fc f89e 	bl	80094f8 <USBH_RegisterClass>
 800d3bc:	4603      	mov	r3, r0
 800d3be:	2b00      	cmp	r3, #0
 800d3c0:	d001      	beq.n	800d3c6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800d3c2:	f7f3 ffef 	bl	80013a4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800d3c6:	4806      	ldr	r0, [pc, #24]	; (800d3e0 <MX_USB_HOST_Init+0x44>)
 800d3c8:	f7fc f922 	bl	8009610 <USBH_Start>
 800d3cc:	4603      	mov	r3, r0
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d001      	beq.n	800d3d6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800d3d2:	f7f3 ffe7 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800d3d6:	bf00      	nop
 800d3d8:	bd80      	pop	{r7, pc}
 800d3da:	bf00      	nop
 800d3dc:	0800d3fd 	.word	0x0800d3fd
 800d3e0:	200016a4 	.word	0x200016a4
 800d3e4:	2000000c 	.word	0x2000000c

0800d3e8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800d3e8:	b580      	push	{r7, lr}
 800d3ea:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800d3ec:	4802      	ldr	r0, [pc, #8]	; (800d3f8 <MX_USB_HOST_Process+0x10>)
 800d3ee:	f7fc f91f 	bl	8009630 <USBH_Process>
}
 800d3f2:	bf00      	nop
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	200016a4 	.word	0x200016a4

0800d3fc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b083      	sub	sp, #12
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
 800d404:	460b      	mov	r3, r1
 800d406:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800d408:	78fb      	ldrb	r3, [r7, #3]
 800d40a:	3b01      	subs	r3, #1
 800d40c:	2b04      	cmp	r3, #4
 800d40e:	d819      	bhi.n	800d444 <USBH_UserProcess+0x48>
 800d410:	a201      	add	r2, pc, #4	; (adr r2, 800d418 <USBH_UserProcess+0x1c>)
 800d412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d416:	bf00      	nop
 800d418:	0800d445 	.word	0x0800d445
 800d41c:	0800d435 	.word	0x0800d435
 800d420:	0800d445 	.word	0x0800d445
 800d424:	0800d43d 	.word	0x0800d43d
 800d428:	0800d42d 	.word	0x0800d42d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800d42c:	4b09      	ldr	r3, [pc, #36]	; (800d454 <USBH_UserProcess+0x58>)
 800d42e:	2203      	movs	r2, #3
 800d430:	701a      	strb	r2, [r3, #0]
  break;
 800d432:	e008      	b.n	800d446 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800d434:	4b07      	ldr	r3, [pc, #28]	; (800d454 <USBH_UserProcess+0x58>)
 800d436:	2202      	movs	r2, #2
 800d438:	701a      	strb	r2, [r3, #0]
  break;
 800d43a:	e004      	b.n	800d446 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800d43c:	4b05      	ldr	r3, [pc, #20]	; (800d454 <USBH_UserProcess+0x58>)
 800d43e:	2201      	movs	r2, #1
 800d440:	701a      	strb	r2, [r3, #0]
  break;
 800d442:	e000      	b.n	800d446 <USBH_UserProcess+0x4a>

  default:
  break;
 800d444:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800d446:	bf00      	nop
 800d448:	370c      	adds	r7, #12
 800d44a:	46bd      	mov	sp, r7
 800d44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d450:	4770      	bx	lr
 800d452:	bf00      	nop
 800d454:	20001a7c 	.word	0x20001a7c

0800d458 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800d458:	b580      	push	{r7, lr}
 800d45a:	b08a      	sub	sp, #40	; 0x28
 800d45c:	af00      	add	r7, sp, #0
 800d45e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800d460:	f107 0314 	add.w	r3, r7, #20
 800d464:	2200      	movs	r2, #0
 800d466:	601a      	str	r2, [r3, #0]
 800d468:	605a      	str	r2, [r3, #4]
 800d46a:	609a      	str	r2, [r3, #8]
 800d46c:	60da      	str	r2, [r3, #12]
 800d46e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d478:	d147      	bne.n	800d50a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800d47a:	2300      	movs	r3, #0
 800d47c:	613b      	str	r3, [r7, #16]
 800d47e:	4b25      	ldr	r3, [pc, #148]	; (800d514 <HAL_HCD_MspInit+0xbc>)
 800d480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d482:	4a24      	ldr	r2, [pc, #144]	; (800d514 <HAL_HCD_MspInit+0xbc>)
 800d484:	f043 0301 	orr.w	r3, r3, #1
 800d488:	6313      	str	r3, [r2, #48]	; 0x30
 800d48a:	4b22      	ldr	r3, [pc, #136]	; (800d514 <HAL_HCD_MspInit+0xbc>)
 800d48c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d48e:	f003 0301 	and.w	r3, r3, #1
 800d492:	613b      	str	r3, [r7, #16]
 800d494:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800d496:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d49a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800d49c:	2300      	movs	r3, #0
 800d49e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4a0:	2300      	movs	r3, #0
 800d4a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4a4:	f107 0314 	add.w	r3, r7, #20
 800d4a8:	4619      	mov	r1, r3
 800d4aa:	481b      	ldr	r0, [pc, #108]	; (800d518 <HAL_HCD_MspInit+0xc0>)
 800d4ac:	f7f4 fee8 	bl	8002280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800d4b0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800d4b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800d4b6:	2302      	movs	r3, #2
 800d4b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d4be:	2303      	movs	r3, #3
 800d4c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800d4c2:	230a      	movs	r3, #10
 800d4c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800d4c6:	f107 0314 	add.w	r3, r7, #20
 800d4ca:	4619      	mov	r1, r3
 800d4cc:	4812      	ldr	r0, [pc, #72]	; (800d518 <HAL_HCD_MspInit+0xc0>)
 800d4ce:	f7f4 fed7 	bl	8002280 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800d4d2:	4b10      	ldr	r3, [pc, #64]	; (800d514 <HAL_HCD_MspInit+0xbc>)
 800d4d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d4d6:	4a0f      	ldr	r2, [pc, #60]	; (800d514 <HAL_HCD_MspInit+0xbc>)
 800d4d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d4dc:	6353      	str	r3, [r2, #52]	; 0x34
 800d4de:	2300      	movs	r3, #0
 800d4e0:	60fb      	str	r3, [r7, #12]
 800d4e2:	4b0c      	ldr	r3, [pc, #48]	; (800d514 <HAL_HCD_MspInit+0xbc>)
 800d4e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4e6:	4a0b      	ldr	r2, [pc, #44]	; (800d514 <HAL_HCD_MspInit+0xbc>)
 800d4e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d4ec:	6453      	str	r3, [r2, #68]	; 0x44
 800d4ee:	4b09      	ldr	r3, [pc, #36]	; (800d514 <HAL_HCD_MspInit+0xbc>)
 800d4f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d4f6:	60fb      	str	r3, [r7, #12]
 800d4f8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800d4fa:	2200      	movs	r2, #0
 800d4fc:	2100      	movs	r1, #0
 800d4fe:	2043      	movs	r0, #67	; 0x43
 800d500:	f7f4 faa7 	bl	8001a52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800d504:	2043      	movs	r0, #67	; 0x43
 800d506:	f7f4 fac0 	bl	8001a8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800d50a:	bf00      	nop
 800d50c:	3728      	adds	r7, #40	; 0x28
 800d50e:	46bd      	mov	sp, r7
 800d510:	bd80      	pop	{r7, pc}
 800d512:	bf00      	nop
 800d514:	40023800 	.word	0x40023800
 800d518:	40020000 	.word	0x40020000

0800d51c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b082      	sub	sp, #8
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7fc fc5f 	bl	8009dee <USBH_LL_IncTimer>
}
 800d530:	bf00      	nop
 800d532:	3708      	adds	r7, #8
 800d534:	46bd      	mov	sp, r7
 800d536:	bd80      	pop	{r7, pc}

0800d538 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d538:	b580      	push	{r7, lr}
 800d53a:	b082      	sub	sp, #8
 800d53c:	af00      	add	r7, sp, #0
 800d53e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d546:	4618      	mov	r0, r3
 800d548:	f7fc fc97 	bl	8009e7a <USBH_LL_Connect>
}
 800d54c:	bf00      	nop
 800d54e:	3708      	adds	r7, #8
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b082      	sub	sp, #8
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d562:	4618      	mov	r0, r3
 800d564:	f7fc fca0 	bl	8009ea8 <USBH_LL_Disconnect>
}
 800d568:	bf00      	nop
 800d56a:	3708      	adds	r7, #8
 800d56c:	46bd      	mov	sp, r7
 800d56e:	bd80      	pop	{r7, pc}

0800d570 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800d570:	b480      	push	{r7}
 800d572:	b083      	sub	sp, #12
 800d574:	af00      	add	r7, sp, #0
 800d576:	6078      	str	r0, [r7, #4]
 800d578:	460b      	mov	r3, r1
 800d57a:	70fb      	strb	r3, [r7, #3]
 800d57c:	4613      	mov	r3, r2
 800d57e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800d580:	bf00      	nop
 800d582:	370c      	adds	r7, #12
 800d584:	46bd      	mov	sp, r7
 800d586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d58a:	4770      	bx	lr

0800d58c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b082      	sub	sp, #8
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7fc fc51 	bl	8009e42 <USBH_LL_PortEnabled>
}
 800d5a0:	bf00      	nop
 800d5a2:	3708      	adds	r7, #8
 800d5a4:	46bd      	mov	sp, r7
 800d5a6:	bd80      	pop	{r7, pc}

0800d5a8 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800d5a8:	b580      	push	{r7, lr}
 800d5aa:	b082      	sub	sp, #8
 800d5ac:	af00      	add	r7, sp, #0
 800d5ae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800d5b6:	4618      	mov	r0, r3
 800d5b8:	f7fc fc51 	bl	8009e5e <USBH_LL_PortDisabled>
}
 800d5bc:	bf00      	nop
 800d5be:	3708      	adds	r7, #8
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	bd80      	pop	{r7, pc}

0800d5c4 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800d5d2:	2b01      	cmp	r3, #1
 800d5d4:	d12a      	bne.n	800d62c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800d5d6:	4a18      	ldr	r2, [pc, #96]	; (800d638 <USBH_LL_Init+0x74>)
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800d5de:	687b      	ldr	r3, [r7, #4]
 800d5e0:	4a15      	ldr	r2, [pc, #84]	; (800d638 <USBH_LL_Init+0x74>)
 800d5e2:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800d5e6:	4b14      	ldr	r3, [pc, #80]	; (800d638 <USBH_LL_Init+0x74>)
 800d5e8:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800d5ec:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800d5ee:	4b12      	ldr	r3, [pc, #72]	; (800d638 <USBH_LL_Init+0x74>)
 800d5f0:	2208      	movs	r2, #8
 800d5f2:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800d5f4:	4b10      	ldr	r3, [pc, #64]	; (800d638 <USBH_LL_Init+0x74>)
 800d5f6:	2201      	movs	r2, #1
 800d5f8:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800d5fa:	4b0f      	ldr	r3, [pc, #60]	; (800d638 <USBH_LL_Init+0x74>)
 800d5fc:	2200      	movs	r2, #0
 800d5fe:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800d600:	4b0d      	ldr	r3, [pc, #52]	; (800d638 <USBH_LL_Init+0x74>)
 800d602:	2202      	movs	r2, #2
 800d604:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800d606:	4b0c      	ldr	r3, [pc, #48]	; (800d638 <USBH_LL_Init+0x74>)
 800d608:	2200      	movs	r2, #0
 800d60a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800d60c:	480a      	ldr	r0, [pc, #40]	; (800d638 <USBH_LL_Init+0x74>)
 800d60e:	f7f5 f804 	bl	800261a <HAL_HCD_Init>
 800d612:	4603      	mov	r3, r0
 800d614:	2b00      	cmp	r3, #0
 800d616:	d001      	beq.n	800d61c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800d618:	f7f3 fec4 	bl	80013a4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800d61c:	4806      	ldr	r0, [pc, #24]	; (800d638 <USBH_LL_Init+0x74>)
 800d61e:	f7f5 fbe8 	bl	8002df2 <HAL_HCD_GetCurrentFrame>
 800d622:	4603      	mov	r3, r0
 800d624:	4619      	mov	r1, r3
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f7fc fbd2 	bl	8009dd0 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800d62c:	2300      	movs	r3, #0
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3708      	adds	r7, #8
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	20001a80 	.word	0x20001a80

0800d63c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800d63c:	b580      	push	{r7, lr}
 800d63e:	b084      	sub	sp, #16
 800d640:	af00      	add	r7, sp, #0
 800d642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d644:	2300      	movs	r3, #0
 800d646:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d648:	2300      	movs	r3, #0
 800d64a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d652:	4618      	mov	r0, r3
 800d654:	f7f5 fb57 	bl	8002d06 <HAL_HCD_Start>
 800d658:	4603      	mov	r3, r0
 800d65a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d65c:	7bfb      	ldrb	r3, [r7, #15]
 800d65e:	4618      	mov	r0, r3
 800d660:	f000 f982 	bl	800d968 <USBH_Get_USB_Status>
 800d664:	4603      	mov	r3, r0
 800d666:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d668:	7bbb      	ldrb	r3, [r7, #14]
}
 800d66a:	4618      	mov	r0, r3
 800d66c:	3710      	adds	r7, #16
 800d66e:	46bd      	mov	sp, r7
 800d670:	bd80      	pop	{r7, pc}

0800d672 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800d672:	b580      	push	{r7, lr}
 800d674:	b084      	sub	sp, #16
 800d676:	af00      	add	r7, sp, #0
 800d678:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d67a:	2300      	movs	r3, #0
 800d67c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d67e:	2300      	movs	r3, #0
 800d680:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800d682:	687b      	ldr	r3, [r7, #4]
 800d684:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d688:	4618      	mov	r0, r3
 800d68a:	f7f5 fb5f 	bl	8002d4c <HAL_HCD_Stop>
 800d68e:	4603      	mov	r3, r0
 800d690:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d692:	7bfb      	ldrb	r3, [r7, #15]
 800d694:	4618      	mov	r0, r3
 800d696:	f000 f967 	bl	800d968 <USBH_Get_USB_Status>
 800d69a:	4603      	mov	r3, r0
 800d69c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d69e:	7bbb      	ldrb	r3, [r7, #14]
}
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	3710      	adds	r7, #16
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}

0800d6a8 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800d6a8:	b580      	push	{r7, lr}
 800d6aa:	b084      	sub	sp, #16
 800d6ac:	af00      	add	r7, sp, #0
 800d6ae:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800d6b0:	2301      	movs	r3, #1
 800d6b2:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7f5 fba7 	bl	8002e0e <HAL_HCD_GetCurrentSpeed>
 800d6c0:	4603      	mov	r3, r0
 800d6c2:	2b02      	cmp	r3, #2
 800d6c4:	d00c      	beq.n	800d6e0 <USBH_LL_GetSpeed+0x38>
 800d6c6:	2b02      	cmp	r3, #2
 800d6c8:	d80d      	bhi.n	800d6e6 <USBH_LL_GetSpeed+0x3e>
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d002      	beq.n	800d6d4 <USBH_LL_GetSpeed+0x2c>
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	d003      	beq.n	800d6da <USBH_LL_GetSpeed+0x32>
 800d6d2:	e008      	b.n	800d6e6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800d6d4:	2300      	movs	r3, #0
 800d6d6:	73fb      	strb	r3, [r7, #15]
    break;
 800d6d8:	e008      	b.n	800d6ec <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800d6da:	2301      	movs	r3, #1
 800d6dc:	73fb      	strb	r3, [r7, #15]
    break;
 800d6de:	e005      	b.n	800d6ec <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800d6e0:	2302      	movs	r3, #2
 800d6e2:	73fb      	strb	r3, [r7, #15]
    break;
 800d6e4:	e002      	b.n	800d6ec <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	73fb      	strb	r3, [r7, #15]
    break;
 800d6ea:	bf00      	nop
  }
  return  speed;
 800d6ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3710      	adds	r7, #16
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}

0800d6f6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800d6f6:	b580      	push	{r7, lr}
 800d6f8:	b084      	sub	sp, #16
 800d6fa:	af00      	add	r7, sp, #0
 800d6fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d6fe:	2300      	movs	r3, #0
 800d700:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d702:	2300      	movs	r3, #0
 800d704:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d70c:	4618      	mov	r0, r3
 800d70e:	f7f5 fb3a 	bl	8002d86 <HAL_HCD_ResetPort>
 800d712:	4603      	mov	r3, r0
 800d714:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d716:	7bfb      	ldrb	r3, [r7, #15]
 800d718:	4618      	mov	r0, r3
 800d71a:	f000 f925 	bl	800d968 <USBH_Get_USB_Status>
 800d71e:	4603      	mov	r3, r0
 800d720:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d722:	7bbb      	ldrb	r3, [r7, #14]
}
 800d724:	4618      	mov	r0, r3
 800d726:	3710      	adds	r7, #16
 800d728:	46bd      	mov	sp, r7
 800d72a:	bd80      	pop	{r7, pc}

0800d72c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d72c:	b580      	push	{r7, lr}
 800d72e:	b082      	sub	sp, #8
 800d730:	af00      	add	r7, sp, #0
 800d732:	6078      	str	r0, [r7, #4]
 800d734:	460b      	mov	r3, r1
 800d736:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d73e:	78fa      	ldrb	r2, [r7, #3]
 800d740:	4611      	mov	r1, r2
 800d742:	4618      	mov	r0, r3
 800d744:	f7f5 fb41 	bl	8002dca <HAL_HCD_HC_GetXferCount>
 800d748:	4603      	mov	r3, r0
}
 800d74a:	4618      	mov	r0, r3
 800d74c:	3708      	adds	r7, #8
 800d74e:	46bd      	mov	sp, r7
 800d750:	bd80      	pop	{r7, pc}

0800d752 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800d752:	b590      	push	{r4, r7, lr}
 800d754:	b089      	sub	sp, #36	; 0x24
 800d756:	af04      	add	r7, sp, #16
 800d758:	6078      	str	r0, [r7, #4]
 800d75a:	4608      	mov	r0, r1
 800d75c:	4611      	mov	r1, r2
 800d75e:	461a      	mov	r2, r3
 800d760:	4603      	mov	r3, r0
 800d762:	70fb      	strb	r3, [r7, #3]
 800d764:	460b      	mov	r3, r1
 800d766:	70bb      	strb	r3, [r7, #2]
 800d768:	4613      	mov	r3, r2
 800d76a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d76c:	2300      	movs	r3, #0
 800d76e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d770:	2300      	movs	r3, #0
 800d772:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d77a:	787c      	ldrb	r4, [r7, #1]
 800d77c:	78ba      	ldrb	r2, [r7, #2]
 800d77e:	78f9      	ldrb	r1, [r7, #3]
 800d780:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d782:	9302      	str	r3, [sp, #8]
 800d784:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800d788:	9301      	str	r3, [sp, #4]
 800d78a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d78e:	9300      	str	r3, [sp, #0]
 800d790:	4623      	mov	r3, r4
 800d792:	f7f4 ffa4 	bl	80026de <HAL_HCD_HC_Init>
 800d796:	4603      	mov	r3, r0
 800d798:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800d79a:	7bfb      	ldrb	r3, [r7, #15]
 800d79c:	4618      	mov	r0, r3
 800d79e:	f000 f8e3 	bl	800d968 <USBH_Get_USB_Status>
 800d7a2:	4603      	mov	r3, r0
 800d7a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7a8:	4618      	mov	r0, r3
 800d7aa:	3714      	adds	r7, #20
 800d7ac:	46bd      	mov	sp, r7
 800d7ae:	bd90      	pop	{r4, r7, pc}

0800d7b0 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
 800d7b8:	460b      	mov	r3, r1
 800d7ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d7bc:	2300      	movs	r3, #0
 800d7be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d7c0:	2300      	movs	r3, #0
 800d7c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d7ca:	78fa      	ldrb	r2, [r7, #3]
 800d7cc:	4611      	mov	r1, r2
 800d7ce:	4618      	mov	r0, r3
 800d7d0:	f7f5 f814 	bl	80027fc <HAL_HCD_HC_Halt>
 800d7d4:	4603      	mov	r3, r0
 800d7d6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800d7d8:	7bfb      	ldrb	r3, [r7, #15]
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f000 f8c4 	bl	800d968 <USBH_Get_USB_Status>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d7e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800d7e6:	4618      	mov	r0, r3
 800d7e8:	3710      	adds	r7, #16
 800d7ea:	46bd      	mov	sp, r7
 800d7ec:	bd80      	pop	{r7, pc}

0800d7ee <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800d7ee:	b590      	push	{r4, r7, lr}
 800d7f0:	b089      	sub	sp, #36	; 0x24
 800d7f2:	af04      	add	r7, sp, #16
 800d7f4:	6078      	str	r0, [r7, #4]
 800d7f6:	4608      	mov	r0, r1
 800d7f8:	4611      	mov	r1, r2
 800d7fa:	461a      	mov	r2, r3
 800d7fc:	4603      	mov	r3, r0
 800d7fe:	70fb      	strb	r3, [r7, #3]
 800d800:	460b      	mov	r3, r1
 800d802:	70bb      	strb	r3, [r7, #2]
 800d804:	4613      	mov	r3, r2
 800d806:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800d808:	2300      	movs	r3, #0
 800d80a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d80c:	2300      	movs	r3, #0
 800d80e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800d810:	687b      	ldr	r3, [r7, #4]
 800d812:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800d816:	787c      	ldrb	r4, [r7, #1]
 800d818:	78ba      	ldrb	r2, [r7, #2]
 800d81a:	78f9      	ldrb	r1, [r7, #3]
 800d81c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800d820:	9303      	str	r3, [sp, #12]
 800d822:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800d824:	9302      	str	r3, [sp, #8]
 800d826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d828:	9301      	str	r3, [sp, #4]
 800d82a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800d82e:	9300      	str	r3, [sp, #0]
 800d830:	4623      	mov	r3, r4
 800d832:	f7f5 f807 	bl	8002844 <HAL_HCD_HC_SubmitRequest>
 800d836:	4603      	mov	r3, r0
 800d838:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800d83a:	7bfb      	ldrb	r3, [r7, #15]
 800d83c:	4618      	mov	r0, r3
 800d83e:	f000 f893 	bl	800d968 <USBH_Get_USB_Status>
 800d842:	4603      	mov	r3, r0
 800d844:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800d846:	7bbb      	ldrb	r3, [r7, #14]
}
 800d848:	4618      	mov	r0, r3
 800d84a:	3714      	adds	r7, #20
 800d84c:	46bd      	mov	sp, r7
 800d84e:	bd90      	pop	{r4, r7, pc}

0800d850 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b082      	sub	sp, #8
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
 800d858:	460b      	mov	r3, r1
 800d85a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d862:	78fa      	ldrb	r2, [r7, #3]
 800d864:	4611      	mov	r1, r2
 800d866:	4618      	mov	r0, r3
 800d868:	f7f5 fa9b 	bl	8002da2 <HAL_HCD_HC_GetURBState>
 800d86c:	4603      	mov	r3, r0
}
 800d86e:	4618      	mov	r0, r3
 800d870:	3708      	adds	r7, #8
 800d872:	46bd      	mov	sp, r7
 800d874:	bd80      	pop	{r7, pc}

0800d876 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800d876:	b580      	push	{r7, lr}
 800d878:	b082      	sub	sp, #8
 800d87a:	af00      	add	r7, sp, #0
 800d87c:	6078      	str	r0, [r7, #4]
 800d87e:	460b      	mov	r3, r1
 800d880:	70fb      	strb	r3, [r7, #3]
      /* USER CODE BEGIN DRIVE_LOW_CHARGE_FOR_FS */

      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800d882:	20c8      	movs	r0, #200	; 0xc8
 800d884:	f7f3 ffe6 	bl	8001854 <HAL_Delay>
  return USBH_OK;
 800d888:	2300      	movs	r3, #0
}
 800d88a:	4618      	mov	r0, r3
 800d88c:	3708      	adds	r7, #8
 800d88e:	46bd      	mov	sp, r7
 800d890:	bd80      	pop	{r7, pc}

0800d892 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800d892:	b480      	push	{r7}
 800d894:	b085      	sub	sp, #20
 800d896:	af00      	add	r7, sp, #0
 800d898:	6078      	str	r0, [r7, #4]
 800d89a:	460b      	mov	r3, r1
 800d89c:	70fb      	strb	r3, [r7, #3]
 800d89e:	4613      	mov	r3, r2
 800d8a0:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d8a8:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800d8aa:	78fb      	ldrb	r3, [r7, #3]
 800d8ac:	68fa      	ldr	r2, [r7, #12]
 800d8ae:	212c      	movs	r1, #44	; 0x2c
 800d8b0:	fb01 f303 	mul.w	r3, r1, r3
 800d8b4:	4413      	add	r3, r2
 800d8b6:	333b      	adds	r3, #59	; 0x3b
 800d8b8:	781b      	ldrb	r3, [r3, #0]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d009      	beq.n	800d8d2 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800d8be:	78fb      	ldrb	r3, [r7, #3]
 800d8c0:	68fa      	ldr	r2, [r7, #12]
 800d8c2:	212c      	movs	r1, #44	; 0x2c
 800d8c4:	fb01 f303 	mul.w	r3, r1, r3
 800d8c8:	4413      	add	r3, r2
 800d8ca:	3354      	adds	r3, #84	; 0x54
 800d8cc:	78ba      	ldrb	r2, [r7, #2]
 800d8ce:	701a      	strb	r2, [r3, #0]
 800d8d0:	e008      	b.n	800d8e4 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800d8d2:	78fb      	ldrb	r3, [r7, #3]
 800d8d4:	68fa      	ldr	r2, [r7, #12]
 800d8d6:	212c      	movs	r1, #44	; 0x2c
 800d8d8:	fb01 f303 	mul.w	r3, r1, r3
 800d8dc:	4413      	add	r3, r2
 800d8de:	3355      	adds	r3, #85	; 0x55
 800d8e0:	78ba      	ldrb	r2, [r7, #2]
 800d8e2:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800d8e4:	2300      	movs	r3, #0
}
 800d8e6:	4618      	mov	r0, r3
 800d8e8:	3714      	adds	r7, #20
 800d8ea:	46bd      	mov	sp, r7
 800d8ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8f0:	4770      	bx	lr

0800d8f2 <USBH_LL_GetToggle>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval toggle (0/1)
  */
uint8_t USBH_LL_GetToggle(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800d8f2:	b480      	push	{r7}
 800d8f4:	b085      	sub	sp, #20
 800d8f6:	af00      	add	r7, sp, #0
 800d8f8:	6078      	str	r0, [r7, #4]
 800d8fa:	460b      	mov	r3, r1
 800d8fc:	70fb      	strb	r3, [r7, #3]
  uint8_t toggle = 0;
 800d8fe:	2300      	movs	r3, #0
 800d900:	73fb      	strb	r3, [r7, #15]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800d902:	687b      	ldr	r3, [r7, #4]
 800d904:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800d908:	60bb      	str	r3, [r7, #8]

  if(pHandle->hc[pipe].ep_is_in)
 800d90a:	78fb      	ldrb	r3, [r7, #3]
 800d90c:	68ba      	ldr	r2, [r7, #8]
 800d90e:	212c      	movs	r1, #44	; 0x2c
 800d910:	fb01 f303 	mul.w	r3, r1, r3
 800d914:	4413      	add	r3, r2
 800d916:	333b      	adds	r3, #59	; 0x3b
 800d918:	781b      	ldrb	r3, [r3, #0]
 800d91a:	2b00      	cmp	r3, #0
 800d91c:	d009      	beq.n	800d932 <USBH_LL_GetToggle+0x40>
  {
    toggle = pHandle->hc[pipe].toggle_in;
 800d91e:	78fb      	ldrb	r3, [r7, #3]
 800d920:	68ba      	ldr	r2, [r7, #8]
 800d922:	212c      	movs	r1, #44	; 0x2c
 800d924:	fb01 f303 	mul.w	r3, r1, r3
 800d928:	4413      	add	r3, r2
 800d92a:	3354      	adds	r3, #84	; 0x54
 800d92c:	781b      	ldrb	r3, [r3, #0]
 800d92e:	73fb      	strb	r3, [r7, #15]
 800d930:	e008      	b.n	800d944 <USBH_LL_GetToggle+0x52>
  }
  else
  {
    toggle = pHandle->hc[pipe].toggle_out;
 800d932:	78fb      	ldrb	r3, [r7, #3]
 800d934:	68ba      	ldr	r2, [r7, #8]
 800d936:	212c      	movs	r1, #44	; 0x2c
 800d938:	fb01 f303 	mul.w	r3, r1, r3
 800d93c:	4413      	add	r3, r2
 800d93e:	3355      	adds	r3, #85	; 0x55
 800d940:	781b      	ldrb	r3, [r3, #0]
 800d942:	73fb      	strb	r3, [r7, #15]
  }
  return toggle;
 800d944:	7bfb      	ldrb	r3, [r7, #15]
}
 800d946:	4618      	mov	r0, r3
 800d948:	3714      	adds	r7, #20
 800d94a:	46bd      	mov	sp, r7
 800d94c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d950:	4770      	bx	lr

0800d952 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800d952:	b580      	push	{r7, lr}
 800d954:	b082      	sub	sp, #8
 800d956:	af00      	add	r7, sp, #0
 800d958:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	f7f3 ff7a 	bl	8001854 <HAL_Delay>
}
 800d960:	bf00      	nop
 800d962:	3708      	adds	r7, #8
 800d964:	46bd      	mov	sp, r7
 800d966:	bd80      	pop	{r7, pc}

0800d968 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800d968:	b480      	push	{r7}
 800d96a:	b085      	sub	sp, #20
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	4603      	mov	r3, r0
 800d970:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800d972:	2300      	movs	r3, #0
 800d974:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800d976:	79fb      	ldrb	r3, [r7, #7]
 800d978:	2b03      	cmp	r3, #3
 800d97a:	d817      	bhi.n	800d9ac <USBH_Get_USB_Status+0x44>
 800d97c:	a201      	add	r2, pc, #4	; (adr r2, 800d984 <USBH_Get_USB_Status+0x1c>)
 800d97e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d982:	bf00      	nop
 800d984:	0800d995 	.word	0x0800d995
 800d988:	0800d99b 	.word	0x0800d99b
 800d98c:	0800d9a1 	.word	0x0800d9a1
 800d990:	0800d9a7 	.word	0x0800d9a7
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800d994:	2300      	movs	r3, #0
 800d996:	73fb      	strb	r3, [r7, #15]
    break;
 800d998:	e00b      	b.n	800d9b2 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800d99a:	2302      	movs	r3, #2
 800d99c:	73fb      	strb	r3, [r7, #15]
    break;
 800d99e:	e008      	b.n	800d9b2 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800d9a0:	2301      	movs	r3, #1
 800d9a2:	73fb      	strb	r3, [r7, #15]
    break;
 800d9a4:	e005      	b.n	800d9b2 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800d9a6:	2302      	movs	r3, #2
 800d9a8:	73fb      	strb	r3, [r7, #15]
    break;
 800d9aa:	e002      	b.n	800d9b2 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800d9ac:	2302      	movs	r3, #2
 800d9ae:	73fb      	strb	r3, [r7, #15]
    break;
 800d9b0:	bf00      	nop
  }
  return usb_status;
 800d9b2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d9b4:	4618      	mov	r0, r3
 800d9b6:	3714      	adds	r7, #20
 800d9b8:	46bd      	mov	sp, r7
 800d9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9be:	4770      	bx	lr

0800d9c0 <malloc>:
 800d9c0:	4b02      	ldr	r3, [pc, #8]	; (800d9cc <malloc+0xc>)
 800d9c2:	4601      	mov	r1, r0
 800d9c4:	6818      	ldr	r0, [r3, #0]
 800d9c6:	f000 b82b 	b.w	800da20 <_malloc_r>
 800d9ca:	bf00      	nop
 800d9cc:	20000078 	.word	0x20000078

0800d9d0 <free>:
 800d9d0:	4b02      	ldr	r3, [pc, #8]	; (800d9dc <free+0xc>)
 800d9d2:	4601      	mov	r1, r0
 800d9d4:	6818      	ldr	r0, [r3, #0]
 800d9d6:	f000 b901 	b.w	800dbdc <_free_r>
 800d9da:	bf00      	nop
 800d9dc:	20000078 	.word	0x20000078

0800d9e0 <sbrk_aligned>:
 800d9e0:	b570      	push	{r4, r5, r6, lr}
 800d9e2:	4e0e      	ldr	r6, [pc, #56]	; (800da1c <sbrk_aligned+0x3c>)
 800d9e4:	460c      	mov	r4, r1
 800d9e6:	6831      	ldr	r1, [r6, #0]
 800d9e8:	4605      	mov	r5, r0
 800d9ea:	b911      	cbnz	r1, 800d9f2 <sbrk_aligned+0x12>
 800d9ec:	f000 f8ac 	bl	800db48 <_sbrk_r>
 800d9f0:	6030      	str	r0, [r6, #0]
 800d9f2:	4621      	mov	r1, r4
 800d9f4:	4628      	mov	r0, r5
 800d9f6:	f000 f8a7 	bl	800db48 <_sbrk_r>
 800d9fa:	1c43      	adds	r3, r0, #1
 800d9fc:	d00a      	beq.n	800da14 <sbrk_aligned+0x34>
 800d9fe:	1cc4      	adds	r4, r0, #3
 800da00:	f024 0403 	bic.w	r4, r4, #3
 800da04:	42a0      	cmp	r0, r4
 800da06:	d007      	beq.n	800da18 <sbrk_aligned+0x38>
 800da08:	1a21      	subs	r1, r4, r0
 800da0a:	4628      	mov	r0, r5
 800da0c:	f000 f89c 	bl	800db48 <_sbrk_r>
 800da10:	3001      	adds	r0, #1
 800da12:	d101      	bne.n	800da18 <sbrk_aligned+0x38>
 800da14:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800da18:	4620      	mov	r0, r4
 800da1a:	bd70      	pop	{r4, r5, r6, pc}
 800da1c:	20001d88 	.word	0x20001d88

0800da20 <_malloc_r>:
 800da20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da24:	1ccd      	adds	r5, r1, #3
 800da26:	f025 0503 	bic.w	r5, r5, #3
 800da2a:	3508      	adds	r5, #8
 800da2c:	2d0c      	cmp	r5, #12
 800da2e:	bf38      	it	cc
 800da30:	250c      	movcc	r5, #12
 800da32:	2d00      	cmp	r5, #0
 800da34:	4607      	mov	r7, r0
 800da36:	db01      	blt.n	800da3c <_malloc_r+0x1c>
 800da38:	42a9      	cmp	r1, r5
 800da3a:	d905      	bls.n	800da48 <_malloc_r+0x28>
 800da3c:	230c      	movs	r3, #12
 800da3e:	603b      	str	r3, [r7, #0]
 800da40:	2600      	movs	r6, #0
 800da42:	4630      	mov	r0, r6
 800da44:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800da48:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800db1c <_malloc_r+0xfc>
 800da4c:	f000 f868 	bl	800db20 <__malloc_lock>
 800da50:	f8d8 3000 	ldr.w	r3, [r8]
 800da54:	461c      	mov	r4, r3
 800da56:	bb5c      	cbnz	r4, 800dab0 <_malloc_r+0x90>
 800da58:	4629      	mov	r1, r5
 800da5a:	4638      	mov	r0, r7
 800da5c:	f7ff ffc0 	bl	800d9e0 <sbrk_aligned>
 800da60:	1c43      	adds	r3, r0, #1
 800da62:	4604      	mov	r4, r0
 800da64:	d155      	bne.n	800db12 <_malloc_r+0xf2>
 800da66:	f8d8 4000 	ldr.w	r4, [r8]
 800da6a:	4626      	mov	r6, r4
 800da6c:	2e00      	cmp	r6, #0
 800da6e:	d145      	bne.n	800dafc <_malloc_r+0xdc>
 800da70:	2c00      	cmp	r4, #0
 800da72:	d048      	beq.n	800db06 <_malloc_r+0xe6>
 800da74:	6823      	ldr	r3, [r4, #0]
 800da76:	4631      	mov	r1, r6
 800da78:	4638      	mov	r0, r7
 800da7a:	eb04 0903 	add.w	r9, r4, r3
 800da7e:	f000 f863 	bl	800db48 <_sbrk_r>
 800da82:	4581      	cmp	r9, r0
 800da84:	d13f      	bne.n	800db06 <_malloc_r+0xe6>
 800da86:	6821      	ldr	r1, [r4, #0]
 800da88:	1a6d      	subs	r5, r5, r1
 800da8a:	4629      	mov	r1, r5
 800da8c:	4638      	mov	r0, r7
 800da8e:	f7ff ffa7 	bl	800d9e0 <sbrk_aligned>
 800da92:	3001      	adds	r0, #1
 800da94:	d037      	beq.n	800db06 <_malloc_r+0xe6>
 800da96:	6823      	ldr	r3, [r4, #0]
 800da98:	442b      	add	r3, r5
 800da9a:	6023      	str	r3, [r4, #0]
 800da9c:	f8d8 3000 	ldr.w	r3, [r8]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d038      	beq.n	800db16 <_malloc_r+0xf6>
 800daa4:	685a      	ldr	r2, [r3, #4]
 800daa6:	42a2      	cmp	r2, r4
 800daa8:	d12b      	bne.n	800db02 <_malloc_r+0xe2>
 800daaa:	2200      	movs	r2, #0
 800daac:	605a      	str	r2, [r3, #4]
 800daae:	e00f      	b.n	800dad0 <_malloc_r+0xb0>
 800dab0:	6822      	ldr	r2, [r4, #0]
 800dab2:	1b52      	subs	r2, r2, r5
 800dab4:	d41f      	bmi.n	800daf6 <_malloc_r+0xd6>
 800dab6:	2a0b      	cmp	r2, #11
 800dab8:	d917      	bls.n	800daea <_malloc_r+0xca>
 800daba:	1961      	adds	r1, r4, r5
 800dabc:	42a3      	cmp	r3, r4
 800dabe:	6025      	str	r5, [r4, #0]
 800dac0:	bf18      	it	ne
 800dac2:	6059      	strne	r1, [r3, #4]
 800dac4:	6863      	ldr	r3, [r4, #4]
 800dac6:	bf08      	it	eq
 800dac8:	f8c8 1000 	streq.w	r1, [r8]
 800dacc:	5162      	str	r2, [r4, r5]
 800dace:	604b      	str	r3, [r1, #4]
 800dad0:	4638      	mov	r0, r7
 800dad2:	f104 060b 	add.w	r6, r4, #11
 800dad6:	f000 f829 	bl	800db2c <__malloc_unlock>
 800dada:	f026 0607 	bic.w	r6, r6, #7
 800dade:	1d23      	adds	r3, r4, #4
 800dae0:	1af2      	subs	r2, r6, r3
 800dae2:	d0ae      	beq.n	800da42 <_malloc_r+0x22>
 800dae4:	1b9b      	subs	r3, r3, r6
 800dae6:	50a3      	str	r3, [r4, r2]
 800dae8:	e7ab      	b.n	800da42 <_malloc_r+0x22>
 800daea:	42a3      	cmp	r3, r4
 800daec:	6862      	ldr	r2, [r4, #4]
 800daee:	d1dd      	bne.n	800daac <_malloc_r+0x8c>
 800daf0:	f8c8 2000 	str.w	r2, [r8]
 800daf4:	e7ec      	b.n	800dad0 <_malloc_r+0xb0>
 800daf6:	4623      	mov	r3, r4
 800daf8:	6864      	ldr	r4, [r4, #4]
 800dafa:	e7ac      	b.n	800da56 <_malloc_r+0x36>
 800dafc:	4634      	mov	r4, r6
 800dafe:	6876      	ldr	r6, [r6, #4]
 800db00:	e7b4      	b.n	800da6c <_malloc_r+0x4c>
 800db02:	4613      	mov	r3, r2
 800db04:	e7cc      	b.n	800daa0 <_malloc_r+0x80>
 800db06:	230c      	movs	r3, #12
 800db08:	603b      	str	r3, [r7, #0]
 800db0a:	4638      	mov	r0, r7
 800db0c:	f000 f80e 	bl	800db2c <__malloc_unlock>
 800db10:	e797      	b.n	800da42 <_malloc_r+0x22>
 800db12:	6025      	str	r5, [r4, #0]
 800db14:	e7dc      	b.n	800dad0 <_malloc_r+0xb0>
 800db16:	605b      	str	r3, [r3, #4]
 800db18:	deff      	udf	#255	; 0xff
 800db1a:	bf00      	nop
 800db1c:	20001d84 	.word	0x20001d84

0800db20 <__malloc_lock>:
 800db20:	4801      	ldr	r0, [pc, #4]	; (800db28 <__malloc_lock+0x8>)
 800db22:	f000 b84b 	b.w	800dbbc <__retarget_lock_acquire_recursive>
 800db26:	bf00      	nop
 800db28:	20001ec8 	.word	0x20001ec8

0800db2c <__malloc_unlock>:
 800db2c:	4801      	ldr	r0, [pc, #4]	; (800db34 <__malloc_unlock+0x8>)
 800db2e:	f000 b846 	b.w	800dbbe <__retarget_lock_release_recursive>
 800db32:	bf00      	nop
 800db34:	20001ec8 	.word	0x20001ec8

0800db38 <memset>:
 800db38:	4402      	add	r2, r0
 800db3a:	4603      	mov	r3, r0
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d100      	bne.n	800db42 <memset+0xa>
 800db40:	4770      	bx	lr
 800db42:	f803 1b01 	strb.w	r1, [r3], #1
 800db46:	e7f9      	b.n	800db3c <memset+0x4>

0800db48 <_sbrk_r>:
 800db48:	b538      	push	{r3, r4, r5, lr}
 800db4a:	4d06      	ldr	r5, [pc, #24]	; (800db64 <_sbrk_r+0x1c>)
 800db4c:	2300      	movs	r3, #0
 800db4e:	4604      	mov	r4, r0
 800db50:	4608      	mov	r0, r1
 800db52:	602b      	str	r3, [r5, #0]
 800db54:	f7f3 fd9a 	bl	800168c <_sbrk>
 800db58:	1c43      	adds	r3, r0, #1
 800db5a:	d102      	bne.n	800db62 <_sbrk_r+0x1a>
 800db5c:	682b      	ldr	r3, [r5, #0]
 800db5e:	b103      	cbz	r3, 800db62 <_sbrk_r+0x1a>
 800db60:	6023      	str	r3, [r4, #0]
 800db62:	bd38      	pop	{r3, r4, r5, pc}
 800db64:	20001ec4 	.word	0x20001ec4

0800db68 <__errno>:
 800db68:	4b01      	ldr	r3, [pc, #4]	; (800db70 <__errno+0x8>)
 800db6a:	6818      	ldr	r0, [r3, #0]
 800db6c:	4770      	bx	lr
 800db6e:	bf00      	nop
 800db70:	20000078 	.word	0x20000078

0800db74 <__libc_init_array>:
 800db74:	b570      	push	{r4, r5, r6, lr}
 800db76:	4d0d      	ldr	r5, [pc, #52]	; (800dbac <__libc_init_array+0x38>)
 800db78:	4c0d      	ldr	r4, [pc, #52]	; (800dbb0 <__libc_init_array+0x3c>)
 800db7a:	1b64      	subs	r4, r4, r5
 800db7c:	10a4      	asrs	r4, r4, #2
 800db7e:	2600      	movs	r6, #0
 800db80:	42a6      	cmp	r6, r4
 800db82:	d109      	bne.n	800db98 <__libc_init_array+0x24>
 800db84:	4d0b      	ldr	r5, [pc, #44]	; (800dbb4 <__libc_init_array+0x40>)
 800db86:	4c0c      	ldr	r4, [pc, #48]	; (800dbb8 <__libc_init_array+0x44>)
 800db88:	f000 f874 	bl	800dc74 <_init>
 800db8c:	1b64      	subs	r4, r4, r5
 800db8e:	10a4      	asrs	r4, r4, #2
 800db90:	2600      	movs	r6, #0
 800db92:	42a6      	cmp	r6, r4
 800db94:	d105      	bne.n	800dba2 <__libc_init_array+0x2e>
 800db96:	bd70      	pop	{r4, r5, r6, pc}
 800db98:	f855 3b04 	ldr.w	r3, [r5], #4
 800db9c:	4798      	blx	r3
 800db9e:	3601      	adds	r6, #1
 800dba0:	e7ee      	b.n	800db80 <__libc_init_array+0xc>
 800dba2:	f855 3b04 	ldr.w	r3, [r5], #4
 800dba6:	4798      	blx	r3
 800dba8:	3601      	adds	r6, #1
 800dbaa:	e7f2      	b.n	800db92 <__libc_init_array+0x1e>
 800dbac:	0800de18 	.word	0x0800de18
 800dbb0:	0800de18 	.word	0x0800de18
 800dbb4:	0800de18 	.word	0x0800de18
 800dbb8:	0800de1c 	.word	0x0800de1c

0800dbbc <__retarget_lock_acquire_recursive>:
 800dbbc:	4770      	bx	lr

0800dbbe <__retarget_lock_release_recursive>:
 800dbbe:	4770      	bx	lr

0800dbc0 <memcpy>:
 800dbc0:	440a      	add	r2, r1
 800dbc2:	4291      	cmp	r1, r2
 800dbc4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800dbc8:	d100      	bne.n	800dbcc <memcpy+0xc>
 800dbca:	4770      	bx	lr
 800dbcc:	b510      	push	{r4, lr}
 800dbce:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dbd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dbd6:	4291      	cmp	r1, r2
 800dbd8:	d1f9      	bne.n	800dbce <memcpy+0xe>
 800dbda:	bd10      	pop	{r4, pc}

0800dbdc <_free_r>:
 800dbdc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dbde:	2900      	cmp	r1, #0
 800dbe0:	d044      	beq.n	800dc6c <_free_r+0x90>
 800dbe2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbe6:	9001      	str	r0, [sp, #4]
 800dbe8:	2b00      	cmp	r3, #0
 800dbea:	f1a1 0404 	sub.w	r4, r1, #4
 800dbee:	bfb8      	it	lt
 800dbf0:	18e4      	addlt	r4, r4, r3
 800dbf2:	f7ff ff95 	bl	800db20 <__malloc_lock>
 800dbf6:	4a1e      	ldr	r2, [pc, #120]	; (800dc70 <_free_r+0x94>)
 800dbf8:	9801      	ldr	r0, [sp, #4]
 800dbfa:	6813      	ldr	r3, [r2, #0]
 800dbfc:	b933      	cbnz	r3, 800dc0c <_free_r+0x30>
 800dbfe:	6063      	str	r3, [r4, #4]
 800dc00:	6014      	str	r4, [r2, #0]
 800dc02:	b003      	add	sp, #12
 800dc04:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800dc08:	f7ff bf90 	b.w	800db2c <__malloc_unlock>
 800dc0c:	42a3      	cmp	r3, r4
 800dc0e:	d908      	bls.n	800dc22 <_free_r+0x46>
 800dc10:	6825      	ldr	r5, [r4, #0]
 800dc12:	1961      	adds	r1, r4, r5
 800dc14:	428b      	cmp	r3, r1
 800dc16:	bf01      	itttt	eq
 800dc18:	6819      	ldreq	r1, [r3, #0]
 800dc1a:	685b      	ldreq	r3, [r3, #4]
 800dc1c:	1949      	addeq	r1, r1, r5
 800dc1e:	6021      	streq	r1, [r4, #0]
 800dc20:	e7ed      	b.n	800dbfe <_free_r+0x22>
 800dc22:	461a      	mov	r2, r3
 800dc24:	685b      	ldr	r3, [r3, #4]
 800dc26:	b10b      	cbz	r3, 800dc2c <_free_r+0x50>
 800dc28:	42a3      	cmp	r3, r4
 800dc2a:	d9fa      	bls.n	800dc22 <_free_r+0x46>
 800dc2c:	6811      	ldr	r1, [r2, #0]
 800dc2e:	1855      	adds	r5, r2, r1
 800dc30:	42a5      	cmp	r5, r4
 800dc32:	d10b      	bne.n	800dc4c <_free_r+0x70>
 800dc34:	6824      	ldr	r4, [r4, #0]
 800dc36:	4421      	add	r1, r4
 800dc38:	1854      	adds	r4, r2, r1
 800dc3a:	42a3      	cmp	r3, r4
 800dc3c:	6011      	str	r1, [r2, #0]
 800dc3e:	d1e0      	bne.n	800dc02 <_free_r+0x26>
 800dc40:	681c      	ldr	r4, [r3, #0]
 800dc42:	685b      	ldr	r3, [r3, #4]
 800dc44:	6053      	str	r3, [r2, #4]
 800dc46:	440c      	add	r4, r1
 800dc48:	6014      	str	r4, [r2, #0]
 800dc4a:	e7da      	b.n	800dc02 <_free_r+0x26>
 800dc4c:	d902      	bls.n	800dc54 <_free_r+0x78>
 800dc4e:	230c      	movs	r3, #12
 800dc50:	6003      	str	r3, [r0, #0]
 800dc52:	e7d6      	b.n	800dc02 <_free_r+0x26>
 800dc54:	6825      	ldr	r5, [r4, #0]
 800dc56:	1961      	adds	r1, r4, r5
 800dc58:	428b      	cmp	r3, r1
 800dc5a:	bf04      	itt	eq
 800dc5c:	6819      	ldreq	r1, [r3, #0]
 800dc5e:	685b      	ldreq	r3, [r3, #4]
 800dc60:	6063      	str	r3, [r4, #4]
 800dc62:	bf04      	itt	eq
 800dc64:	1949      	addeq	r1, r1, r5
 800dc66:	6021      	streq	r1, [r4, #0]
 800dc68:	6054      	str	r4, [r2, #4]
 800dc6a:	e7ca      	b.n	800dc02 <_free_r+0x26>
 800dc6c:	b003      	add	sp, #12
 800dc6e:	bd30      	pop	{r4, r5, pc}
 800dc70:	20001d84 	.word	0x20001d84

0800dc74 <_init>:
 800dc74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc76:	bf00      	nop
 800dc78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc7a:	bc08      	pop	{r3}
 800dc7c:	469e      	mov	lr, r3
 800dc7e:	4770      	bx	lr

0800dc80 <_fini>:
 800dc80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc82:	bf00      	nop
 800dc84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc86:	bc08      	pop	{r3}
 800dc88:	469e      	mov	lr, r3
 800dc8a:	4770      	bx	lr
